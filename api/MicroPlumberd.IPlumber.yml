### YamlMime:ManagedReference
items:
- uid: MicroPlumberd.IPlumber
  commentId: T:MicroPlumberd.IPlumber
  id: IPlumber
  parent: MicroPlumberd
  children:
  - MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  - MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  - MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  - MicroPlumberd.IPlumber.Get``1(System.Guid)
  - MicroPlumberd.IPlumber.SaveChanges``1(``0,System.Object)
  - MicroPlumberd.IPlumber.SaveNew``1(``0,System.Object)
  - MicroPlumberd.IPlumber.Subscribe(System.String,EventStore.Client.FromStream,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribeModelPersistently``1(``0)
  - MicroPlumberd.IPlumber.SubscribeModel``1(``0,System.Nullable{EventStore.Client.FromStream})
  - MicroPlumberd.IPlumber.SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribeSet
  langs:
  - csharp
  - vb
  name: IPlumber
  nameWithType: IPlumber
  fullName: MicroPlumberd.IPlumber
  type: Interface
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: IPlumber
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 6
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Root interface for plumber
  example: []
  syntax:
    content: public interface IPlumber
    content.vb: Public Interface IPlumber
- uid: MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  commentId: M:MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  id: AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEvents(string, StreamRevision, IEnumerable<object>, object?)
  nameWithType: IPlumber.AppendEvents(string, StreamRevision, IEnumerable<object>, object?)
  fullName: MicroPlumberd.IPlumber.AppendEvents(string, EventStore.Client.StreamRevision, System.Collections.Generic.IEnumerable<object>, object?)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEvents
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 16
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends event to a stream, uses relevant convention, however aggregate-type or instance are passed as null to conventions.
  example: []
  syntax:
    content: Task AppendEvents(string streamId, StreamRevision rev, IEnumerable<object> events, object? metadata = null)
    parameters:
    - id: streamId
      type: System.String
      description: Full stream id, typically in format {category}-{id}
    - id: rev
      type: EventStore.Client.StreamRevision
      description: Expected stream revision
    - id: events
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: Events that are going to be serialized and appended
    - id: metadata
      type: System.Object
      description: Metadata that will be merged with metadata created from conventions
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function AppendEvents(streamId As String, rev As StreamRevision, events As IEnumerable(Of Object), metadata As Object = Nothing) As Task
  overload: MicroPlumberd.IPlumber.AppendEvents*
  nameWithType.vb: IPlumber.AppendEvents(String, StreamRevision, IEnumerable(Of Object), Object)
  fullName.vb: MicroPlumberd.IPlumber.AppendEvents(String, EventStore.Client.StreamRevision, System.Collections.Generic.IEnumerable(Of Object), Object)
  name.vb: AppendEvents(String, StreamRevision, IEnumerable(Of Object), Object)
- uid: MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  commentId: M:MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  id: AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEvents(string, StreamState, IEnumerable<object>, object?)
  nameWithType: IPlumber.AppendEvents(string, StreamState, IEnumerable<object>, object?)
  fullName: MicroPlumberd.IPlumber.AppendEvents(string, EventStore.Client.StreamState, System.Collections.Generic.IEnumerable<object>, object?)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEvents
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 26
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends event to a stream, uses relevant convention, however aggregate-type or instance are passed as null to conventions.
  example: []
  syntax:
    content: Task AppendEvents(string streamId, StreamState state, IEnumerable<object> events, object? metadata = null)
    parameters:
    - id: streamId
      type: System.String
      description: Full stream id, typically in format {category}-{id}
    - id: state
      type: EventStore.Client.StreamState
      description: State of the stream
    - id: events
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: Events that are going to be serialized and appended
    - id: metadata
      type: System.Object
      description: Metadata that will be merged with metadata created from conventions
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function AppendEvents(streamId As String, state As StreamState, events As IEnumerable(Of Object), metadata As Object = Nothing) As Task
  overload: MicroPlumberd.IPlumber.AppendEvents*
  nameWithType.vb: IPlumber.AppendEvents(String, StreamState, IEnumerable(Of Object), Object)
  fullName.vb: MicroPlumberd.IPlumber.AppendEvents(String, EventStore.Client.StreamState, System.Collections.Generic.IEnumerable(Of Object), Object)
  name.vb: AppendEvents(String, StreamState, IEnumerable(Of Object), Object)
- uid: MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  commentId: M:MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  id: AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEvents(string, StreamState, params object[])
  nameWithType: IPlumber.AppendEvents(string, StreamState, params object[])
  fullName: MicroPlumberd.IPlumber.AppendEvents(string, EventStore.Client.StreamState, params object[])
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEvents
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 27
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: Task AppendEvents(string streamId, StreamState state, params object[] events)
    parameters:
    - id: streamId
      type: System.String
    - id: state
      type: EventStore.Client.StreamState
    - id: events
      type: System.Object[]
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function AppendEvents(streamId As String, state As StreamState, ParamArray events As Object()) As Task
  overload: MicroPlumberd.IPlumber.AppendEvents*
  nameWithType.vb: IPlumber.AppendEvents(String, StreamState, ParamArray Object())
  fullName.vb: MicroPlumberd.IPlumber.AppendEvents(String, EventStore.Client.StreamState, ParamArray Object())
  name.vb: AppendEvents(String, StreamState, ParamArray Object())
- uid: MicroPlumberd.IPlumber.SubscribeSet
  commentId: M:MicroPlumberd.IPlumber.SubscribeSet
  id: SubscribeSet
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeSet()
  nameWithType: IPlumber.SubscribeSet()
  fullName: MicroPlumberd.IPlumber.SubscribeSet()
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeSet
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 29
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: ISubscriptionSet SubscribeSet()
    return:
      type: MicroPlumberd.ISubscriptionSet
    content.vb: Function SubscribeSet() As ISubscriptionSet
  overload: MicroPlumberd.IPlumber.SubscribeSet*
- uid: MicroPlumberd.IPlumber.Subscribe(System.String,EventStore.Client.FromStream,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Subscribe(System.String,EventStore.Client.FromStream,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  id: Subscribe(System.String,EventStore.Client.FromStream,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Subscribe(string, FromStream, UserCredentials?, CancellationToken)
  nameWithType: IPlumber.Subscribe(string, FromStream, UserCredentials?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Subscribe(string, EventStore.Client.FromStream, EventStore.Client.UserCredentials?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Subscribe
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 30
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: ISubscriptionRunner Subscribe(string streamName, FromStream start, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default)
    parameters:
    - id: streamName
      type: System.String
    - id: start
      type: EventStore.Client.FromStream
    - id: userCredentials
      type: EventStore.Client.UserCredentials
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: MicroPlumberd.ISubscriptionRunner
    content.vb: Function Subscribe(streamName As String, start As FromStream, userCredentials As UserCredentials = Nothing, cancellationToken As CancellationToken = Nothing) As ISubscriptionRunner
  overload: MicroPlumberd.IPlumber.Subscribe*
  nameWithType.vb: IPlumber.Subscribe(String, FromStream, UserCredentials, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Subscribe(String, EventStore.Client.FromStream, EventStore.Client.UserCredentials, System.Threading.CancellationToken)
  name.vb: Subscribe(String, FromStream, UserCredentials, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribeModel``1(``0,System.Nullable{EventStore.Client.FromStream})
  commentId: M:MicroPlumberd.IPlumber.SubscribeModel``1(``0,System.Nullable{EventStore.Client.FromStream})
  id: SubscribeModel``1(``0,System.Nullable{EventStore.Client.FromStream})
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeModel<TModel>(TModel, FromStream?)
  nameWithType: IPlumber.SubscribeModel<TModel>(TModel, FromStream?)
  fullName: MicroPlumberd.IPlumber.SubscribeModel<TModel>(TModel, EventStore.Client.FromStream?)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeModel
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 32
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeModel<TModel>(TModel model, FromStream? start = null) where TModel : IReadModel, ITypeRegister'
    parameters:
    - id: model
      type: '{TModel}'
    - id: start
      type: System.Nullable{EventStore.Client.FromStream}
    typeParameters:
    - id: TModel
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
    content.vb: Function SubscribeModel(Of TModel As {IReadModel, ITypeRegister})(model As TModel, start As FromStream? = Nothing) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeModel*
  nameWithType.vb: IPlumber.SubscribeModel(Of TModel)(TModel, FromStream?)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeModel(Of TModel)(TModel, EventStore.Client.FromStream?)
  name.vb: SubscribeModel(Of TModel)(TModel, FromStream?)
- uid: MicroPlumberd.IPlumber.SubscribeModelPersistently``1(``0)
  commentId: M:MicroPlumberd.IPlumber.SubscribeModelPersistently``1(``0)
  id: SubscribeModelPersistently``1(``0)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeModelPersistently<TModel>(TModel)
  nameWithType: IPlumber.SubscribeModelPersistently<TModel>(TModel)
  fullName: MicroPlumberd.IPlumber.SubscribeModelPersistently<TModel>(TModel)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeModelPersistently
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 34
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeModelPersistently<TModel>(TModel model) where TModel : IReadModel, ITypeRegister'
    parameters:
    - id: model
      type: '{TModel}'
    typeParameters:
    - id: TModel
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
    content.vb: Function SubscribeModelPersistently(Of TModel As {IReadModel, ITypeRegister})(model As TModel) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeModelPersistently*
  nameWithType.vb: IPlumber.SubscribeModelPersistently(Of TModel)(TModel)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeModelPersistently(Of TModel)(TModel)
  name.vb: SubscribeModelPersistently(Of TModel)(TModel)
- uid: MicroPlumberd.IPlumber.SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  id: SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribePersistently(string, string, int, UserCredentials?, CancellationToken)
  nameWithType: IPlumber.SubscribePersistently(string, string, int, UserCredentials?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SubscribePersistently(string, string, int, EventStore.Client.UserCredentials?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribePersistently
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 36
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: ISubscriptionRunner SubscribePersistently(string streamName, string groupName, int bufferSize = 10, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default)
    parameters:
    - id: streamName
      type: System.String
    - id: groupName
      type: System.String
    - id: bufferSize
      type: System.Int32
    - id: userCredentials
      type: EventStore.Client.UserCredentials
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: MicroPlumberd.ISubscriptionRunner
    content.vb: Function SubscribePersistently(streamName As String, groupName As String, bufferSize As Integer = 10, userCredentials As UserCredentials = Nothing, cancellationToken As CancellationToken = Nothing) As ISubscriptionRunner
  overload: MicroPlumberd.IPlumber.SubscribePersistently*
  nameWithType.vb: IPlumber.SubscribePersistently(String, String, Integer, UserCredentials, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SubscribePersistently(String, String, Integer, EventStore.Client.UserCredentials, System.Threading.CancellationToken)
  name.vb: SubscribePersistently(String, String, Integer, UserCredentials, CancellationToken)
- uid: MicroPlumberd.IPlumber.Get``1(System.Guid)
  commentId: M:MicroPlumberd.IPlumber.Get``1(System.Guid)
  id: Get``1(System.Guid)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Get<T>(Guid)
  nameWithType: IPlumber.Get<T>(Guid)
  fullName: MicroPlumberd.IPlumber.Get<T>(System.Guid)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Get
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 38
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<T> Get<T>(Guid id) where T : IAggregate<T>, ITypeRegister'
    parameters:
    - id: id
      type: System.Guid
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function [Get](Of T As {IAggregate(Of T), ITypeRegister})(id As Guid) As Task(Of T)
  overload: MicroPlumberd.IPlumber.Get*
  nameWithType.vb: IPlumber.Get(Of T)(Guid)
  fullName.vb: MicroPlumberd.IPlumber.Get(Of T)(System.Guid)
  name.vb: Get(Of T)(Guid)
- uid: MicroPlumberd.IPlumber.SaveChanges``1(``0,System.Object)
  commentId: M:MicroPlumberd.IPlumber.SaveChanges``1(``0,System.Object)
  id: SaveChanges``1(``0,System.Object)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SaveChanges<T>(T, object?)
  nameWithType: IPlumber.SaveChanges<T>(T, object?)
  fullName: MicroPlumberd.IPlumber.SaveChanges<T>(T, object?)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SaveChanges
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 39
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task SaveChanges<T>(T aggregate, object? metadata = null) where T : IAggregate<T>'
    parameters:
    - id: aggregate
      type: '{T}'
    - id: metadata
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SaveChanges(Of T As IAggregate(Of T))(aggregate As T, metadata As Object = Nothing) As Task
  overload: MicroPlumberd.IPlumber.SaveChanges*
  nameWithType.vb: IPlumber.SaveChanges(Of T)(T, Object)
  fullName.vb: MicroPlumberd.IPlumber.SaveChanges(Of T)(T, Object)
  name.vb: SaveChanges(Of T)(T, Object)
- uid: MicroPlumberd.IPlumber.SaveNew``1(``0,System.Object)
  commentId: M:MicroPlumberd.IPlumber.SaveNew``1(``0,System.Object)
  id: SaveNew``1(``0,System.Object)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SaveNew<T>(T, object?)
  nameWithType: IPlumber.SaveNew<T>(T, object?)
  fullName: MicroPlumberd.IPlumber.SaveNew<T>(T, object?)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SaveNew
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 40
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task SaveNew<T>(T aggregate, object? metadata = null) where T : IAggregate<T>'
    parameters:
    - id: aggregate
      type: '{T}'
    - id: metadata
      type: System.Object
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task
    content.vb: Function SaveNew(Of T As IAggregate(Of T))(aggregate As T, metadata As Object = Nothing) As Task
  overload: MicroPlumberd.IPlumber.SaveNew*
  nameWithType.vb: IPlumber.SaveNew(Of T)(T, Object)
  fullName.vb: MicroPlumberd.IPlumber.SaveNew(Of T)(T, Object)
  name.vb: SaveNew(Of T)(T, Object)
references:
- uid: MicroPlumberd
  commentId: N:MicroPlumberd
  href: MicroPlumberd.html
  name: MicroPlumberd
  nameWithType: MicroPlumberd
  fullName: MicroPlumberd
- uid: MicroPlumberd.IPlumber.AppendEvents*
  commentId: Overload:MicroPlumberd.IPlumber.AppendEvents
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_AppendEvents_System_String_EventStore_Client_StreamRevision_System_Collections_Generic_IEnumerable_System_Object__System_Object_
  name: AppendEvents
  nameWithType: IPlumber.AppendEvents
  fullName: MicroPlumberd.IPlumber.AppendEvents
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: EventStore.Client.StreamRevision
  commentId: T:EventStore.Client.StreamRevision
  parent: EventStore.Client
  isExternal: true
  name: StreamRevision
  nameWithType: StreamRevision
  fullName: EventStore.Client.StreamRevision
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<object>
  nameWithType: IEnumerable<object>
  fullName: System.Collections.Generic.IEnumerable<object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: EventStore.Client
  commentId: N:EventStore.Client
  isExternal: true
  name: EventStore.Client
  nameWithType: EventStore.Client
  fullName: EventStore.Client
  spec.csharp:
  - uid: EventStore
    name: EventStore
    isExternal: true
  - name: .
  - uid: EventStore.Client
    name: Client
    isExternal: true
  spec.vb:
  - uid: EventStore
    name: EventStore
    isExternal: true
  - name: .
  - uid: EventStore.Client
    name: Client
    isExternal: true
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: EventStore.Client.StreamState
  commentId: T:EventStore.Client.StreamState
  parent: EventStore.Client
  isExternal: true
  name: StreamState
  nameWithType: StreamState
  fullName: EventStore.Client.StreamState
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: MicroPlumberd.IPlumber.SubscribeSet*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribeSet
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribeSet
  name: SubscribeSet
  nameWithType: IPlumber.SubscribeSet
  fullName: MicroPlumberd.IPlumber.SubscribeSet
- uid: MicroPlumberd.ISubscriptionSet
  commentId: T:MicroPlumberd.ISubscriptionSet
  parent: MicroPlumberd
  href: MicroPlumberd.ISubscriptionSet.html
  name: ISubscriptionSet
  nameWithType: ISubscriptionSet
  fullName: MicroPlumberd.ISubscriptionSet
- uid: MicroPlumberd.IPlumber.Subscribe*
  commentId: Overload:MicroPlumberd.IPlumber.Subscribe
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Subscribe_System_String_EventStore_Client_FromStream_EventStore_Client_UserCredentials_System_Threading_CancellationToken_
  name: Subscribe
  nameWithType: IPlumber.Subscribe
  fullName: MicroPlumberd.IPlumber.Subscribe
- uid: EventStore.Client.FromStream
  commentId: T:EventStore.Client.FromStream
  parent: EventStore.Client
  isExternal: true
  name: FromStream
  nameWithType: FromStream
  fullName: EventStore.Client.FromStream
- uid: EventStore.Client.UserCredentials
  commentId: T:EventStore.Client.UserCredentials
  parent: EventStore.Client
  isExternal: true
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.Client.UserCredentials
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: MicroPlumberd.ISubscriptionRunner
  commentId: T:MicroPlumberd.ISubscriptionRunner
  parent: MicroPlumberd
  href: MicroPlumberd.ISubscriptionRunner.html
  name: ISubscriptionRunner
  nameWithType: ISubscriptionRunner
  fullName: MicroPlumberd.ISubscriptionRunner
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: MicroPlumberd.IPlumber.SubscribeModel*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribeModel
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribeModel__1___0_System_Nullable_EventStore_Client_FromStream__
  name: SubscribeModel
  nameWithType: IPlumber.SubscribeModel
  fullName: MicroPlumberd.IPlumber.SubscribeModel
- uid: '{TModel}'
  commentId: '!:TModel'
  definition: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: System.Nullable{EventStore.Client.FromStream}
  commentId: T:System.Nullable{EventStore.Client.FromStream}
  parent: System
  definition: System.Nullable`1
  name: FromStream?
  nameWithType: FromStream?
  fullName: EventStore.Client.FromStream?
  spec.csharp:
  - uid: EventStore.Client.FromStream
    name: FromStream
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: EventStore.Client.FromStream
    name: FromStream
    isExternal: true
  - name: '?'
- uid: System.Threading.Tasks.Task{System.IAsyncDisposable}
  commentId: T:System.Threading.Tasks.Task{System.IAsyncDisposable}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IAsyncDisposable>
  nameWithType: Task<IAsyncDisposable>
  fullName: System.Threading.Tasks.Task<System.IAsyncDisposable>
  nameWithType.vb: Task(Of IAsyncDisposable)
  fullName.vb: System.Threading.Tasks.Task(Of System.IAsyncDisposable)
  name.vb: Task(Of IAsyncDisposable)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.IAsyncDisposable
    name: IAsyncDisposable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IAsyncDisposable
    name: IAsyncDisposable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  - name: )
- uid: TModel
  name: TModel
  nameWithType: TModel
  fullName: TModel
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: MicroPlumberd.IPlumber.SubscribeModelPersistently*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribeModelPersistently
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribeModelPersistently__1___0_
  name: SubscribeModelPersistently
  nameWithType: IPlumber.SubscribeModelPersistently
  fullName: MicroPlumberd.IPlumber.SubscribeModelPersistently
- uid: MicroPlumberd.IPlumber.SubscribePersistently*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribePersistently
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribePersistently_System_String_System_String_System_Int32_EventStore_Client_UserCredentials_System_Threading_CancellationToken_
  name: SubscribePersistently
  nameWithType: IPlumber.SubscribePersistently
  fullName: MicroPlumberd.IPlumber.SubscribePersistently
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MicroPlumberd.IPlumber.Get*
  commentId: Overload:MicroPlumberd.IPlumber.Get
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Get__1_System_Guid_
  name: Get
  nameWithType: IPlumber.Get
  fullName: MicroPlumberd.IPlumber.Get
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MicroPlumberd.IPlumber.SaveChanges*
  commentId: Overload:MicroPlumberd.IPlumber.SaveChanges
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SaveChanges__1___0_System_Object_
  name: SaveChanges
  nameWithType: IPlumber.SaveChanges
  fullName: MicroPlumberd.IPlumber.SaveChanges
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MicroPlumberd.IPlumber.SaveNew*
  commentId: Overload:MicroPlumberd.IPlumber.SaveNew
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SaveNew__1___0_System_Object_
  name: SaveNew
  nameWithType: IPlumber.SaveNew
  fullName: MicroPlumberd.IPlumber.SaveNew
