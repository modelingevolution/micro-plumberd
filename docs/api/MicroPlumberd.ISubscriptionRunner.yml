### YamlMime:ManagedReference
items:
- uid: MicroPlumberd.ISubscriptionRunner
  commentId: T:MicroPlumberd.ISubscriptionRunner
  id: ISubscriptionRunner
  parent: MicroPlumberd
  children:
  - MicroPlumberd.ISubscriptionRunner.WithHandler``1
  - MicroPlumberd.ISubscriptionRunner.WithHandler``1(MicroPlumberd.ITypeHandlerRegisters)
  - MicroPlumberd.ISubscriptionRunner.WithHandler``1(MicroPlumberd.TypeEventConverter)
  - MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0)
  - MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0,MicroPlumberd.ITypeHandlerRegisters)
  - MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0,MicroPlumberd.TypeEventConverter)
  - MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler``1
  - MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler``1(``0)
  langs:
  - csharp
  - vb
  name: ISubscriptionRunner
  nameWithType: ISubscriptionRunner
  fullName: MicroPlumberd.ISubscriptionRunner
  type: Interface
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: ISubscriptionRunner
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 2
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'public interface ISubscriptionRunner : IAsyncDisposable'
    content.vb: Public Interface ISubscriptionRunner Inherits IAsyncDisposable
  inheritedMembers:
  - System.IAsyncDisposable.DisposeAsync
- uid: MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0)
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0)
  id: WithHandler``1(``0)
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithHandler<T>(T)
  nameWithType: ISubscriptionRunner.WithHandler<T>(T)
  fullName: MicroPlumberd.ISubscriptionRunner.WithHandler<T>(T)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 4
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<T> WithHandler<T>(T model) where T : IEventHandler, ITypeRegister'
    parameters:
    - id: model
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function WithHandler(Of T As {IEventHandler, ITypeRegister})(model As T) As Task(Of T)
  overload: MicroPlumberd.ISubscriptionRunner.WithHandler*
  nameWithType.vb: ISubscriptionRunner.WithHandler(Of T)(T)
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithHandler(Of T)(T)
  name.vb: WithHandler(Of T)(T)
- uid: MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0,MicroPlumberd.TypeEventConverter)
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0,MicroPlumberd.TypeEventConverter)
  id: WithHandler``1(``0,MicroPlumberd.TypeEventConverter)
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithHandler<T>(T, TypeEventConverter)
  nameWithType: ISubscriptionRunner.WithHandler<T>(T, TypeEventConverter)
  fullName: MicroPlumberd.ISubscriptionRunner.WithHandler<T>(T, MicroPlumberd.TypeEventConverter)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 5
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<T> WithHandler<T>(T model, TypeEventConverter mapFunc) where T : IEventHandler'
    parameters:
    - id: model
      type: '{T}'
    - id: mapFunc
      type: MicroPlumberd.TypeEventConverter
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Function WithHandler(Of T As IEventHandler)(model As T, mapFunc As TypeEventConverter) As Task(Of T)
  overload: MicroPlumberd.ISubscriptionRunner.WithHandler*
  nameWithType.vb: ISubscriptionRunner.WithHandler(Of T)(T, TypeEventConverter)
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithHandler(Of T)(T, MicroPlumberd.TypeEventConverter)
  name.vb: WithHandler(Of T)(T, TypeEventConverter)
- uid: MicroPlumberd.ISubscriptionRunner.WithHandler``1
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithHandler``1
  id: WithHandler``1
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithHandler<T>()
  nameWithType: ISubscriptionRunner.WithHandler<T>()
  fullName: MicroPlumberd.ISubscriptionRunner.WithHandler<T>()
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 6
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IEventHandler> WithHandler<T>() where T : IEventHandler, ITypeRegister'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
    content.vb: Function WithHandler(Of T As {IEventHandler, ITypeRegister})() As Task(Of IEventHandler)
  overload: MicroPlumberd.ISubscriptionRunner.WithHandler*
  nameWithType.vb: ISubscriptionRunner.WithHandler(Of T)()
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithHandler(Of T)()
  name.vb: WithHandler(Of T)()
- uid: MicroPlumberd.ISubscriptionRunner.WithHandler``1(MicroPlumberd.TypeEventConverter)
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithHandler``1(MicroPlumberd.TypeEventConverter)
  id: WithHandler``1(MicroPlumberd.TypeEventConverter)
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithHandler<T>(TypeEventConverter)
  nameWithType: ISubscriptionRunner.WithHandler<T>(TypeEventConverter)
  fullName: MicroPlumberd.ISubscriptionRunner.WithHandler<T>(MicroPlumberd.TypeEventConverter)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 7
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IEventHandler> WithHandler<T>(TypeEventConverter mapFunc) where T : IEventHandler'
    parameters:
    - id: mapFunc
      type: MicroPlumberd.TypeEventConverter
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
    content.vb: Function WithHandler(Of T As IEventHandler)(mapFunc As TypeEventConverter) As Task(Of IEventHandler)
  overload: MicroPlumberd.ISubscriptionRunner.WithHandler*
  nameWithType.vb: ISubscriptionRunner.WithHandler(Of T)(TypeEventConverter)
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithHandler(Of T)(MicroPlumberd.TypeEventConverter)
  name.vb: WithHandler(Of T)(TypeEventConverter)
- uid: MicroPlumberd.ISubscriptionRunner.WithHandler``1(MicroPlumberd.ITypeHandlerRegisters)
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithHandler``1(MicroPlumberd.ITypeHandlerRegisters)
  id: WithHandler``1(MicroPlumberd.ITypeHandlerRegisters)
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithHandler<T>(ITypeHandlerRegisters)
  nameWithType: ISubscriptionRunner.WithHandler<T>(ITypeHandlerRegisters)
  fullName: MicroPlumberd.ISubscriptionRunner.WithHandler<T>(MicroPlumberd.ITypeHandlerRegisters)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 8
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IEventHandler> WithHandler<T>(ITypeHandlerRegisters register) where T : IEventHandler, ITypeRegister'
    parameters:
    - id: register
      type: MicroPlumberd.ITypeHandlerRegisters
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
    content.vb: Function WithHandler(Of T As {IEventHandler, ITypeRegister})(register As ITypeHandlerRegisters) As Task(Of IEventHandler)
  overload: MicroPlumberd.ISubscriptionRunner.WithHandler*
  nameWithType.vb: ISubscriptionRunner.WithHandler(Of T)(ITypeHandlerRegisters)
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithHandler(Of T)(MicroPlumberd.ITypeHandlerRegisters)
  name.vb: WithHandler(Of T)(ITypeHandlerRegisters)
- uid: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler``1
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler``1
  id: WithSnapshotHandler``1
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithSnapshotHandler<T>()
  nameWithType: ISubscriptionRunner.WithSnapshotHandler<T>()
  fullName: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler<T>()
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithSnapshotHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 9
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IEventHandler> WithSnapshotHandler<T>() where T : IEventHandler, ITypeRegister'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
    content.vb: Function WithSnapshotHandler(Of T As {IEventHandler, ITypeRegister})() As Task(Of IEventHandler)
  overload: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler*
  nameWithType.vb: ISubscriptionRunner.WithSnapshotHandler(Of T)()
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler(Of T)()
  name.vb: WithSnapshotHandler(Of T)()
- uid: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler``1(``0)
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler``1(``0)
  id: WithSnapshotHandler``1(``0)
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithSnapshotHandler<T>(T)
  nameWithType: ISubscriptionRunner.WithSnapshotHandler<T>(T)
  fullName: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler<T>(T)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithSnapshotHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 10
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IEventHandler> WithSnapshotHandler<T>(T model) where T : IEventHandler, ITypeRegister'
    parameters:
    - id: model
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
    content.vb: Function WithSnapshotHandler(Of T As {IEventHandler, ITypeRegister})(model As T) As Task(Of IEventHandler)
  overload: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler*
  nameWithType.vb: ISubscriptionRunner.WithSnapshotHandler(Of T)(T)
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler(Of T)(T)
  name.vb: WithSnapshotHandler(Of T)(T)
- uid: MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0,MicroPlumberd.ITypeHandlerRegisters)
  commentId: M:MicroPlumberd.ISubscriptionRunner.WithHandler``1(``0,MicroPlumberd.ITypeHandlerRegisters)
  id: WithHandler``1(``0,MicroPlumberd.ITypeHandlerRegisters)
  parent: MicroPlumberd.ISubscriptionRunner
  langs:
  - csharp
  - vb
  name: WithHandler<T>(T, ITypeHandlerRegisters)
  nameWithType: ISubscriptionRunner.WithHandler<T>(T, ITypeHandlerRegisters)
  fullName: MicroPlumberd.ISubscriptionRunner.WithHandler<T>(T, MicroPlumberd.ITypeHandlerRegisters)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: WithHandler
    path: src/MicroPlumberd/Abstractions/ISubscriptionRunner.cs
    startLine: 11
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IEventHandler> WithHandler<T>(T model, ITypeHandlerRegisters register) where T : IEventHandler, ITypeRegister'
    parameters:
    - id: model
      type: '{T}'
    - id: register
      type: MicroPlumberd.ITypeHandlerRegisters
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
    content.vb: Function WithHandler(Of T As {IEventHandler, ITypeRegister})(model As T, register As ITypeHandlerRegisters) As Task(Of IEventHandler)
  overload: MicroPlumberd.ISubscriptionRunner.WithHandler*
  nameWithType.vb: ISubscriptionRunner.WithHandler(Of T)(T, ITypeHandlerRegisters)
  fullName.vb: MicroPlumberd.ISubscriptionRunner.WithHandler(Of T)(T, MicroPlumberd.ITypeHandlerRegisters)
  name.vb: WithHandler(Of T)(T, ITypeHandlerRegisters)
references:
- uid: MicroPlumberd
  commentId: N:MicroPlumberd
  href: MicroPlumberd.html
  name: MicroPlumberd
  nameWithType: MicroPlumberd
  fullName: MicroPlumberd
- uid: System.IAsyncDisposable.DisposeAsync
  commentId: M:System.IAsyncDisposable.DisposeAsync
  parent: System.IAsyncDisposable
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  name: DisposeAsync()
  nameWithType: IAsyncDisposable.DisposeAsync()
  fullName: System.IAsyncDisposable.DisposeAsync()
  spec.csharp:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
  spec.vb:
  - uid: System.IAsyncDisposable.DisposeAsync
    name: DisposeAsync
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable.disposeasync
  - name: (
  - name: )
- uid: System.IAsyncDisposable
  commentId: T:System.IAsyncDisposable
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  name: IAsyncDisposable
  nameWithType: IAsyncDisposable
  fullName: System.IAsyncDisposable
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: MicroPlumberd.ISubscriptionRunner.WithHandler*
  commentId: Overload:MicroPlumberd.ISubscriptionRunner.WithHandler
  href: MicroPlumberd.ISubscriptionRunner.html#MicroPlumberd_ISubscriptionRunner_WithHandler__1___0_
  name: WithHandler
  nameWithType: ISubscriptionRunner.WithHandler
  fullName: MicroPlumberd.ISubscriptionRunner.WithHandler
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MicroPlumberd.TypeEventConverter
  commentId: T:MicroPlumberd.TypeEventConverter
  parent: MicroPlumberd
  href: MicroPlumberd.TypeEventConverter.html
  name: TypeEventConverter
  nameWithType: TypeEventConverter
  fullName: MicroPlumberd.TypeEventConverter
- uid: System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
  commentId: T:System.Threading.Tasks.Task{MicroPlumberd.IEventHandler}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEventHandler>
  nameWithType: Task<IEventHandler>
  fullName: System.Threading.Tasks.Task<MicroPlumberd.IEventHandler>
  nameWithType.vb: Task(Of IEventHandler)
  fullName.vb: System.Threading.Tasks.Task(Of MicroPlumberd.IEventHandler)
  name.vb: Task(Of IEventHandler)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MicroPlumberd.IEventHandler
    name: IEventHandler
    href: MicroPlumberd.IEventHandler.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MicroPlumberd.IEventHandler
    name: IEventHandler
    href: MicroPlumberd.IEventHandler.html
  - name: )
- uid: MicroPlumberd.ITypeHandlerRegisters
  commentId: T:MicroPlumberd.ITypeHandlerRegisters
  parent: MicroPlumberd
  href: MicroPlumberd.ITypeHandlerRegisters.html
  name: ITypeHandlerRegisters
  nameWithType: ITypeHandlerRegisters
  fullName: MicroPlumberd.ITypeHandlerRegisters
- uid: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler*
  commentId: Overload:MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler
  href: MicroPlumberd.ISubscriptionRunner.html#MicroPlumberd_ISubscriptionRunner_WithSnapshotHandler__1
  name: WithSnapshotHandler
  nameWithType: ISubscriptionRunner.WithSnapshotHandler
  fullName: MicroPlumberd.ISubscriptionRunner.WithSnapshotHandler
