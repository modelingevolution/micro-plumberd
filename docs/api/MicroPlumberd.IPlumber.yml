### YamlMime:ManagedReference
items:
- uid: MicroPlumberd.IPlumber
  commentId: T:MicroPlumberd.IPlumber
  id: IPlumber
  parent: MicroPlumberd
  children:
  - MicroPlumberd.IPlumber.AppendEvent(System.Object,System.Object,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendEventToStream(System.String,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Object,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  - MicroPlumberd.IPlumber.AppendLink(System.String,MicroPlumberd.Metadata,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendLink(System.String,System.UInt64,System.String,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendSnapshot(System.Object,System.Object,System.Int64,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendState(System.Object,System.Object,System.Nullable{System.Int64},System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.AppendState``1(``0,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.Client
  - MicroPlumberd.IPlumber.Config
  - MicroPlumberd.IPlumber.FindEventInStream(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.FindEventInStream``1(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.GetSnapshot(System.Object,System.Type,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.GetSnapshot``1(System.Guid,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.GetState``1(System.Object,System.String,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.Get``1(System.Object,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.PersistentSubscriptionClient
  - MicroPlumberd.IPlumber.ProjectionManagementClient
  - MicroPlumberd.IPlumber.ProjectionRegister
  - MicroPlumberd.IPlumber.Read(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.ReadEventsOfType``1(System.String,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.ReadFull(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.Read``1(System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.Read``1(System.Object,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.Rehydrate``1(``0,System.Guid,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.Rehydrate``1(``0,System.String,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SaveChanges``1(``0,System.Object,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SaveNew``1(``0,System.Object,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.Subscribe(System.String,MicroPlumberd.FromRelativeStreamPosition,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently``1(``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribeEventHandler``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{EventStore.Client.FromStream},System.Boolean)
  - MicroPlumberd.IPlumber.SubscribeEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribeSet
  - MicroPlumberd.IPlumber.SubscribeStateEventHandler``1(System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.SubscribeStateEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  - MicroPlumberd.IPlumber.TypeHandlerRegisters
  langs:
  - csharp
  - vb
  name: IPlumber
  nameWithType: IPlumber
  fullName: MicroPlumberd.IPlumber
  type: Interface
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: IPlumber
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 70
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Root interface for plumberd
  example: []
  syntax:
    content: public interface IPlumber
    content.vb: Public Interface IPlumber
- uid: MicroPlumberd.IPlumber.Config
  commentId: P:MicroPlumberd.IPlumber.Config
  id: Config
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Config
  nameWithType: IPlumber.Config
  fullName: MicroPlumberd.IPlumber.Config
  type: Property
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Config
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 75
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Plubers configuration.
  example: []
  syntax:
    content: IPlumberReadOnlyConfig Config { get; }
    parameters: []
    return:
      type: MicroPlumberd.IPlumberReadOnlyConfig
    content.vb: ReadOnly Property Config As IPlumberReadOnlyConfig
  overload: MicroPlumberd.IPlumber.Config*
- uid: MicroPlumberd.IPlumber.Client
  commentId: P:MicroPlumberd.IPlumber.Client
  id: Client
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Client
  nameWithType: IPlumber.Client
  fullName: MicroPlumberd.IPlumber.Client
  type: Property
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Client
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 80
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: EventStore's client
  example: []
  syntax:
    content: EventStoreClient Client { get; }
    parameters: []
    return:
      type: EventStore.Client.EventStoreClient
    content.vb: ReadOnly Property Client As EventStoreClient
  overload: MicroPlumberd.IPlumber.Client*
- uid: MicroPlumberd.IPlumber.PersistentSubscriptionClient
  commentId: P:MicroPlumberd.IPlumber.PersistentSubscriptionClient
  id: PersistentSubscriptionClient
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: PersistentSubscriptionClient
  nameWithType: IPlumber.PersistentSubscriptionClient
  fullName: MicroPlumberd.IPlumber.PersistentSubscriptionClient
  type: Property
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: PersistentSubscriptionClient
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 84
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: EventStore's persistent subsctiption client
  example: []
  syntax:
    content: EventStorePersistentSubscriptionsClient PersistentSubscriptionClient { get; }
    parameters: []
    return:
      type: EventStore.Client.EventStorePersistentSubscriptionsClient
    content.vb: ReadOnly Property PersistentSubscriptionClient As EventStorePersistentSubscriptionsClient
  overload: MicroPlumberd.IPlumber.PersistentSubscriptionClient*
- uid: MicroPlumberd.IPlumber.ProjectionManagementClient
  commentId: P:MicroPlumberd.IPlumber.ProjectionManagementClient
  id: ProjectionManagementClient
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: ProjectionManagementClient
  nameWithType: IPlumber.ProjectionManagementClient
  fullName: MicroPlumberd.IPlumber.ProjectionManagementClient
  type: Property
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: ProjectionManagementClient
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 88
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: EventStore's projection managemenet client
  example: []
  syntax:
    content: EventStoreProjectionManagementClient ProjectionManagementClient { get; }
    parameters: []
    return:
      type: EventStore.Client.EventStoreProjectionManagementClient
    content.vb: ReadOnly Property ProjectionManagementClient As EventStoreProjectionManagementClient
  overload: MicroPlumberd.IPlumber.ProjectionManagementClient*
- uid: MicroPlumberd.IPlumber.ProjectionRegister
  commentId: P:MicroPlumberd.IPlumber.ProjectionRegister
  id: ProjectionRegister
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: ProjectionRegister
  nameWithType: IPlumber.ProjectionRegister
  fullName: MicroPlumberd.IPlumber.ProjectionRegister
  type: Property
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: ProjectionRegister
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 92
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Projection's register, responsible for caching information about projection from EventStore.
  example: []
  syntax:
    content: IProjectionRegister ProjectionRegister { get; }
    parameters: []
    return:
      type: MicroPlumberd.IProjectionRegister
    content.vb: ReadOnly Property ProjectionRegister As IProjectionRegister
  overload: MicroPlumberd.IPlumber.ProjectionRegister*
- uid: MicroPlumberd.IPlumber.TypeHandlerRegisters
  commentId: P:MicroPlumberd.IPlumber.TypeHandlerRegisters
  id: TypeHandlerRegisters
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: TypeHandlerRegisters
  nameWithType: IPlumber.TypeHandlerRegisters
  fullName: MicroPlumberd.IPlumber.TypeHandlerRegisters
  type: Property
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: TypeHandlerRegisters
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 96
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Metadata information about registered event-handlers.
  example: []
  syntax:
    content: ITypeHandlerRegisters TypeHandlerRegisters { get; }
    parameters: []
    return:
      type: MicroPlumberd.ITypeHandlerRegisters
    content.vb: ReadOnly Property TypeHandlerRegisters As ITypeHandlerRegisters
  overload: MicroPlumberd.IPlumber.TypeHandlerRegisters*
- uid: MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  id: AppendEvents(System.String,EventStore.Client.StreamRevision,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEvents(string, StreamRevision, IEnumerable<object>, object?, CancellationToken)
  nameWithType: IPlumber.AppendEvents(string, StreamRevision, IEnumerable<object>, object?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendEvents(string, EventStore.Client.StreamRevision, System.Collections.Generic.IEnumerable<object>, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEvents
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 107
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends event to a stream, uses relevant convention to create metadata.
  example: []
  syntax:
    content: Task<IWriteResult> AppendEvents(string streamId, StreamRevision rev, IEnumerable<object> events, object? metadata = null, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: Full stream id, typically in format {category}-{id}
    - id: rev
      type: EventStore.Client.StreamRevision
      description: Expected stream revision
    - id: events
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: Events that are going to be serialized and appended
    - id: metadata
      type: System.Object
      description: Metadata that will be merged with metadata created from conventions
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendEvents(streamId As String, rev As StreamRevision, events As IEnumerable(Of Object), metadata As Object = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendEvents*
  nameWithType.vb: IPlumber.AppendEvents(String, StreamRevision, IEnumerable(Of Object), Object, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendEvents(String, EventStore.Client.StreamRevision, System.Collections.Generic.IEnumerable(Of Object), Object, System.Threading.CancellationToken)
  name.vb: AppendEvents(String, StreamRevision, IEnumerable(Of Object), Object, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendEventToStream(System.String,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Object,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendEventToStream(System.String,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Object,System.Threading.CancellationToken)
  id: AppendEventToStream(System.String,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Object,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEventToStream(string, object, StreamState?, string?, object?, CancellationToken)
  nameWithType: IPlumber.AppendEventToStream(string, object, StreamState?, string?, object?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendEventToStream(string, object, EventStore.Client.StreamState?, string?, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEventToStream
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 119
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends event to a stream, uses relevant convention to create metadata.
  example: []
  syntax:
    content: Task<IWriteResult> AppendEventToStream(string streamId, object evt, StreamState? state = null, string? evtName = null, object? metadata = null, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: "Full name of streamId for example: 'TicketBooked-b27f9322-7d73-4d98-a605-a731a2c373c6'"
    - id: evt
      type: System.Object
      description: Event object
    - id: state
      type: System.Nullable{EventStore.Client.StreamState}
      description: Expected state of the stream
    - id: evtName
      type: System.String
      description: Name of the event
    - id: metadata
      type: System.Object
      description: Additional metadata, can be null
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendEventToStream(streamId As String, evt As Object, state As StreamState? = Nothing, evtName As String = Nothing, metadata As Object = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendEventToStream*
  nameWithType.vb: IPlumber.AppendEventToStream(String, Object, StreamState?, String, Object, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendEventToStream(String, Object, EventStore.Client.StreamState?, String, Object, System.Threading.CancellationToken)
  name.vb: AppendEventToStream(String, Object, StreamState?, String, Object, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  id: AppendEvents(System.String,EventStore.Client.StreamState,System.Collections.Generic.IEnumerable{System.Object},System.Object,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEvents(string, StreamState, IEnumerable<object>, object?, CancellationToken)
  nameWithType: IPlumber.AppendEvents(string, StreamState, IEnumerable<object>, object?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendEvents(string, EventStore.Client.StreamState, System.Collections.Generic.IEnumerable<object>, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEvents
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 131
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends event to a stream, uses relevant convention to create metadata.
  example: []
  syntax:
    content: Task<IWriteResult> AppendEvents(string streamId, StreamState state, IEnumerable<object> events, object? metadata = null, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: Full stream id, typically in format {category}-{id}
    - id: state
      type: EventStore.Client.StreamState
      description: State of the stream
    - id: events
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: Events that are going to be serialized and appended
    - id: metadata
      type: System.Object
      description: Metadata that will be merged with metadata created from conventions
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendEvents(streamId As String, state As StreamState, events As IEnumerable(Of Object), metadata As Object = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendEvents*
  nameWithType.vb: IPlumber.AppendEvents(String, StreamState, IEnumerable(Of Object), Object, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendEvents(String, EventStore.Client.StreamState, System.Collections.Generic.IEnumerable(Of Object), Object, System.Threading.CancellationToken)
  name.vb: AppendEvents(String, StreamState, IEnumerable(Of Object), Object, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  commentId: M:MicroPlumberd.IPlumber.AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  id: AppendEvents(System.String,EventStore.Client.StreamState,System.Object[])
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEvents(string, StreamState, params object[])
  nameWithType: IPlumber.AppendEvents(string, StreamState, params object[])
  fullName: MicroPlumberd.IPlumber.AppendEvents(string, EventStore.Client.StreamState, params object[])
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEvents
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 141
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends event to a stream, uses relevant convention to create metadata.
  example: []
  syntax:
    content: Task AppendEvents(string streamId, StreamState state, params object[] events)
    parameters:
    - id: streamId
      type: System.String
      description: "Full name of streamId for example: 'TicketBooked-b27f9322-7d73-4d98-a605-a731a2c373c6'"
    - id: state
      type: EventStore.Client.StreamState
      description: ''
    - id: events
      type: System.Object[]
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function AppendEvents(streamId As String, state As StreamState, ParamArray events As Object()) As Task
  overload: MicroPlumberd.IPlumber.AppendEvents*
  nameWithType.vb: IPlumber.AppendEvents(String, StreamState, ParamArray Object())
  fullName.vb: MicroPlumberd.IPlumber.AppendEvents(String, EventStore.Client.StreamState, ParamArray Object())
  name.vb: AppendEvents(String, StreamState, ParamArray Object())
- uid: MicroPlumberd.IPlumber.FindEventInStream``1(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.FindEventInStream``1(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  id: FindEventInStream``1(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: FindEventInStream<T>(string, Guid, TypeEventConverter, Direction, CancellationToken)
  nameWithType: IPlumber.FindEventInStream<T>(string, Guid, TypeEventConverter, Direction, CancellationToken)
  fullName: MicroPlumberd.IPlumber.FindEventInStream<T>(string, System.Guid, MicroPlumberd.TypeEventConverter, EventStore.Client.Direction, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: FindEventInStream
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 153
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Finds the event in the stream.
  example: []
  syntax:
    content: Task<IEventRecord<T>?> FindEventInStream<T>(string streamId, Guid id, TypeEventConverter eventMapping = null, Direction scanDirection = Direction.Backwards, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: The stream identifier.
    - id: id
      type: System.Guid
      description: The identifier of the event.
    - id: eventMapping
      type: MicroPlumberd.TypeEventConverter
      description: The event mapping.
    - id: scanDirection
      type: EventStore.Client.Direction
      description: The scan direction.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventRecord{{T}}}
      description: ''
    content.vb: Function FindEventInStream(Of T)(streamId As String, id As Guid, eventMapping As TypeEventConverter = Nothing, scanDirection As Direction = Direction.Backwards, token As CancellationToken = Nothing) As Task(Of IEventRecord(Of T))
  overload: MicroPlumberd.IPlumber.FindEventInStream*
  nameWithType.vb: IPlumber.FindEventInStream(Of T)(String, Guid, TypeEventConverter, Direction, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.FindEventInStream(Of T)(String, System.Guid, MicroPlumberd.TypeEventConverter, EventStore.Client.Direction, System.Threading.CancellationToken)
  name.vb: FindEventInStream(Of T)(String, Guid, TypeEventConverter, Direction, CancellationToken)
- uid: MicroPlumberd.IPlumber.FindEventInStream(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.FindEventInStream(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  id: FindEventInStream(System.String,System.Guid,MicroPlumberd.TypeEventConverter,EventStore.Client.Direction,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: FindEventInStream(string, Guid, TypeEventConverter, Direction, CancellationToken)
  nameWithType: IPlumber.FindEventInStream(string, Guid, TypeEventConverter, Direction, CancellationToken)
  fullName: MicroPlumberd.IPlumber.FindEventInStream(string, System.Guid, MicroPlumberd.TypeEventConverter, EventStore.Client.Direction, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: FindEventInStream
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 165
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Finds the event in the stream.
  example: []
  syntax:
    content: Task<IEventRecord?> FindEventInStream(string streamId, Guid id, TypeEventConverter eventMapping, Direction scanDirection = Direction.Backwards, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: The stream identifier.
    - id: id
      type: System.Guid
      description: The identifier of the event.
    - id: eventMapping
      type: MicroPlumberd.TypeEventConverter
      description: The event mapping.
    - id: scanDirection
      type: EventStore.Client.Direction
      description: The scan direction.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.IEventRecord}
      description: ''
    content.vb: Function FindEventInStream(streamId As String, id As Guid, eventMapping As TypeEventConverter, scanDirection As Direction = Direction.Backwards, token As CancellationToken = Nothing) As Task(Of IEventRecord)
  overload: MicroPlumberd.IPlumber.FindEventInStream*
  nameWithType.vb: IPlumber.FindEventInStream(String, Guid, TypeEventConverter, Direction, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.FindEventInStream(String, System.Guid, MicroPlumberd.TypeEventConverter, EventStore.Client.Direction, System.Threading.CancellationToken)
  name.vb: FindEventInStream(String, Guid, TypeEventConverter, Direction, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribeSet
  commentId: M:MicroPlumberd.IPlumber.SubscribeSet
  id: SubscribeSet
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeSet()
  nameWithType: IPlumber.SubscribeSet()
  fullName: MicroPlumberd.IPlumber.SubscribeSet()
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeSet
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 172
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Returns a builder for creating composition of projections subscribed to a stream.
  example: []
  syntax:
    content: ISubscriptionSet SubscribeSet()
    return:
      type: MicroPlumberd.ISubscriptionSet
      description: ''
    content.vb: Function SubscribeSet() As ISubscriptionSet
  overload: MicroPlumberd.IPlumber.SubscribeSet*
- uid: MicroPlumberd.IPlumber.Subscribe(System.String,MicroPlumberd.FromRelativeStreamPosition,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Subscribe(System.String,MicroPlumberd.FromRelativeStreamPosition,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  id: Subscribe(System.String,MicroPlumberd.FromRelativeStreamPosition,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Subscribe(string, FromRelativeStreamPosition, UserCredentials?, CancellationToken)
  nameWithType: IPlumber.Subscribe(string, FromRelativeStreamPosition, UserCredentials?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Subscribe(string, MicroPlumberd.FromRelativeStreamPosition, EventStore.Client.UserCredentials?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Subscribe
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 182
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Subscribes the specified stream name.
  example: []
  syntax:
    content: ISubscriptionRunner Subscribe(string streamName, FromRelativeStreamPosition start, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default)
    parameters:
    - id: streamName
      type: System.String
      description: Name of the stream.
    - id: start
      type: MicroPlumberd.FromRelativeStreamPosition
      description: The start position
    - id: userCredentials
      type: EventStore.Client.UserCredentials
      description: The user credentials.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: MicroPlumberd.ISubscriptionRunner
      description: ''
    content.vb: Function Subscribe(streamName As String, start As FromRelativeStreamPosition, userCredentials As UserCredentials = Nothing, cancellationToken As CancellationToken = Nothing) As ISubscriptionRunner
  overload: MicroPlumberd.IPlumber.Subscribe*
  nameWithType.vb: IPlumber.Subscribe(String, FromRelativeStreamPosition, UserCredentials, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Subscribe(String, MicroPlumberd.FromRelativeStreamPosition, EventStore.Client.UserCredentials, System.Threading.CancellationToken)
  name.vb: Subscribe(String, FromRelativeStreamPosition, UserCredentials, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribeEventHandler``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{EventStore.Client.FromStream},System.Boolean)
  commentId: M:MicroPlumberd.IPlumber.SubscribeEventHandler``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{EventStore.Client.FromStream},System.Boolean)
  id: SubscribeEventHandler``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{EventStore.Client.FromStream},System.Boolean)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeEventHandler<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, FromStream?, bool)
  nameWithType: IPlumber.SubscribeEventHandler<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, FromStream?, bool)
  fullName: MicroPlumberd.IPlumber.SubscribeEventHandler<TEventHandler>(MicroPlumberd.TypeEventConverter, System.Collections.Generic.IEnumerable<string>?, TEventHandler?, string?, EventStore.Client.FromStream?, bool)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeEventHandler
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 196
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: >-
    Subscribes the event handler. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler.

    Then EventHandler subscribe the the output stream.
  example: []
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeEventHandler<TEventHandler>(TypeEventConverter mapFunc, IEnumerable<string>? eventTypes, TEventHandler? eh = null, string? outputStream = null, FromStream? start = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler'
    parameters:
    - id: mapFunc
      type: MicroPlumberd.TypeEventConverter
      description: The map function.
    - id: eventTypes
      type: System.Collections.Generic.IEnumerable{System.String}
      description: Supported event types.
    - id: eh
      type: '{TEventHandler}'
      description: The event-handler
    - id: outputStream
      type: System.String
      description: The output stream.
    - id: start
      type: System.Nullable{EventStore.Client.FromStream}
      description: The start of the stream
    - id: ensureOutputStreamProjection
      type: System.Boolean
      description: if set to <code>true</code> [ensure output stream projection].
    typeParameters:
    - id: TEventHandler
      description: The type of the event handler.
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
      description: ''
    content.vb: Function SubscribeEventHandler(Of TEventHandler As {Class, IEventHandler})(mapFunc As TypeEventConverter, eventTypes As IEnumerable(Of String), eh As TEventHandler = Nothing, outputStream As String = Nothing, start As FromStream? = Nothing, ensureOutputStreamProjection As Boolean = True) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeEventHandler*
  nameWithType.vb: IPlumber.SubscribeEventHandler(Of TEventHandler)(TypeEventConverter, IEnumerable(Of String), TEventHandler, String, FromStream?, Boolean)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeEventHandler(Of TEventHandler)(MicroPlumberd.TypeEventConverter, System.Collections.Generic.IEnumerable(Of String), TEventHandler, String, EventStore.Client.FromStream?, Boolean)
  name.vb: SubscribeEventHandler(Of TEventHandler)(TypeEventConverter, IEnumerable(Of String), TEventHandler, String, FromStream?, Boolean)
- uid: MicroPlumberd.IPlumber.SubscribeEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SubscribeEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  id: SubscribeEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeEventHandler<TEventHandler>(TEventHandler?, string?, FromRelativeStreamPosition?, bool, CancellationToken)
  nameWithType: IPlumber.SubscribeEventHandler<TEventHandler>(TEventHandler?, string?, FromRelativeStreamPosition?, bool, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SubscribeEventHandler<TEventHandler>(TEventHandler?, string?, MicroPlumberd.FromRelativeStreamPosition?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeEventHandler
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 215
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: >-
    Subscribes the event handler. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler.

    Then EventHandler subscribe the output stream.
  example: []
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeEventHandler<TEventHandler>(TEventHandler? eh = null, string? outputStream = null, FromRelativeStreamPosition? start = null, bool ensureOutputStreamProjection = true, CancellationToken token = default) where TEventHandler : class, IEventHandler, ITypeRegister'
    parameters:
    - id: eh
      type: '{TEventHandler}'
      description: The event-handler/model
    - id: outputStream
      type: System.String
      description: The output stream.
    - id: start
      type: System.Nullable{MicroPlumberd.FromRelativeStreamPosition}
      description: The start.
    - id: ensureOutputStreamProjection
      type: System.Boolean
      description: if set to <code>true</code> [ensure output stream projection].
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: TEventHandler
      description: The type of the event handler.
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
      description: ''
    content.vb: Function SubscribeEventHandler(Of TEventHandler As {Class, IEventHandler, ITypeRegister})(eh As TEventHandler = Nothing, outputStream As String = Nothing, start As FromRelativeStreamPosition? = Nothing, ensureOutputStreamProjection As Boolean = True, token As CancellationToken = Nothing) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeEventHandler*
  nameWithType.vb: IPlumber.SubscribeEventHandler(Of TEventHandler)(TEventHandler, String, FromRelativeStreamPosition?, Boolean, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeEventHandler(Of TEventHandler)(TEventHandler, String, MicroPlumberd.FromRelativeStreamPosition?, Boolean, System.Threading.CancellationToken)
  name.vb: SubscribeEventHandler(Of TEventHandler)(TEventHandler, String, FromRelativeStreamPosition?, Boolean, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently``1(``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently``1(``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  id: SubscribeEventHandlerPersistently``1(``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler?, string?, string?, IPosition?, bool, CancellationToken)
  nameWithType: IPlumber.SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler?, string?, string?, IPosition?, bool, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler?, string?, string?, EventStore.Client.IPosition?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeEventHandlerPersistently
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 231
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: >-
    Subscribes the event handler persistently. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler.

    Then EventHandler subscribe the the output stream.
  example: []
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler? model = null, string? outputStream = null, string? groupName = null, IPosition? startFrom = null, bool ensureOutputStreamProjection = true, CancellationToken token = default) where TEventHandler : class, IEventHandler, ITypeRegister'
    parameters:
    - id: model
      type: '{TEventHandler}'
      description: Optional event-handler/model.
    - id: outputStream
      type: System.String
      description: Optional output stream.
    - id: groupName
      type: System.String
      description: Optional group name.
    - id: startFrom
      type: EventStore.Client.IPosition
      description: Optional start of the stream.
    - id: ensureOutputStreamProjection
      type: System.Boolean
      description: when true creates projection that creates output's stream
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: TEventHandler
      description: The type of the event handler.
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
      description: ''
    content.vb: Function SubscribeEventHandlerPersistently(Of TEventHandler As {Class, IEventHandler, ITypeRegister})(model As TEventHandler = Nothing, outputStream As String = Nothing, groupName As String = Nothing, startFrom As IPosition = Nothing, ensureOutputStreamProjection As Boolean = True, token As CancellationToken = Nothing) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently*
  nameWithType.vb: IPlumber.SubscribeEventHandlerPersistently(Of TEventHandler)(TEventHandler, String, String, IPosition, Boolean, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently(Of TEventHandler)(TEventHandler, String, String, EventStore.Client.IPosition, Boolean, System.Threading.CancellationToken)
  name.vb: SubscribeEventHandlerPersistently(Of TEventHandler)(TEventHandler, String, String, IPosition, Boolean, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  id: SubscribePersistently(System.String,System.String,System.Int32,EventStore.Client.UserCredentials,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribePersistently(string, string, int, UserCredentials?, CancellationToken)
  nameWithType: IPlumber.SubscribePersistently(string, string, int, UserCredentials?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SubscribePersistently(string, string, int, EventStore.Client.UserCredentials?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribePersistently
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 242
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Returns a subscription builder that will subscribe model persistently.
  example: []
  syntax:
    content: ISubscriptionRunner SubscribePersistently(string streamName, string groupName, int bufferSize = 10, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default)
    parameters:
    - id: streamName
      type: System.String
      description: Name of the stream.
    - id: groupName
      type: System.String
      description: Name of the group.
    - id: bufferSize
      type: System.Int32
      description: Size of the buffer.
    - id: userCredentials
      type: EventStore.Client.UserCredentials
      description: The user credentials.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: MicroPlumberd.ISubscriptionRunner
      description: ''
    content.vb: Function SubscribePersistently(streamName As String, groupName As String, bufferSize As Integer = 10, userCredentials As UserCredentials = Nothing, cancellationToken As CancellationToken = Nothing) As ISubscriptionRunner
  overload: MicroPlumberd.IPlumber.SubscribePersistently*
  nameWithType.vb: IPlumber.SubscribePersistently(String, String, Integer, UserCredentials, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SubscribePersistently(String, String, Integer, EventStore.Client.UserCredentials, System.Threading.CancellationToken)
  name.vb: SubscribePersistently(String, String, Integer, UserCredentials, CancellationToken)
- uid: MicroPlumberd.IPlumber.Rehydrate``1(``0,System.String,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Rehydrate``1(``0,System.String,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  id: Rehydrate``1(``0,System.String,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Rehydrate<T>(T, string, StreamPosition?, CancellationToken)
  nameWithType: IPlumber.Rehydrate<T>(T, string, StreamPosition?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Rehydrate<T>(T, string, EventStore.Client.StreamPosition?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Rehydrate
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 253
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Rehydrates the specified model.
  example: []
  syntax:
    content: 'Task Rehydrate<T>(T model, string stream, StreamPosition? position = null, CancellationToken token = default) where T : IEventHandler, ITypeRegister'
    parameters:
    - id: model
      type: '{T}'
      description: The model.
    - id: stream
      type: System.String
      description: The stream.
    - id: position
      type: System.Nullable{EventStore.Client.StreamPosition}
      description: The position.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function Rehydrate(Of T As {IEventHandler, ITypeRegister})(model As T, stream As String, position As StreamPosition? = Nothing, token As CancellationToken = Nothing) As Task
  overload: MicroPlumberd.IPlumber.Rehydrate*
  nameWithType.vb: IPlumber.Rehydrate(Of T)(T, String, StreamPosition?, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Rehydrate(Of T)(T, String, EventStore.Client.StreamPosition?, System.Threading.CancellationToken)
  name.vb: Rehydrate(Of T)(T, String, StreamPosition?, CancellationToken)
- uid: MicroPlumberd.IPlumber.Rehydrate``1(``0,System.Guid,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Rehydrate``1(``0,System.Guid,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  id: Rehydrate``1(``0,System.Guid,System.Nullable{EventStore.Client.StreamPosition},System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Rehydrate<T>(T, Guid, StreamPosition?, CancellationToken)
  nameWithType: IPlumber.Rehydrate<T>(T, Guid, StreamPosition?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Rehydrate<T>(T, System.Guid, EventStore.Client.StreamPosition?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Rehydrate
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 264
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Rehydrates the specified model
  example: []
  syntax:
    content: 'Task Rehydrate<T>(T model, Guid id, StreamPosition? position = null, CancellationToken token = default) where T : IEventHandler, ITypeRegister'
    parameters:
    - id: model
      type: '{T}'
      description: The model.
    - id: id
      type: System.Guid
      description: The identifier.
    - id: position
      type: System.Nullable{EventStore.Client.StreamPosition}
      description: The position from which reply events.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Function Rehydrate(Of T As {IEventHandler, ITypeRegister})(model As T, id As Guid, position As StreamPosition? = Nothing, token As CancellationToken = Nothing) As Task
  overload: MicroPlumberd.IPlumber.Rehydrate*
  nameWithType.vb: IPlumber.Rehydrate(Of T)(T, Guid, StreamPosition?, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Rehydrate(Of T)(T, System.Guid, EventStore.Client.StreamPosition?, System.Threading.CancellationToken)
  name.vb: Rehydrate(Of T)(T, Guid, StreamPosition?, CancellationToken)
- uid: MicroPlumberd.IPlumber.Get``1(System.Object,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Get``1(System.Object,System.Threading.CancellationToken)
  id: Get``1(System.Object,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Get<T>(object, CancellationToken)
  nameWithType: IPlumber.Get<T>(object, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Get<T>(object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Get
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 275
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: >-
    Returns the aggregate identified by id.

    This usually mean that all the event will be loaded from the EventStoreDB and executed through 'Given' method on it's instance. 

    If the aggregate supports snapshoting, it's state will be loaded from latest snapshot and relevant events from that time will be replied on it's instance.
  example: []
  syntax:
    content: 'Task<T> Get<T>(object id, CancellationToken token = default) where T : IAggregate<T>, ITypeRegister, IId'
    parameters:
    - id: id
      type: System.Object
      description: The identifier.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: ''
    content.vb: Function [Get](Of T As {IAggregate(Of T), ITypeRegister, IId})(id As Object, token As CancellationToken = Nothing) As Task(Of T)
  overload: MicroPlumberd.IPlumber.Get*
  nameWithType.vb: IPlumber.Get(Of T)(Object, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Get(Of T)(Object, System.Threading.CancellationToken)
  name.vb: Get(Of T)(Object, CancellationToken)
- uid: MicroPlumberd.IPlumber.SaveChanges``1(``0,System.Object,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SaveChanges``1(``0,System.Object,System.Threading.CancellationToken)
  id: SaveChanges``1(``0,System.Object,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SaveChanges<T>(T, object?, CancellationToken)
  nameWithType: IPlumber.SaveChanges<T>(T, object?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SaveChanges<T>(T, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SaveChanges
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 285
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Saves all pending events from the aggregate. Uses optimistic concurrency.
  example: []
  syntax:
    content: 'Task<IWriteResult> SaveChanges<T>(T aggregate, object? metadata = null, CancellationToken token = default) where T : IAggregate<T>, IId'
    parameters:
    - id: aggregate
      type: '{T}'
      description: The aggregate.
    - id: metadata
      type: System.Object
      description: The optional metadata.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function SaveChanges(Of T As {IAggregate(Of T), IId})(aggregate As T, metadata As Object = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.SaveChanges*
  nameWithType.vb: IPlumber.SaveChanges(Of T)(T, Object, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SaveChanges(Of T)(T, Object, System.Threading.CancellationToken)
  name.vb: SaveChanges(Of T)(T, Object, CancellationToken)
- uid: MicroPlumberd.IPlumber.SaveNew``1(``0,System.Object,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SaveNew``1(``0,System.Object,System.Threading.CancellationToken)
  id: SaveNew``1(``0,System.Object,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SaveNew<T>(T, object?, CancellationToken)
  nameWithType: IPlumber.SaveNew<T>(T, object?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SaveNew<T>(T, object?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SaveNew
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 295
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Saves the aggregate. Expects that no aggregate exists.
  example: []
  syntax:
    content: 'Task<IWriteResult> SaveNew<T>(T aggregate, object? metadata = null, CancellationToken token = default) where T : IAggregate<T>, IId'
    parameters:
    - id: aggregate
      type: '{T}'
      description: The aggregate.
    - id: metadata
      type: System.Object
      description: The optional metadata.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function SaveNew(Of T As {IAggregate(Of T), IId})(aggregate As T, metadata As Object = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.SaveNew*
  nameWithType.vb: IPlumber.SaveNew(Of T)(T, Object, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SaveNew(Of T)(T, Object, System.Threading.CancellationToken)
  name.vb: SaveNew(Of T)(T, Object, CancellationToken)
- uid: MicroPlumberd.IPlumber.GetSnapshot``1(System.Guid,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.GetSnapshot``1(System.Guid,System.Threading.CancellationToken)
  id: GetSnapshot``1(System.Guid,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: GetSnapshot<T>(Guid, CancellationToken)
  nameWithType: IPlumber.GetSnapshot<T>(Guid, CancellationToken)
  fullName: MicroPlumberd.IPlumber.GetSnapshot<T>(System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: GetSnapshot
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 304
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Gets the snapshot - deserializes snapshot from the stream. Stream is identified by typeof(T). Deserialization is done from the latest event (snaphost) in the stream.
  example: []
  syntax:
    content: Task<Snapshot<T>?> GetSnapshot<T>(Guid id, CancellationToken token = default)
    parameters:
    - id: id
      type: System.Guid
      description: The identifier.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.Snapshot{{T}}}
      description: ''
    content.vb: Function GetSnapshot(Of T)(id As Guid, token As CancellationToken = Nothing) As Task(Of Snapshot(Of T))
  overload: MicroPlumberd.IPlumber.GetSnapshot*
  nameWithType.vb: IPlumber.GetSnapshot(Of T)(Guid, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.GetSnapshot(Of T)(System.Guid, System.Threading.CancellationToken)
  name.vb: GetSnapshot(Of T)(Guid, CancellationToken)
- uid: MicroPlumberd.IPlumber.GetSnapshot(System.Object,System.Type,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.GetSnapshot(System.Object,System.Type,System.Threading.CancellationToken)
  id: GetSnapshot(System.Object,System.Type,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: GetSnapshot(object, Type, CancellationToken)
  nameWithType: IPlumber.GetSnapshot(object, Type, CancellationToken)
  fullName: MicroPlumberd.IPlumber.GetSnapshot(object, System.Type, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: GetSnapshot
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 313
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Gets the snapshot - deserializes snapshot from the stream. Stream is identified by snaphostType. Deserialization is done from the latest event (snaphost) in the stream.
  example: []
  syntax:
    content: Task<Snapshot?> GetSnapshot(object id, Type snapshotType, CancellationToken token = default)
    parameters:
    - id: id
      type: System.Object
      description: The identifier.
    - id: snapshotType
      type: System.Type
      description: Type of the snapshot.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.Snapshot}
      description: The snapshot information containing the snaphost and relevant metadata.
    content.vb: Function GetSnapshot(id As Object, snapshotType As Type, token As CancellationToken = Nothing) As Task(Of Snapshot)
  overload: MicroPlumberd.IPlumber.GetSnapshot*
  nameWithType.vb: IPlumber.GetSnapshot(Object, Type, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.GetSnapshot(Object, System.Type, System.Threading.CancellationToken)
  name.vb: GetSnapshot(Object, Type, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendLink(System.String,MicroPlumberd.Metadata,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendLink(System.String,MicroPlumberd.Metadata,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  id: AppendLink(System.String,MicroPlumberd.Metadata,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendLink(string, Metadata, StreamState?, CancellationToken)
  nameWithType: IPlumber.AppendLink(string, Metadata, StreamState?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendLink(string, MicroPlumberd.Metadata, EventStore.Client.StreamState?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendLink
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 323
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends the link to a stream.
  example: []
  syntax:
    content: Task<IWriteResult> AppendLink(string streamId, Metadata metadata, StreamState? state = null, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: The stream identifier.
    - id: metadata
      type: MicroPlumberd.Metadata
      description: The metadata.
    - id: state
      type: System.Nullable{EventStore.Client.StreamState}
      description: The expected state of the stream
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendLink(streamId As String, metadata As Metadata, state As StreamState? = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendLink*
  nameWithType.vb: IPlumber.AppendLink(String, Metadata, StreamState?, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendLink(String, MicroPlumberd.Metadata, EventStore.Client.StreamState?, System.Threading.CancellationToken)
  name.vb: AppendLink(String, Metadata, StreamState?, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  id: SubscribeEventHandlerPersistently``1(MicroPlumberd.TypeEventConverter,System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.String,EventStore.Client.IPosition,System.Boolean,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeEventHandlerPersistently<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, string?, IPosition?, bool, CancellationToken)
  nameWithType: IPlumber.SubscribeEventHandlerPersistently<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, string?, IPosition?, bool, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently<TEventHandler>(MicroPlumberd.TypeEventConverter, System.Collections.Generic.IEnumerable<string>?, TEventHandler?, string?, string?, EventStore.Client.IPosition?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeEventHandlerPersistently
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 339
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Subscribes the event handler persistently. This means that at least once an event is processed successfully, it wont be processed anymore.
  example: []
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeEventHandlerPersistently<TEventHandler>(TypeEventConverter mapFunc, IEnumerable<string>? events, TEventHandler? model, string? outputStream = null, string? groupName = null, IPosition? startFrom = null, bool ensureOutputStreamProjection = true, CancellationToken token = default) where TEventHandler : class, IEventHandler'
    parameters:
    - id: mapFunc
      type: MicroPlumberd.TypeEventConverter
      description: The map function.
    - id: events
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The events.
    - id: model
      type: '{TEventHandler}'
      description: The model.
    - id: outputStream
      type: System.String
      description: The output stream.
    - id: groupName
      type: System.String
      description: Name of the group.
    - id: startFrom
      type: EventStore.Client.IPosition
      description: The start from.
    - id: ensureOutputStreamProjection
      type: System.Boolean
      description: if set to <code>true</code> [ensure output stream projection].
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: TEventHandler
      description: The type of the event handler.
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
      description: ''
    content.vb: Function SubscribeEventHandlerPersistently(Of TEventHandler As {Class, IEventHandler})(mapFunc As TypeEventConverter, events As IEnumerable(Of String), model As TEventHandler, outputStream As String = Nothing, groupName As String = Nothing, startFrom As IPosition = Nothing, ensureOutputStreamProjection As Boolean = True, token As CancellationToken = Nothing) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently*
  nameWithType.vb: IPlumber.SubscribeEventHandlerPersistently(Of TEventHandler)(TypeEventConverter, IEnumerable(Of String), TEventHandler, String, String, IPosition, Boolean, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently(Of TEventHandler)(MicroPlumberd.TypeEventConverter, System.Collections.Generic.IEnumerable(Of String), TEventHandler, String, String, EventStore.Client.IPosition, Boolean, System.Threading.CancellationToken)
  name.vb: SubscribeEventHandlerPersistently(Of TEventHandler)(TypeEventConverter, IEnumerable(Of String), TEventHandler, String, String, IPosition, Boolean, CancellationToken)
- uid: MicroPlumberd.IPlumber.Read``1(System.Object,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Read``1(System.Object,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  id: Read``1(System.Object,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Read<TOwner>(object, StreamPosition?, Direction?, long, CancellationToken)
  nameWithType: IPlumber.Read<TOwner>(object, StreamPosition?, Direction?, long, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Read<TOwner>(object, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Read
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 358
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: >-
    Reads stream and returns events.

    Conventions used:

    ProjectionCategoryStreamConvention - to construct streamId that shall be read.
  example: []
  syntax:
    content: 'IAsyncEnumerable<object> Read<TOwner>(object id, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807, CancellationToken token = default) where TOwner : ITypeRegister'
    parameters:
    - id: id
      type: System.Object
      description: The identifier (of the aggregate).
    - id: start
      type: System.Nullable{EventStore.Client.StreamPosition}
      description: The stream start position.
    - id: direction
      type: System.Nullable{EventStore.Client.Direction}
      description: The direction of the reading.
    - id: maxCount
      type: System.Int64
      description: The maximum number of read events.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: TOwner
      description: The type of the owner (aggregate).
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Object}
      description: ''
    content.vb: Function Read(Of TOwner As ITypeRegister)(id As Object, start As StreamPosition? = Nothing, direction As Direction? = Nothing, maxCount As Long = 9223372036854775807, token As CancellationToken = Nothing) As IAsyncEnumerable(Of Object)
  overload: MicroPlumberd.IPlumber.Read*
  nameWithType.vb: IPlumber.Read(Of TOwner)(Object, StreamPosition?, Direction?, Long, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Read(Of TOwner)(Object, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, Long, System.Threading.CancellationToken)
  name.vb: Read(Of TOwner)(Object, StreamPosition?, Direction?, Long, CancellationToken)
- uid: MicroPlumberd.IPlumber.Read``1(System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Read``1(System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  id: Read``1(System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Read<TOwner>(StreamPosition?, Direction?, long, CancellationToken)
  nameWithType: IPlumber.Read<TOwner>(StreamPosition?, Direction?, long, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Read<TOwner>(EventStore.Client.StreamPosition?, EventStore.Client.Direction?, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Read
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 372
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: >-
    Reads stream and returns events.

    Conventions used:

    ProjectionCategoryStreamConvention - to construct streamId that shall be read.
  example: []
  syntax:
    content: 'IAsyncEnumerable<object> Read<TOwner>(StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807, CancellationToken token = default) where TOwner : ITypeRegister'
    parameters:
    - id: start
      type: System.Nullable{EventStore.Client.StreamPosition}
      description: The stream start position.
    - id: direction
      type: System.Nullable{EventStore.Client.Direction}
      description: The direction of the reading.
    - id: maxCount
      type: System.Int64
      description: The maximum number of read events.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: TOwner
      description: The type of the owner(aggregate).
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Object}
      description: ''
    content.vb: Function Read(Of TOwner As ITypeRegister)(start As StreamPosition? = Nothing, direction As Direction? = Nothing, maxCount As Long = 9223372036854775807, token As CancellationToken = Nothing) As IAsyncEnumerable(Of Object)
  overload: MicroPlumberd.IPlumber.Read*
  nameWithType.vb: IPlumber.Read(Of TOwner)(StreamPosition?, Direction?, Long, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Read(Of TOwner)(EventStore.Client.StreamPosition?, EventStore.Client.Direction?, Long, System.Threading.CancellationToken)
  name.vb: Read(Of TOwner)(StreamPosition?, Direction?, Long, CancellationToken)
- uid: MicroPlumberd.IPlumber.Read(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.Read(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  id: Read(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: Read(string, TypeEventConverter, StreamPosition?, Direction?, long, CancellationToken)
  nameWithType: IPlumber.Read(string, TypeEventConverter, StreamPosition?, Direction?, long, CancellationToken)
  fullName: MicroPlumberd.IPlumber.Read(string, MicroPlumberd.TypeEventConverter, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Read
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 385
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Reads stream and returns events.
  example: []
  syntax:
    content: IAsyncEnumerable<object> Read(string streamId, TypeEventConverter converter, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: The full stream name
    - id: converter
      type: MicroPlumberd.TypeEventConverter
      description: The event-map converter.
    - id: start
      type: System.Nullable{EventStore.Client.StreamPosition}
      description: The stream start position.
    - id: direction
      type: System.Nullable{EventStore.Client.Direction}
      description: The direction of the reading.
    - id: maxCount
      type: System.Int64
      description: The maximum number of read events.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.Object}
      description: ''
    content.vb: Function Read(streamId As String, converter As TypeEventConverter, start As StreamPosition? = Nothing, direction As Direction? = Nothing, maxCount As Long = 9223372036854775807, token As CancellationToken = Nothing) As IAsyncEnumerable(Of Object)
  overload: MicroPlumberd.IPlumber.Read*
  nameWithType.vb: IPlumber.Read(String, TypeEventConverter, StreamPosition?, Direction?, Long, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.Read(String, MicroPlumberd.TypeEventConverter, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, Long, System.Threading.CancellationToken)
  name.vb: Read(String, TypeEventConverter, StreamPosition?, Direction?, Long, CancellationToken)
- uid: MicroPlumberd.IPlumber.ReadFull(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.ReadFull(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  id: ReadFull(System.String,MicroPlumberd.TypeEventConverter,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: ReadFull(string, TypeEventConverter, StreamPosition?, Direction?, long, CancellationToken)
  nameWithType: IPlumber.ReadFull(string, TypeEventConverter, StreamPosition?, Direction?, long, CancellationToken)
  fullName: MicroPlumberd.IPlumber.ReadFull(string, MicroPlumberd.TypeEventConverter, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: ReadFull
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 398
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Reads stream and returns event and metadata information.
  example: []
  syntax:
    content: IAsyncEnumerable<(object, Metadata)> ReadFull(string streamId, TypeEventConverter converter, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: The full stream name
    - id: converter
      type: MicroPlumberd.TypeEventConverter
      description: The event-map converter.
    - id: start
      type: System.Nullable{EventStore.Client.StreamPosition}
      description: The stream start position.
    - id: direction
      type: System.Nullable{EventStore.Client.Direction}
      description: The direction of the reading.
    - id: maxCount
      type: System.Int64
      description: The maximum number of read events.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.ValueTuple{System.Object,MicroPlumberd.Metadata}}
      description: ''
    content.vb: Function ReadFull(streamId As String, converter As TypeEventConverter, start As StreamPosition? = Nothing, direction As Direction? = Nothing, maxCount As Long = 9223372036854775807, token As CancellationToken = Nothing) As IAsyncEnumerable(Of (Object, Metadata))
  overload: MicroPlumberd.IPlumber.ReadFull*
  nameWithType.vb: IPlumber.ReadFull(String, TypeEventConverter, StreamPosition?, Direction?, Long, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.ReadFull(String, MicroPlumberd.TypeEventConverter, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, Long, System.Threading.CancellationToken)
  name.vb: ReadFull(String, TypeEventConverter, StreamPosition?, Direction?, Long, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendSnapshot(System.Object,System.Object,System.Int64,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendSnapshot(System.Object,System.Object,System.Int64,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  id: AppendSnapshot(System.Object,System.Object,System.Int64,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendSnapshot(object, object, long, StreamState?, CancellationToken)
  nameWithType: IPlumber.AppendSnapshot(object, object, long, StreamState?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendSnapshot(object, object, long, EventStore.Client.StreamState?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendSnapshot
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 411
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends the snapshot to a stream determined by the type of the snapshot/state.
  example: []
  syntax:
    content: Task<IWriteResult> AppendSnapshot(object snapshot, object id, long version, StreamState? state = null, CancellationToken token = default)
    parameters:
    - id: snapshot
      type: System.Object
      description: The snapshot.
    - id: id
      type: System.Object
      description: The identifier of the snapshot/state.
    - id: version
      type: System.Int64
      description: The expected version.
    - id: state
      type: System.Nullable{EventStore.Client.StreamState}
      description: The expected state of the stream.
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendSnapshot(snapshot As Object, id As Object, version As Long, state As StreamState? = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendSnapshot*
  nameWithType.vb: IPlumber.AppendSnapshot(Object, Object, Long, StreamState?, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendSnapshot(Object, Object, Long, EventStore.Client.StreamState?, System.Threading.CancellationToken)
  name.vb: AppendSnapshot(Object, Object, Long, StreamState?, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendEvent(System.Object,System.Object,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendEvent(System.Object,System.Object,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Threading.CancellationToken)
  id: AppendEvent(System.Object,System.Object,System.Object,System.Nullable{EventStore.Client.StreamState},System.String,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendEvent(object, object?, object?, StreamState?, string?, CancellationToken)
  nameWithType: IPlumber.AppendEvent(object, object?, object?, StreamState?, string?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendEvent(object, object?, object?, EventStore.Client.StreamState?, string?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendEvent
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 423
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends the event. StreamId is determined using conventions.
  example: []
  syntax:
    content: Task<IWriteResult> AppendEvent(object evt, object? id = null, object? metadata = null, StreamState? state = null, string? evtName = null, CancellationToken token = default)
    parameters:
    - id: evt
      type: System.Object
      description: The evt.
    - id: id
      type: System.Object
      description: The identifier of stream.(second segment of typical streamId, So if streamId is 'foo-123', 123 would be the id.)
    - id: metadata
      type: System.Object
      description: Optional metadata.
    - id: state
      type: System.Nullable{EventStore.Client.StreamState}
      description: Expected state.
    - id: evtName
      type: System.String
      description: Optional name of the event.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendEvent(evt As Object, id As Object = Nothing, metadata As Object = Nothing, state As StreamState? = Nothing, evtName As String = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendEvent*
  nameWithType.vb: IPlumber.AppendEvent(Object, Object, Object, StreamState?, String, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendEvent(Object, Object, Object, EventStore.Client.StreamState?, String, System.Threading.CancellationToken)
  name.vb: AppendEvent(Object, Object, Object, StreamState?, String, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendLink(System.String,System.UInt64,System.String,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendLink(System.String,System.UInt64,System.String,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  id: AppendLink(System.String,System.UInt64,System.String,System.Nullable{EventStore.Client.StreamState},System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendLink(string, ulong, string, StreamState?, CancellationToken)
  nameWithType: IPlumber.AppendLink(string, ulong, string, StreamState?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendLink(string, ulong, string, EventStore.Client.StreamState?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendLink
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 434
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Appends the link.
  example: []
  syntax:
    content: Task<IWriteResult> AppendLink(string streamId, ulong streamPosition, string streamSourceId, StreamState? state = null, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
      description: The stream identifier.
    - id: streamPosition
      type: System.UInt64
      description: Stream position in original stream
    - id: streamSourceId
      type: System.String
      description: The stream source identifier.
    - id: state
      type: System.Nullable{EventStore.Client.StreamState}
      description: Optional expected stream state.
    - id: token
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendLink(streamId As String, streamPosition As ULong, streamSourceId As String, state As StreamState? = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendLink*
  nameWithType.vb: IPlumber.AppendLink(String, ULong, String, StreamState?, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendLink(String, ULong, String, EventStore.Client.StreamState?, System.Threading.CancellationToken)
  name.vb: AppendLink(String, ULong, String, StreamState?, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendState(System.Object,System.Object,System.Nullable{System.Int64},System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendState(System.Object,System.Object,System.Nullable{System.Int64},System.Threading.CancellationToken)
  id: AppendState(System.Object,System.Object,System.Nullable{System.Int64},System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendState(object, object, long?, CancellationToken)
  nameWithType: IPlumber.AppendState(object, object, long?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendState(object, object, long?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendState
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 445
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Updates or adds simple entity/state. Be aware, that rdb constraints are not possible.
  example: []
  syntax:
    content: Task<IWriteResult> AppendState(object state, object id, long? version = null, CancellationToken token = default)
    parameters:
    - id: state
      type: System.Object
      description: The entity.
    - id: id
      type: System.Object
      description: The identifier.
    - id: version
      type: System.Nullable{System.Int64}
      description: The version.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendState(state As Object, id As Object, version As Long? = Nothing, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendState*
  nameWithType.vb: IPlumber.AppendState(Object, Object, Long?, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendState(Object, Object, Long?, System.Threading.CancellationToken)
  name.vb: AppendState(Object, Object, Long?, CancellationToken)
- uid: MicroPlumberd.IPlumber.AppendState``1(``0,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.AppendState``1(``0,System.Threading.CancellationToken)
  id: AppendState``1(``0,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: AppendState<T>(T, CancellationToken)
  nameWithType: IPlumber.AppendState<T>(T, CancellationToken)
  fullName: MicroPlumberd.IPlumber.AppendState<T>(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: AppendState
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 454
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  summary: Updates or adds simple entity/state. Be aware, that rdb constraints are not possible.
  example: []
  syntax:
    content: Task<IWriteResult> AppendState<T>(T state, CancellationToken token = default)
    parameters:
    - id: state
      type: '{T}'
      description: The entity.
    - id: token
      type: System.Threading.CancellationToken
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
      description: ''
    content.vb: Function AppendState(Of T)(state As T, token As CancellationToken = Nothing) As Task(Of IWriteResult)
  overload: MicroPlumberd.IPlumber.AppendState*
  nameWithType.vb: IPlumber.AppendState(Of T)(T, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.AppendState(Of T)(T, System.Threading.CancellationToken)
  name.vb: AppendState(Of T)(T, CancellationToken)
- uid: MicroPlumberd.IPlumber.GetState``1(System.Object,System.String,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.GetState``1(System.Object,System.String,System.Threading.CancellationToken)
  id: GetState``1(System.Object,System.String,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: GetState<T>(object, string?, CancellationToken)
  nameWithType: IPlumber.GetState<T>(object, string?, CancellationToken)
  fullName: MicroPlumberd.IPlumber.GetState<T>(object, string?, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: GetState
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 456
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<SubscriptionRunnerState<T>?> GetState<T>(object id, string? streamId = null, CancellationToken token = default) where T : class'
    parameters:
    - id: id
      type: System.Object
    - id: streamId
      type: System.String
    - id: token
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{MicroPlumberd.SubscriptionRunnerState{{T}}}
    content.vb: Function GetState(Of T As Class)(id As Object, streamId As String = Nothing, token As CancellationToken = Nothing) As Task(Of SubscriptionRunnerState(Of T))
  overload: MicroPlumberd.IPlumber.GetState*
  nameWithType.vb: IPlumber.GetState(Of T)(Object, String, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.GetState(Of T)(Object, String, System.Threading.CancellationToken)
  name.vb: GetState(Of T)(Object, String, CancellationToken)
- uid: MicroPlumberd.IPlumber.ReadEventsOfType``1(System.String,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.ReadEventsOfType``1(System.String,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  id: ReadEventsOfType``1(System.String,System.Nullable{EventStore.Client.StreamPosition},System.Nullable{EventStore.Client.Direction},System.Int64,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: ReadEventsOfType<T>(string?, StreamPosition?, Direction?, long, CancellationToken)
  nameWithType: IPlumber.ReadEventsOfType<T>(string?, StreamPosition?, Direction?, long, CancellationToken)
  fullName: MicroPlumberd.IPlumber.ReadEventsOfType<T>(string?, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, long, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: ReadEventsOfType
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 458
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: IAsyncEnumerable<(T, Metadata)> ReadEventsOfType<T>(string? streamId = null, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807, CancellationToken token = default)
    parameters:
    - id: streamId
      type: System.String
    - id: start
      type: System.Nullable{EventStore.Client.StreamPosition}
    - id: direction
      type: System.Nullable{EventStore.Client.Direction}
    - id: maxCount
      type: System.Int64
    - id: token
      type: System.Threading.CancellationToken
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.IAsyncEnumerable{System.ValueTuple{{T},MicroPlumberd.Metadata}}
    content.vb: Function ReadEventsOfType(Of T)(streamId As String = Nothing, start As StreamPosition? = Nothing, direction As Direction? = Nothing, maxCount As Long = 9223372036854775807, token As CancellationToken = Nothing) As IAsyncEnumerable(Of (T, Metadata))
  overload: MicroPlumberd.IPlumber.ReadEventsOfType*
  nameWithType.vb: IPlumber.ReadEventsOfType(Of T)(String, StreamPosition?, Direction?, Long, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.ReadEventsOfType(Of T)(String, EventStore.Client.StreamPosition?, EventStore.Client.Direction?, Long, System.Threading.CancellationToken)
  name.vb: ReadEventsOfType(Of T)(String, StreamPosition?, Direction?, Long, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribeStateEventHandler``1(System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SubscribeStateEventHandler``1(System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  id: SubscribeStateEventHandler``1(System.Collections.Generic.IEnumerable{System.String},``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeStateEventHandler<TEventHandler>(IEnumerable<string>?, TEventHandler?, string?, FromRelativeStreamPosition?, bool, CancellationToken)
  nameWithType: IPlumber.SubscribeStateEventHandler<TEventHandler>(IEnumerable<string>?, TEventHandler?, string?, FromRelativeStreamPosition?, bool, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SubscribeStateEventHandler<TEventHandler>(System.Collections.Generic.IEnumerable<string>?, TEventHandler?, string?, MicroPlumberd.FromRelativeStreamPosition?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeStateEventHandler
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 462
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeStateEventHandler<TEventHandler>(IEnumerable<string>? eventTypes, TEventHandler? eh = null, string? outputStream = null, FromRelativeStreamPosition? start = null, bool ensureOutputStreamProjection = true, CancellationToken token = default) where TEventHandler : class, IEventHandler, ITypeRegister'
    parameters:
    - id: eventTypes
      type: System.Collections.Generic.IEnumerable{System.String}
    - id: eh
      type: '{TEventHandler}'
    - id: outputStream
      type: System.String
    - id: start
      type: System.Nullable{MicroPlumberd.FromRelativeStreamPosition}
    - id: ensureOutputStreamProjection
      type: System.Boolean
    - id: token
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEventHandler
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
    content.vb: Function SubscribeStateEventHandler(Of TEventHandler As {Class, IEventHandler, ITypeRegister})(eventTypes As IEnumerable(Of String), eh As TEventHandler = Nothing, outputStream As String = Nothing, start As FromRelativeStreamPosition? = Nothing, ensureOutputStreamProjection As Boolean = True, token As CancellationToken = Nothing) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeStateEventHandler*
  nameWithType.vb: IPlumber.SubscribeStateEventHandler(Of TEventHandler)(IEnumerable(Of String), TEventHandler, String, FromRelativeStreamPosition?, Boolean, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeStateEventHandler(Of TEventHandler)(System.Collections.Generic.IEnumerable(Of String), TEventHandler, String, MicroPlumberd.FromRelativeStreamPosition?, Boolean, System.Threading.CancellationToken)
  name.vb: SubscribeStateEventHandler(Of TEventHandler)(IEnumerable(Of String), TEventHandler, String, FromRelativeStreamPosition?, Boolean, CancellationToken)
- uid: MicroPlumberd.IPlumber.SubscribeStateEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  commentId: M:MicroPlumberd.IPlumber.SubscribeStateEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  id: SubscribeStateEventHandler``1(``0,System.String,System.Nullable{MicroPlumberd.FromRelativeStreamPosition},System.Boolean,System.Threading.CancellationToken)
  parent: MicroPlumberd.IPlumber
  langs:
  - csharp
  - vb
  name: SubscribeStateEventHandler<TEventHandler>(TEventHandler?, string?, FromRelativeStreamPosition?, bool, CancellationToken)
  nameWithType: IPlumber.SubscribeStateEventHandler<TEventHandler>(TEventHandler?, string?, FromRelativeStreamPosition?, bool, CancellationToken)
  fullName: MicroPlumberd.IPlumber.SubscribeStateEventHandler<TEventHandler>(TEventHandler?, string?, MicroPlumberd.FromRelativeStreamPosition?, bool, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd/Abstractions/IPlumber.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SubscribeStateEventHandler
    path: src/MicroPlumberd/Abstractions/IPlumber.cs
    startLine: 471
  assemblies:
  - MicroPlumberd
  namespace: MicroPlumberd
  syntax:
    content: 'Task<IAsyncDisposable> SubscribeStateEventHandler<TEventHandler>(TEventHandler? eh = null, string? outputStream = null, FromRelativeStreamPosition? start = null, bool ensureOutputStreamProjection = true, CancellationToken token = default) where TEventHandler : class, IEventHandler, ITypeRegister'
    parameters:
    - id: eh
      type: '{TEventHandler}'
    - id: outputStream
      type: System.String
    - id: start
      type: System.Nullable{MicroPlumberd.FromRelativeStreamPosition}
    - id: ensureOutputStreamProjection
      type: System.Boolean
    - id: token
      type: System.Threading.CancellationToken
    typeParameters:
    - id: TEventHandler
    return:
      type: System.Threading.Tasks.Task{System.IAsyncDisposable}
    content.vb: Function SubscribeStateEventHandler(Of TEventHandler As {Class, IEventHandler, ITypeRegister})(eh As TEventHandler = Nothing, outputStream As String = Nothing, start As FromRelativeStreamPosition? = Nothing, ensureOutputStreamProjection As Boolean = True, token As CancellationToken = Nothing) As Task(Of IAsyncDisposable)
  overload: MicroPlumberd.IPlumber.SubscribeStateEventHandler*
  nameWithType.vb: IPlumber.SubscribeStateEventHandler(Of TEventHandler)(TEventHandler, String, FromRelativeStreamPosition?, Boolean, CancellationToken)
  fullName.vb: MicroPlumberd.IPlumber.SubscribeStateEventHandler(Of TEventHandler)(TEventHandler, String, MicroPlumberd.FromRelativeStreamPosition?, Boolean, System.Threading.CancellationToken)
  name.vb: SubscribeStateEventHandler(Of TEventHandler)(TEventHandler, String, FromRelativeStreamPosition?, Boolean, CancellationToken)
references:
- uid: MicroPlumberd
  commentId: N:MicroPlumberd
  href: MicroPlumberd.html
  name: MicroPlumberd
  nameWithType: MicroPlumberd
  fullName: MicroPlumberd
- uid: MicroPlumberd.IPlumber.Config*
  commentId: Overload:MicroPlumberd.IPlumber.Config
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Config
  name: Config
  nameWithType: IPlumber.Config
  fullName: MicroPlumberd.IPlumber.Config
- uid: MicroPlumberd.IPlumberReadOnlyConfig
  commentId: T:MicroPlumberd.IPlumberReadOnlyConfig
  parent: MicroPlumberd
  href: MicroPlumberd.IPlumberReadOnlyConfig.html
  name: IPlumberReadOnlyConfig
  nameWithType: IPlumberReadOnlyConfig
  fullName: MicroPlumberd.IPlumberReadOnlyConfig
- uid: MicroPlumberd.IPlumber.Client*
  commentId: Overload:MicroPlumberd.IPlumber.Client
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Client
  name: Client
  nameWithType: IPlumber.Client
  fullName: MicroPlumberd.IPlumber.Client
- uid: EventStore.Client.EventStoreClient
  commentId: T:EventStore.Client.EventStoreClient
  parent: EventStore.Client
  isExternal: true
  name: EventStoreClient
  nameWithType: EventStoreClient
  fullName: EventStore.Client.EventStoreClient
- uid: EventStore.Client
  commentId: N:EventStore.Client
  isExternal: true
  name: EventStore.Client
  nameWithType: EventStore.Client
  fullName: EventStore.Client
  spec.csharp:
  - uid: EventStore
    name: EventStore
    isExternal: true
  - name: .
  - uid: EventStore.Client
    name: Client
    isExternal: true
  spec.vb:
  - uid: EventStore
    name: EventStore
    isExternal: true
  - name: .
  - uid: EventStore.Client
    name: Client
    isExternal: true
- uid: MicroPlumberd.IPlumber.PersistentSubscriptionClient*
  commentId: Overload:MicroPlumberd.IPlumber.PersistentSubscriptionClient
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_PersistentSubscriptionClient
  name: PersistentSubscriptionClient
  nameWithType: IPlumber.PersistentSubscriptionClient
  fullName: MicroPlumberd.IPlumber.PersistentSubscriptionClient
- uid: EventStore.Client.EventStorePersistentSubscriptionsClient
  commentId: T:EventStore.Client.EventStorePersistentSubscriptionsClient
  parent: EventStore.Client
  isExternal: true
  name: EventStorePersistentSubscriptionsClient
  nameWithType: EventStorePersistentSubscriptionsClient
  fullName: EventStore.Client.EventStorePersistentSubscriptionsClient
- uid: MicroPlumberd.IPlumber.ProjectionManagementClient*
  commentId: Overload:MicroPlumberd.IPlumber.ProjectionManagementClient
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_ProjectionManagementClient
  name: ProjectionManagementClient
  nameWithType: IPlumber.ProjectionManagementClient
  fullName: MicroPlumberd.IPlumber.ProjectionManagementClient
- uid: EventStore.Client.EventStoreProjectionManagementClient
  commentId: T:EventStore.Client.EventStoreProjectionManagementClient
  parent: EventStore.Client
  isExternal: true
  name: EventStoreProjectionManagementClient
  nameWithType: EventStoreProjectionManagementClient
  fullName: EventStore.Client.EventStoreProjectionManagementClient
- uid: MicroPlumberd.IPlumber.ProjectionRegister*
  commentId: Overload:MicroPlumberd.IPlumber.ProjectionRegister
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_ProjectionRegister
  name: ProjectionRegister
  nameWithType: IPlumber.ProjectionRegister
  fullName: MicroPlumberd.IPlumber.ProjectionRegister
- uid: MicroPlumberd.IProjectionRegister
  commentId: T:MicroPlumberd.IProjectionRegister
  parent: MicroPlumberd
  href: MicroPlumberd.IProjectionRegister.html
  name: IProjectionRegister
  nameWithType: IProjectionRegister
  fullName: MicroPlumberd.IProjectionRegister
- uid: MicroPlumberd.IPlumber.TypeHandlerRegisters*
  commentId: Overload:MicroPlumberd.IPlumber.TypeHandlerRegisters
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_TypeHandlerRegisters
  name: TypeHandlerRegisters
  nameWithType: IPlumber.TypeHandlerRegisters
  fullName: MicroPlumberd.IPlumber.TypeHandlerRegisters
- uid: MicroPlumberd.ITypeHandlerRegisters
  commentId: T:MicroPlumberd.ITypeHandlerRegisters
  parent: MicroPlumberd
  href: MicroPlumberd.ITypeHandlerRegisters.html
  name: ITypeHandlerRegisters
  nameWithType: ITypeHandlerRegisters
  fullName: MicroPlumberd.ITypeHandlerRegisters
- uid: MicroPlumberd.IPlumber.AppendEvents*
  commentId: Overload:MicroPlumberd.IPlumber.AppendEvents
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_AppendEvents_System_String_EventStore_Client_StreamRevision_System_Collections_Generic_IEnumerable_System_Object__System_Object_System_Threading_CancellationToken_
  name: AppendEvents
  nameWithType: IPlumber.AppendEvents
  fullName: MicroPlumberd.IPlumber.AppendEvents
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: EventStore.Client.StreamRevision
  commentId: T:EventStore.Client.StreamRevision
  parent: EventStore.Client
  isExternal: true
  name: StreamRevision
  nameWithType: StreamRevision
  fullName: EventStore.Client.StreamRevision
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<object>
  nameWithType: IEnumerable<object>
  fullName: System.Collections.Generic.IEnumerable<object>
  nameWithType.vb: IEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.cancellationtoken
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
  commentId: T:System.Threading.Tasks.Task{EventStore.Client.IWriteResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IWriteResult>
  nameWithType: Task<IWriteResult>
  fullName: System.Threading.Tasks.Task<EventStore.Client.IWriteResult>
  nameWithType.vb: Task(Of IWriteResult)
  fullName.vb: System.Threading.Tasks.Task(Of EventStore.Client.IWriteResult)
  name.vb: Task(Of IWriteResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: EventStore.Client.IWriteResult
    name: IWriteResult
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: EventStore.Client.IWriteResult
    name: IWriteResult
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: TResult
  - name: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  - name: .
  - uid: System.Threading.Tasks
    name: Tasks
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks
- uid: MicroPlumberd.IPlumber.AppendEventToStream*
  commentId: Overload:MicroPlumberd.IPlumber.AppendEventToStream
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_AppendEventToStream_System_String_System_Object_System_Nullable_EventStore_Client_StreamState__System_String_System_Object_System_Threading_CancellationToken_
  name: AppendEventToStream
  nameWithType: IPlumber.AppendEventToStream
  fullName: MicroPlumberd.IPlumber.AppendEventToStream
- uid: System.Nullable{EventStore.Client.StreamState}
  commentId: T:System.Nullable{EventStore.Client.StreamState}
  parent: System
  definition: System.Nullable`1
  name: StreamState?
  nameWithType: StreamState?
  fullName: EventStore.Client.StreamState?
  spec.csharp:
  - uid: EventStore.Client.StreamState
    name: StreamState
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: EventStore.Client.StreamState
    name: StreamState
    isExternal: true
  - name: '?'
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.nullable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: EventStore.Client.StreamState
  commentId: T:EventStore.Client.StreamState
  parent: EventStore.Client
  isExternal: true
  name: StreamState
  nameWithType: StreamState
  fullName: EventStore.Client.StreamState
- uid: System.Object[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object[]
  nameWithType: object[]
  fullName: object[]
  nameWithType.vb: Object()
  fullName.vb: Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: (
  - name: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: MicroPlumberd.IPlumber.FindEventInStream*
  commentId: Overload:MicroPlumberd.IPlumber.FindEventInStream
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_FindEventInStream__1_System_String_System_Guid_MicroPlumberd_TypeEventConverter_EventStore_Client_Direction_System_Threading_CancellationToken_
  name: FindEventInStream
  nameWithType: IPlumber.FindEventInStream
  fullName: MicroPlumberd.IPlumber.FindEventInStream
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.guid
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: MicroPlumberd.TypeEventConverter
  commentId: T:MicroPlumberd.TypeEventConverter
  parent: MicroPlumberd
  href: MicroPlumberd.TypeEventConverter.html
  name: TypeEventConverter
  nameWithType: TypeEventConverter
  fullName: MicroPlumberd.TypeEventConverter
- uid: EventStore.Client.Direction
  commentId: T:EventStore.Client.Direction
  parent: EventStore.Client
  isExternal: true
  name: Direction
  nameWithType: Direction
  fullName: EventStore.Client.Direction
- uid: System.Threading.Tasks.Task{MicroPlumberd.IEventRecord{{T}}}
  commentId: T:System.Threading.Tasks.Task{MicroPlumberd.IEventRecord{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEventRecord<T>>
  nameWithType: Task<IEventRecord<T>>
  fullName: System.Threading.Tasks.Task<MicroPlumberd.IEventRecord<T>>
  nameWithType.vb: Task(Of IEventRecord(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of MicroPlumberd.IEventRecord(Of T))
  name.vb: Task(Of IEventRecord(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MicroPlumberd.IEventRecord`1
    name: IEventRecord
    href: MicroPlumberd.IEventRecord-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MicroPlumberd.IEventRecord`1
    name: IEventRecord
    href: MicroPlumberd.IEventRecord-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Threading.Tasks.Task{MicroPlumberd.IEventRecord}
  commentId: T:System.Threading.Tasks.Task{MicroPlumberd.IEventRecord}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IEventRecord>
  nameWithType: Task<IEventRecord>
  fullName: System.Threading.Tasks.Task<MicroPlumberd.IEventRecord>
  nameWithType.vb: Task(Of IEventRecord)
  fullName.vb: System.Threading.Tasks.Task(Of MicroPlumberd.IEventRecord)
  name.vb: Task(Of IEventRecord)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MicroPlumberd.IEventRecord
    name: IEventRecord
    href: MicroPlumberd.IEventRecord.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MicroPlumberd.IEventRecord
    name: IEventRecord
    href: MicroPlumberd.IEventRecord.html
  - name: )
- uid: MicroPlumberd.IPlumber.SubscribeSet*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribeSet
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribeSet
  name: SubscribeSet
  nameWithType: IPlumber.SubscribeSet
  fullName: MicroPlumberd.IPlumber.SubscribeSet
- uid: MicroPlumberd.ISubscriptionSet
  commentId: T:MicroPlumberd.ISubscriptionSet
  parent: MicroPlumberd
  href: MicroPlumberd.ISubscriptionSet.html
  name: ISubscriptionSet
  nameWithType: ISubscriptionSet
  fullName: MicroPlumberd.ISubscriptionSet
- uid: MicroPlumberd.IPlumber.Subscribe*
  commentId: Overload:MicroPlumberd.IPlumber.Subscribe
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Subscribe_System_String_MicroPlumberd_FromRelativeStreamPosition_EventStore_Client_UserCredentials_System_Threading_CancellationToken_
  name: Subscribe
  nameWithType: IPlumber.Subscribe
  fullName: MicroPlumberd.IPlumber.Subscribe
- uid: MicroPlumberd.FromRelativeStreamPosition
  commentId: T:MicroPlumberd.FromRelativeStreamPosition
  parent: MicroPlumberd
  href: MicroPlumberd.FromRelativeStreamPosition.html
  name: FromRelativeStreamPosition
  nameWithType: FromRelativeStreamPosition
  fullName: MicroPlumberd.FromRelativeStreamPosition
- uid: EventStore.Client.UserCredentials
  commentId: T:EventStore.Client.UserCredentials
  parent: EventStore.Client
  isExternal: true
  name: UserCredentials
  nameWithType: UserCredentials
  fullName: EventStore.Client.UserCredentials
- uid: MicroPlumberd.ISubscriptionRunner
  commentId: T:MicroPlumberd.ISubscriptionRunner
  parent: MicroPlumberd
  href: MicroPlumberd.ISubscriptionRunner.html
  name: ISubscriptionRunner
  nameWithType: ISubscriptionRunner
  fullName: MicroPlumberd.ISubscriptionRunner
- uid: MicroPlumberd.IPlumber.SubscribeEventHandler*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribeEventHandler
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribeEventHandler__1_MicroPlumberd_TypeEventConverter_System_Collections_Generic_IEnumerable_System_String____0_System_String_System_Nullable_EventStore_Client_FromStream__System_Boolean_
  name: SubscribeEventHandler
  nameWithType: IPlumber.SubscribeEventHandler
  fullName: MicroPlumberd.IPlumber.SubscribeEventHandler
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<string>
  nameWithType: IEnumerable<string>
  fullName: System.Collections.Generic.IEnumerable<string>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.String
    name: string
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.string
  - name: )
- uid: '{TEventHandler}'
  commentId: '!:TEventHandler'
  definition: TEventHandler
  name: TEventHandler
  nameWithType: TEventHandler
  fullName: TEventHandler
- uid: System.Nullable{EventStore.Client.FromStream}
  commentId: T:System.Nullable{EventStore.Client.FromStream}
  parent: System
  definition: System.Nullable`1
  name: FromStream?
  nameWithType: FromStream?
  fullName: EventStore.Client.FromStream?
  spec.csharp:
  - uid: EventStore.Client.FromStream
    name: FromStream
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: EventStore.Client.FromStream
    name: FromStream
    isExternal: true
  - name: '?'
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Threading.Tasks.Task{System.IAsyncDisposable}
  commentId: T:System.Threading.Tasks.Task{System.IAsyncDisposable}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<IAsyncDisposable>
  nameWithType: Task<IAsyncDisposable>
  fullName: System.Threading.Tasks.Task<System.IAsyncDisposable>
  nameWithType.vb: Task(Of IAsyncDisposable)
  fullName.vb: System.Threading.Tasks.Task(Of System.IAsyncDisposable)
  name.vb: Task(Of IAsyncDisposable)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: System.IAsyncDisposable
    name: IAsyncDisposable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.IAsyncDisposable
    name: IAsyncDisposable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iasyncdisposable
  - name: )
- uid: TEventHandler
  name: TEventHandler
  nameWithType: TEventHandler
  fullName: TEventHandler
- uid: System.Nullable{MicroPlumberd.FromRelativeStreamPosition}
  commentId: T:System.Nullable{MicroPlumberd.FromRelativeStreamPosition}
  parent: System
  definition: System.Nullable`1
  href: MicroPlumberd.FromRelativeStreamPosition.html
  name: FromRelativeStreamPosition?
  nameWithType: FromRelativeStreamPosition?
  fullName: MicroPlumberd.FromRelativeStreamPosition?
  spec.csharp:
  - uid: MicroPlumberd.FromRelativeStreamPosition
    name: FromRelativeStreamPosition
    href: MicroPlumberd.FromRelativeStreamPosition.html
  - name: '?'
  spec.vb:
  - uid: MicroPlumberd.FromRelativeStreamPosition
    name: FromRelativeStreamPosition
    href: MicroPlumberd.FromRelativeStreamPosition.html
  - name: '?'
- uid: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribeEventHandlerPersistently__1___0_System_String_System_String_EventStore_Client_IPosition_System_Boolean_System_Threading_CancellationToken_
  name: SubscribeEventHandlerPersistently
  nameWithType: IPlumber.SubscribeEventHandlerPersistently
  fullName: MicroPlumberd.IPlumber.SubscribeEventHandlerPersistently
- uid: EventStore.Client.IPosition
  commentId: T:EventStore.Client.IPosition
  parent: EventStore.Client
  isExternal: true
  name: IPosition
  nameWithType: IPosition
  fullName: EventStore.Client.IPosition
- uid: MicroPlumberd.IPlumber.SubscribePersistently*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribePersistently
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribePersistently_System_String_System_String_System_Int32_EventStore_Client_UserCredentials_System_Threading_CancellationToken_
  name: SubscribePersistently
  nameWithType: IPlumber.SubscribePersistently
  fullName: MicroPlumberd.IPlumber.SubscribePersistently
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: MicroPlumberd.IPlumber.Rehydrate*
  commentId: Overload:MicroPlumberd.IPlumber.Rehydrate
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Rehydrate__1___0_System_String_System_Nullable_EventStore_Client_StreamPosition__System_Threading_CancellationToken_
  name: Rehydrate
  nameWithType: IPlumber.Rehydrate
  fullName: MicroPlumberd.IPlumber.Rehydrate
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Nullable{EventStore.Client.StreamPosition}
  commentId: T:System.Nullable{EventStore.Client.StreamPosition}
  parent: System
  definition: System.Nullable`1
  name: StreamPosition?
  nameWithType: StreamPosition?
  fullName: EventStore.Client.StreamPosition?
  spec.csharp:
  - uid: EventStore.Client.StreamPosition
    name: StreamPosition
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: EventStore.Client.StreamPosition
    name: StreamPosition
    isExternal: true
  - name: '?'
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MicroPlumberd.IPlumber.Get*
  commentId: Overload:MicroPlumberd.IPlumber.Get
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Get__1_System_Object_System_Threading_CancellationToken_
  name: Get
  nameWithType: IPlumber.Get
  fullName: MicroPlumberd.IPlumber.Get
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MicroPlumberd.IPlumber.SaveChanges*
  commentId: Overload:MicroPlumberd.IPlumber.SaveChanges
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SaveChanges__1___0_System_Object_System_Threading_CancellationToken_
  name: SaveChanges
  nameWithType: IPlumber.SaveChanges
  fullName: MicroPlumberd.IPlumber.SaveChanges
- uid: MicroPlumberd.IPlumber.SaveNew*
  commentId: Overload:MicroPlumberd.IPlumber.SaveNew
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SaveNew__1___0_System_Object_System_Threading_CancellationToken_
  name: SaveNew
  nameWithType: IPlumber.SaveNew
  fullName: MicroPlumberd.IPlumber.SaveNew
- uid: MicroPlumberd.IPlumber.GetSnapshot*
  commentId: Overload:MicroPlumberd.IPlumber.GetSnapshot
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_GetSnapshot__1_System_Guid_System_Threading_CancellationToken_
  name: GetSnapshot
  nameWithType: IPlumber.GetSnapshot
  fullName: MicroPlumberd.IPlumber.GetSnapshot
- uid: System.Threading.Tasks.Task{MicroPlumberd.Snapshot{{T}}}
  commentId: T:System.Threading.Tasks.Task{MicroPlumberd.Snapshot{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Snapshot<T>>
  nameWithType: Task<Snapshot<T>>
  fullName: System.Threading.Tasks.Task<MicroPlumberd.Snapshot<T>>
  nameWithType.vb: Task(Of Snapshot(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of MicroPlumberd.Snapshot(Of T))
  name.vb: Task(Of Snapshot(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MicroPlumberd.Snapshot`1
    name: Snapshot
    href: MicroPlumberd.Snapshot-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MicroPlumberd.Snapshot`1
    name: Snapshot
    href: MicroPlumberd.Snapshot-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Threading.Tasks.Task{MicroPlumberd.Snapshot}
  commentId: T:System.Threading.Tasks.Task{MicroPlumberd.Snapshot}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<Snapshot>
  nameWithType: Task<Snapshot>
  fullName: System.Threading.Tasks.Task<MicroPlumberd.Snapshot>
  nameWithType.vb: Task(Of Snapshot)
  fullName.vb: System.Threading.Tasks.Task(Of MicroPlumberd.Snapshot)
  name.vb: Task(Of Snapshot)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MicroPlumberd.Snapshot
    name: Snapshot
    href: MicroPlumberd.Snapshot.html
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MicroPlumberd.Snapshot
    name: Snapshot
    href: MicroPlumberd.Snapshot.html
  - name: )
- uid: MicroPlumberd.IPlumber.AppendLink*
  commentId: Overload:MicroPlumberd.IPlumber.AppendLink
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_AppendLink_System_String_MicroPlumberd_Metadata_System_Nullable_EventStore_Client_StreamState__System_Threading_CancellationToken_
  name: AppendLink
  nameWithType: IPlumber.AppendLink
  fullName: MicroPlumberd.IPlumber.AppendLink
- uid: MicroPlumberd.Metadata
  commentId: T:MicroPlumberd.Metadata
  parent: MicroPlumberd
  href: MicroPlumberd.Metadata.html
  name: Metadata
  nameWithType: Metadata
  fullName: MicroPlumberd.Metadata
- uid: MicroPlumberd.IPlumber.Read*
  commentId: Overload:MicroPlumberd.IPlumber.Read
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_Read__1_System_Object_System_Nullable_EventStore_Client_StreamPosition__System_Nullable_EventStore_Client_Direction__System_Int64_System_Threading_CancellationToken_
  name: Read
  nameWithType: IPlumber.Read
  fullName: MicroPlumberd.IPlumber.Read
- uid: System.Nullable{EventStore.Client.Direction}
  commentId: T:System.Nullable{EventStore.Client.Direction}
  parent: System
  definition: System.Nullable`1
  name: Direction?
  nameWithType: Direction?
  fullName: EventStore.Client.Direction?
  spec.csharp:
  - uid: EventStore.Client.Direction
    name: Direction
    isExternal: true
  - name: '?'
  spec.vb:
  - uid: EventStore.Client.Direction
    name: Direction
    isExternal: true
  - name: '?'
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: System.Collections.Generic.IAsyncEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<object>
  nameWithType: IAsyncEnumerable<object>
  fullName: System.Collections.Generic.IAsyncEnumerable<object>
  nameWithType.vb: IAsyncEnumerable(Of Object)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of Object)
  name.vb: IAsyncEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Collections.Generic.IAsyncEnumerable`1
  commentId: T:System.Collections.Generic.IAsyncEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: System.Collections.Generic.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MicroPlumberd.IPlumber.ReadFull*
  commentId: Overload:MicroPlumberd.IPlumber.ReadFull
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_ReadFull_System_String_MicroPlumberd_TypeEventConverter_System_Nullable_EventStore_Client_StreamPosition__System_Nullable_EventStore_Client_Direction__System_Int64_System_Threading_CancellationToken_
  name: ReadFull
  nameWithType: IPlumber.ReadFull
  fullName: MicroPlumberd.IPlumber.ReadFull
- uid: System.Collections.Generic.IAsyncEnumerable{System.ValueTuple{System.Object,MicroPlumberd.Metadata}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.ValueTuple{System.Object,MicroPlumberd.Metadata}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<(object, Metadata)>
  nameWithType: IAsyncEnumerable<(object, Metadata)>
  fullName: System.Collections.Generic.IAsyncEnumerable<(object, MicroPlumberd.Metadata)>
  nameWithType.vb: IAsyncEnumerable(Of (Object, Metadata))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of (Object, MicroPlumberd.Metadata))
  name.vb: IAsyncEnumerable(Of (Object, Metadata))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: MicroPlumberd.Metadata
    name: Metadata
    href: MicroPlumberd.Metadata.html
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: MicroPlumberd.Metadata
    name: Metadata
    href: MicroPlumberd.Metadata.html
  - name: )
  - name: )
- uid: MicroPlumberd.IPlumber.AppendSnapshot*
  commentId: Overload:MicroPlumberd.IPlumber.AppendSnapshot
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_AppendSnapshot_System_Object_System_Object_System_Int64_System_Nullable_EventStore_Client_StreamState__System_Threading_CancellationToken_
  name: AppendSnapshot
  nameWithType: IPlumber.AppendSnapshot
  fullName: MicroPlumberd.IPlumber.AppendSnapshot
- uid: MicroPlumberd.IPlumber.AppendEvent*
  commentId: Overload:MicroPlumberd.IPlumber.AppendEvent
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_AppendEvent_System_Object_System_Object_System_Object_System_Nullable_EventStore_Client_StreamState__System_String_System_Threading_CancellationToken_
  name: AppendEvent
  nameWithType: IPlumber.AppendEvent
  fullName: MicroPlumberd.IPlumber.AppendEvent
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint64
  name: ulong
  nameWithType: ulong
  fullName: ulong
  nameWithType.vb: ULong
  fullName.vb: ULong
  name.vb: ULong
- uid: MicroPlumberd.IPlumber.AppendState*
  commentId: Overload:MicroPlumberd.IPlumber.AppendState
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_AppendState_System_Object_System_Object_System_Nullable_System_Int64__System_Threading_CancellationToken_
  name: AppendState
  nameWithType: IPlumber.AppendState
  fullName: MicroPlumberd.IPlumber.AppendState
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long?
  nameWithType: long?
  fullName: long?
  nameWithType.vb: Long?
  fullName.vb: Long?
  name.vb: Long?
  spec.csharp:
  - uid: System.Int64
    name: long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
  spec.vb:
  - uid: System.Int64
    name: Long
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int64
  - name: '?'
- uid: MicroPlumberd.IPlumber.GetState*
  commentId: Overload:MicroPlumberd.IPlumber.GetState
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_GetState__1_System_Object_System_String_System_Threading_CancellationToken_
  name: GetState
  nameWithType: IPlumber.GetState
  fullName: MicroPlumberd.IPlumber.GetState
- uid: System.Threading.Tasks.Task{MicroPlumberd.SubscriptionRunnerState{{T}}}
  commentId: T:System.Threading.Tasks.Task{MicroPlumberd.SubscriptionRunnerState{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  name: Task<SubscriptionRunnerState<T>>
  nameWithType: Task<SubscriptionRunnerState<T>>
  fullName: System.Threading.Tasks.Task<MicroPlumberd.SubscriptionRunnerState<T>>
  nameWithType.vb: Task(Of SubscriptionRunnerState(Of T))
  fullName.vb: System.Threading.Tasks.Task(Of MicroPlumberd.SubscriptionRunnerState(Of T))
  name.vb: Task(Of SubscriptionRunnerState(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: <
  - uid: MicroPlumberd.SubscriptionRunnerState`1
    name: SubscriptionRunnerState
    href: MicroPlumberd.SubscriptionRunnerState-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.tasks.task-1
  - name: (
  - name: Of
  - name: " "
  - uid: MicroPlumberd.SubscriptionRunnerState`1
    name: SubscriptionRunnerState
    href: MicroPlumberd.SubscriptionRunnerState-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: MicroPlumberd.IPlumber.ReadEventsOfType*
  commentId: Overload:MicroPlumberd.IPlumber.ReadEventsOfType
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_ReadEventsOfType__1_System_String_System_Nullable_EventStore_Client_StreamPosition__System_Nullable_EventStore_Client_Direction__System_Int64_System_Threading_CancellationToken_
  name: ReadEventsOfType
  nameWithType: IPlumber.ReadEventsOfType
  fullName: MicroPlumberd.IPlumber.ReadEventsOfType
- uid: System.Collections.Generic.IAsyncEnumerable{System.ValueTuple{{T},MicroPlumberd.Metadata}}
  commentId: T:System.Collections.Generic.IAsyncEnumerable{System.ValueTuple{``0,MicroPlumberd.Metadata}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IAsyncEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  name: IAsyncEnumerable<(T, Metadata)>
  nameWithType: IAsyncEnumerable<(T, Metadata)>
  fullName: System.Collections.Generic.IAsyncEnumerable<(T, MicroPlumberd.Metadata)>
  nameWithType.vb: IAsyncEnumerable(Of (T, Metadata))
  fullName.vb: System.Collections.Generic.IAsyncEnumerable(Of (T, MicroPlumberd.Metadata))
  name.vb: IAsyncEnumerable(Of (T, Metadata))
  spec.csharp:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: <
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: MicroPlumberd.Metadata
    name: Metadata
    href: MicroPlumberd.Metadata.html
  - name: )
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IAsyncEnumerable`1
    name: IAsyncEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iasyncenumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: (
  - name: T
  - name: ','
  - name: " "
  - uid: MicroPlumberd.Metadata
    name: Metadata
    href: MicroPlumberd.Metadata.html
  - name: )
  - name: )
- uid: MicroPlumberd.IPlumber.SubscribeStateEventHandler*
  commentId: Overload:MicroPlumberd.IPlumber.SubscribeStateEventHandler
  href: MicroPlumberd.IPlumber.html#MicroPlumberd_IPlumber_SubscribeStateEventHandler__1_System_Collections_Generic_IEnumerable_System_String____0_System_String_System_Nullable_MicroPlumberd_FromRelativeStreamPosition__System_Boolean_System_Threading_CancellationToken_
  name: SubscribeStateEventHandler
  nameWithType: IPlumber.SubscribeStateEventHandler
  fullName: MicroPlumberd.IPlumber.SubscribeStateEventHandler
