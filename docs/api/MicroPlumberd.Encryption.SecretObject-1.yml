### YamlMime:ManagedReference
items:
- uid: MicroPlumberd.Encryption.SecretObject`1
  commentId: T:MicroPlumberd.Encryption.SecretObject`1
  id: SecretObject`1
  parent: MicroPlumberd.Encryption
  children:
  - MicroPlumberd.Encryption.SecretObject`1.Create(`0,System.String)
  - MicroPlumberd.Encryption.SecretObject`1.Value
  - MicroPlumberd.Encryption.SecretObject`1.op_Implicit(MicroPlumberd.Encryption.SecretObject{`0})~`0
  - MicroPlumberd.Encryption.SecretObject`1.op_Implicit(`0)~MicroPlumberd.Encryption.SecretObject{`0}
  langs:
  - csharp
  - vb
  name: SecretObject<T>
  nameWithType: SecretObject<T>
  fullName: MicroPlumberd.Encryption.SecretObject<T>
  type: Class
  source:
    remote:
      path: src/MicroPlumberd.Encryption/SecretObject.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: SecretObject
    path: src/MicroPlumberd.Encryption/SecretObject.cs
    startLine: 2
  assemblies:
  - MicroPlumberd.Encryption
  namespace: MicroPlumberd.Encryption
  syntax:
    content: 'public record SecretObject<T> : IEquatable<SecretObject<T>>'
    typeParameters:
    - id: T
    content.vb: Public Class SecretObject(Of T) Implements IEquatable(Of SecretObject(Of T))
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{MicroPlumberd.Encryption.SecretObject`1}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: SecretObject(Of T)
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T)
  name.vb: SecretObject(Of T)
- uid: MicroPlumberd.Encryption.SecretObject`1.op_Implicit(`0)~MicroPlumberd.Encryption.SecretObject{`0}
  commentId: M:MicroPlumberd.Encryption.SecretObject`1.op_Implicit(`0)~MicroPlumberd.Encryption.SecretObject{`0}
  id: op_Implicit(`0)~MicroPlumberd.Encryption.SecretObject{`0}
  parent: MicroPlumberd.Encryption.SecretObject`1
  langs:
  - csharp
  - vb
  name: implicit operator SecretObject<T>(T)
  nameWithType: SecretObject<T>.implicit operator SecretObject<T>(T)
  fullName: MicroPlumberd.Encryption.SecretObject<T>.implicit operator MicroPlumberd.Encryption.SecretObject<T>(T)
  type: Operator
  source:
    remote:
      path: src/MicroPlumberd.Encryption/SecretObject.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: op_Implicit
    path: src/MicroPlumberd.Encryption/SecretObject.cs
    startLine: 13
  assemblies:
  - MicroPlumberd.Encryption
  namespace: MicroPlumberd.Encryption
  syntax:
    content: public static implicit operator SecretObject<T>(T obj)
    parameters:
    - id: obj
      type: '{T}'
    return:
      type: MicroPlumberd.Encryption.SecretObject`1
    content.vb: Public Shared Widening Operator CType(obj As T) As SecretObject(Of T)
  overload: MicroPlumberd.Encryption.SecretObject`1.op_Implicit*
  nameWithType.vb: SecretObject(Of T).CType(T)
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T).CType(T)
  name.vb: CType(T)
- uid: MicroPlumberd.Encryption.SecretObject`1.op_Implicit(MicroPlumberd.Encryption.SecretObject{`0})~`0
  commentId: M:MicroPlumberd.Encryption.SecretObject`1.op_Implicit(MicroPlumberd.Encryption.SecretObject{`0})~`0
  id: op_Implicit(MicroPlumberd.Encryption.SecretObject{`0})~`0
  parent: MicroPlumberd.Encryption.SecretObject`1
  langs:
  - csharp
  - vb
  name: implicit operator T(SecretObject<T>)
  nameWithType: SecretObject<T>.implicit operator T(SecretObject<T>)
  fullName: MicroPlumberd.Encryption.SecretObject<T>.implicit operator T(MicroPlumberd.Encryption.SecretObject<T>)
  type: Operator
  source:
    remote:
      path: src/MicroPlumberd.Encryption/SecretObject.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: op_Implicit
    path: src/MicroPlumberd.Encryption/SecretObject.cs
    startLine: 14
  assemblies:
  - MicroPlumberd.Encryption
  namespace: MicroPlumberd.Encryption
  syntax:
    content: public static implicit operator T(SecretObject<T> obj)
    parameters:
    - id: obj
      type: MicroPlumberd.Encryption.SecretObject`1
    return:
      type: '{T}'
    content.vb: Public Shared Widening Operator CType(obj As SecretObject(Of T)) As T
  overload: MicroPlumberd.Encryption.SecretObject`1.op_Implicit*
  nameWithType.vb: SecretObject(Of T).CType(SecretObject(Of T))
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T).CType(MicroPlumberd.Encryption.SecretObject(Of T))
  name.vb: CType(SecretObject(Of T))
- uid: MicroPlumberd.Encryption.SecretObject`1.Value
  commentId: P:MicroPlumberd.Encryption.SecretObject`1.Value
  id: Value
  parent: MicroPlumberd.Encryption.SecretObject`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: SecretObject<T>.Value
  fullName: MicroPlumberd.Encryption.SecretObject<T>.Value
  type: Property
  source:
    remote:
      path: src/MicroPlumberd.Encryption/SecretObject.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Value
    path: src/MicroPlumberd.Encryption/SecretObject.cs
    startLine: 24
  assemblies:
  - MicroPlumberd.Encryption
  namespace: MicroPlumberd.Encryption
  syntax:
    content: public T? Value { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property Value As T
  overload: MicroPlumberd.Encryption.SecretObject`1.Value*
  nameWithType.vb: SecretObject(Of T).Value
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T).Value
- uid: MicroPlumberd.Encryption.SecretObject`1.Create(`0,System.String)
  commentId: M:MicroPlumberd.Encryption.SecretObject`1.Create(`0,System.String)
  id: Create(`0,System.String)
  parent: MicroPlumberd.Encryption.SecretObject`1
  langs:
  - csharp
  - vb
  name: Create(T, string)
  nameWithType: SecretObject<T>.Create(T, string)
  fullName: MicroPlumberd.Encryption.SecretObject<T>.Create(T, string)
  type: Method
  source:
    remote:
      path: src/MicroPlumberd.Encryption/SecretObject.cs
      branch: master
      repo: https://github.com/modelingevolution/micro-plumberd.git
    id: Create
    path: src/MicroPlumberd.Encryption/SecretObject.cs
    startLine: 49
  assemblies:
  - MicroPlumberd.Encryption
  namespace: MicroPlumberd.Encryption
  syntax:
    content: public static SecretObject<T> Create(T value, string recipient)
    parameters:
    - id: value
      type: '{T}'
    - id: recipient
      type: System.String
    return:
      type: MicroPlumberd.Encryption.SecretObject`1
    content.vb: Public Shared Function Create(value As T, recipient As String) As SecretObject(Of T)
  overload: MicroPlumberd.Encryption.SecretObject`1.Create*
  nameWithType.vb: SecretObject(Of T).Create(T, String)
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T).Create(T, String)
  name.vb: Create(T, String)
references:
- uid: MicroPlumberd.Encryption
  commentId: N:MicroPlumberd.Encryption
  href: MicroPlumberd.html
  name: MicroPlumberd.Encryption
  nameWithType: MicroPlumberd.Encryption
  fullName: MicroPlumberd.Encryption
  spec.csharp:
  - uid: MicroPlumberd
    name: MicroPlumberd
    href: MicroPlumberd.html
  - name: .
  - uid: MicroPlumberd.Encryption
    name: Encryption
    href: MicroPlumberd.Encryption.html
  spec.vb:
  - uid: MicroPlumberd
    name: MicroPlumberd
    href: MicroPlumberd.html
  - name: .
  - uid: MicroPlumberd.Encryption
    name: Encryption
    href: MicroPlumberd.Encryption.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.IEquatable{MicroPlumberd.Encryption.SecretObject`1}
  commentId: T:System.IEquatable{MicroPlumberd.Encryption.SecretObject`1}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<SecretObject<T>>
  nameWithType: IEquatable<SecretObject<T>>
  fullName: System.IEquatable<MicroPlumberd.Encryption.SecretObject<T>>
  nameWithType.vb: IEquatable(Of SecretObject(Of T))
  fullName.vb: System.IEquatable(Of MicroPlumberd.Encryption.SecretObject(Of T))
  name.vb: IEquatable(Of SecretObject(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: MicroPlumberd.Encryption.SecretObject`1
    name: SecretObject
    href: MicroPlumberd.Encryption.SecretObject-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: MicroPlumberd.Encryption.SecretObject`1
    name: SecretObject
    href: MicroPlumberd.Encryption.SecretObject-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: MicroPlumberd.Encryption.SecretObject`1.op_Implicit*
  commentId: Overload:MicroPlumberd.Encryption.SecretObject`1.op_Implicit
  name: implicit operator
  nameWithType: SecretObject<T>.implicit operator
  fullName: MicroPlumberd.Encryption.SecretObject<T>.implicit operator
  nameWithType.vb: SecretObject(Of T).CType
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: MicroPlumberd.Encryption.SecretObject`1
  commentId: T:MicroPlumberd.Encryption.SecretObject`1
  parent: MicroPlumberd.Encryption
  href: MicroPlumberd.Encryption.SecretObject-1.html
  name: SecretObject<T>
  nameWithType: SecretObject<T>
  fullName: MicroPlumberd.Encryption.SecretObject<T>
  nameWithType.vb: SecretObject(Of T)
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T)
  name.vb: SecretObject(Of T)
  spec.csharp:
  - uid: MicroPlumberd.Encryption.SecretObject`1
    name: SecretObject
    href: MicroPlumberd.Encryption.SecretObject-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: MicroPlumberd.Encryption.SecretObject`1
    name: SecretObject
    href: MicroPlumberd.Encryption.SecretObject-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: MicroPlumberd.Encryption.SecretObject`1.Value*
  commentId: Overload:MicroPlumberd.Encryption.SecretObject`1.Value
  href: MicroPlumberd.Encryption.SecretObject-1.html#MicroPlumberd_Encryption_SecretObject_1_Value
  name: Value
  nameWithType: SecretObject<T>.Value
  fullName: MicroPlumberd.Encryption.SecretObject<T>.Value
  nameWithType.vb: SecretObject(Of T).Value
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T).Value
- uid: MicroPlumberd.Encryption.SecretObject`1.Create*
  commentId: Overload:MicroPlumberd.Encryption.SecretObject`1.Create
  href: MicroPlumberd.Encryption.SecretObject-1.html#MicroPlumberd_Encryption_SecretObject_1_Create__0_System_String_
  name: Create
  nameWithType: SecretObject<T>.Create
  fullName: MicroPlumberd.Encryption.SecretObject<T>.Create
  nameWithType.vb: SecretObject(Of T).Create
  fullName.vb: MicroPlumberd.Encryption.SecretObject(Of T).Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
