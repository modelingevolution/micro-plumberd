{
  "README.html": {
    "href": "README.html",
    "title": "micro-plumberd | MicroPlumberd",
    "keywords": "micro-plumberd Micro library for EventStore, CQRS and EventSourcing Just eXtreamly simple. Getting started Install nugets: dotnet add package MicroPlumberd dotnet add package MicroPlumberd.SourceGeneratiors If you'd like to use direct dotnet-dotnet communication to execute command-handlers install MicroPlumberd.DirectConnect dotnet add package MicroPlumberd.DirectConnect Configure plumber /// change to your connection-string. string connectionString = $\"esdb://admin:changeit@localhost:2113?tls=false&tlsVerifyCert=false\"; var seetings = EventStoreClientSettings.Create(connectionString); var plumber = new Plumber(settings) as IPlumber; Aggregates Write an aggregate. [Aggregate] public partial class FooAggregate(Guid id) : AggregateBase<FooAggregate.FooState>(id) { internal new FooState State => base.State; public record FooState { public string Name { get; set; } }; private static FooState Given(FooState state, FooCreated ev) => state with { Name = ev.Name }; private static FooState Given(FooState state, FooUpdated ev) => state with { Name =ev.Name }; public void Open(string msg) => AppendPendingChange(new FooCreated() { Name = msg }); public void Change(string msg) => AppendPendingChange(new FooUpdated() { Name = msg }); } Comments: State is encapsulated in nested class FooState. Given methods, that are used when loading aggregate from the EventStoreDB are private and static. State is encouraged to be immutable. [Aggregate] attribute is used by SourceGenerator that will generate dispatching code and handy metadata. Consume an aggregate. If you want to create a new aggregate and save it to EventStoreDB: AppSrc.FooAggregate aggregate = AppSrc.FooAggregate.New(Guid.NewGuid()); aggregate.Open(\"Hello\"); await plumber.SaveNew(aggregate); If you want to load aggregate from EventStoreDB, change it and save back to EventStoreDB var aggregate = await plumber.Get<FooAggregate>(\"YOUR_ID\"); aggregate.Change(\"World\"); await plumber.SaveChanges(aggregate); Write a read-model/processor Read-Models [EventHandler] public partial class FooModel { private async Task Given(Metadata m, FooCreated ev) { // your code } private async Task Given(Metadata m, FooUpdated ev) { // your code } } Comments: ReadModels have private async Given methods. Since they are async, you can invoke SQL here, or othere APIs to store your model. Metadata contains standard stuff (Created, CorrelationId, CausationId), but can be reconfigured. var fooModel = new FooModel(); var sub= await plumber.SubscribeModel(fooModel); // or if you want to persist progress of your subscription var sub2= await plumber.SubscribeModelPersistently(fooModel); With SubscribeModel you can subscribe from start, from certain moment or from the end of the stream. Processors [EventHandler] public partial class FooProcessor(IPlumber plumber) { private async Task Given(Metadata m, FooUpdated ev) { var agg = FooAggregate.New(Guid.NewGuid()); agg.Open(ev.Name + \" new\"); await plumber.SaveNew(agg); } } Implementing a processor is technically the same as implementing a read-model, but inside the Given method you would typically invoke a command or execute an aggregate. Features Conventions SteamNameConvention - from aggregate type, and aggregate id EventNameConvention - from aggregate? instance and event instance MetadataConvention - to enrich event with metadata based on aggregate instance and event instance EventIdConvention - from aggregate instance and event instance OutputStreamModelConvention - for output stream name from model-type GroupNameModelConvention - for group name from model-type Ultra development cycle for Read-Models (EF example). Imagine this: You create a read-model that subscribes persistently. You subscribe it with plumber. You changed something in the event and want to see the new model. Instead of re-creating old read-model, you can easily create new one. Just change MODEL_VER to reflect new version. Please note that Sql schema create/drop auto-generation script will be covered in a different article. (For now we leave it for developers.) Comments: By creating a new read-model you can always compare the differences with the previous one. You can leverage canary-deployment strategy and have 2 versions of your system running in parallel. [OutputStream(FooModel.MODEL_NAME)] [EventHandler] public partial class FooModel : DbContext { internal const string MODEL_VER = \"_v1\"; internal const string MODEL_NAME = $\"FooModel{MODEL_VER}\"; protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<FooEntity>() .ToTable($\"FooEntities{MODEL_VER}\"); } private async Task Given(Metadata m, FooCreated ev) { // your code } private async Task Given(Metadata m, FooUpdated ev) { // your code } } Subscription Sets - Models ultra-composition You can easily create a stream that joins events together by event-type. GRPC Direct communication /// Let's configure server: services.AddCommandHandler<FooCommandHandler>().AddServerDirectConnect(); /// Add mapping to direct-connect service app.MapDirectConnect(); Here is an example of a command handler code: [CommandHandler] public partial class FooCommandHandler(IPlumber plumber) { [ThrowsFaultException<BusinessFault>] public async Task Handle(Guid id, CreateFoo cmd) { if (cmd.Name == \"error\") throw new BusinessFaultException(\"Foo\"); var agg = FooAggregate.New(id); agg.Open(cmd.Name); await plumber.SaveNew(agg); } [ThrowsFaultException<BusinessFault>] public async Task<HandlerOperationStatus> Handle(Guid id, ChangeFoo cmd) { if (cmd.Name == \"error\") throw new BusinessFaultException(\"Foo\"); var agg = await plumber.Get<FooAggregate>(id); agg.Change(cmd.Name); await plumber.SaveChanges(agg); return HandlerOperationStatus.Ok(); } } And how on the client side: service.AddClientDirectConnect().AddCommandInvokers(); // And invocation var clientPool = sp.GetRequiredService<IRequestInvokerPool>(); var invoker = clientPool.Get(\"YOUR_GRPC_URL\"); await invoker.Execute(Guid.NewId(), new CreateFoo(){}); Aspects You can easily inject aspects through decorator pattern."
  },
  "api/MicroPlumberd.AggregateAttribute.html": {
    "href": "api/MicroPlumberd.AggregateAttribute.html",
    "title": "Class AggregateAttribute | MicroPlumberd",
    "keywords": "Class AggregateAttribute Namespace MicroPlumberd Assembly MicroPlumberd.dll [AttributeUsage(AttributeTargets.Class)] public class AggregateAttribute : Attribute Inheritance object Attribute AggregateAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MicroPlumberd.AggregateBase-1.html": {
    "href": "api/MicroPlumberd.AggregateBase-1.html",
    "title": "Class AggregateBase<TState> | MicroPlumberd",
    "keywords": "Class AggregateBase<TState> Namespace MicroPlumberd Assembly MicroPlumberd.dll public abstract class AggregateBase<TState> where TState : new() Type Parameters TState Inheritance object AggregateBase<TState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AggregateBase(Guid) protected AggregateBase(Guid id) Parameters id Guid Properties Age public long Age { get; } Property Value long Id public Guid Id { get; } Property Value Guid PendingEvents public IReadOnlyList<object> PendingEvents { get; } Property Value IReadOnlyList<object> State protected TState State { get; } Property Value TState Methods AckCommitted() public void AckCommitted() AppendPendingChange(object) protected void AppendPendingChange(object ev) Parameters ev object Given(TState, object) protected abstract TState Given(TState state, object ev) Parameters state TState ev object Returns TState Rehydrate(IAsyncEnumerable<object>) public Task Rehydrate(IAsyncEnumerable<object> events) Parameters events IAsyncEnumerable<object> Returns Task"
  },
  "api/MicroPlumberd.DirectConnect.CommandEnvelope-1.html": {
    "href": "api/MicroPlumberd.DirectConnect.CommandEnvelope-1.html",
    "title": "Class CommandEnvelope<TCommand> | MicroPlumberd",
    "keywords": "Class CommandEnvelope<TCommand> Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll [ProtoContract] public record CommandEnvelope<TCommand> : IEquatable<CommandEnvelope<TCommand>> where TCommand : ICommand Type Parameters TCommand Inheritance object CommandEnvelope<TCommand> Implements IEquatable<CommandEnvelope<TCommand>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command [ProtoMember(2)] public required TCommand Command { get; init; } Property Value TCommand StreamId [ProtoMember(1)] public Guid StreamId { get; init; } Property Value Guid"
  },
  "api/MicroPlumberd.DirectConnect.CommandHandlerAttribute.html": {
    "href": "api/MicroPlumberd.DirectConnect.CommandHandlerAttribute.html",
    "title": "Class CommandHandlerAttribute | MicroPlumberd",
    "keywords": "Class CommandHandlerAttribute Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll [AttributeUsage(AttributeTargets.Class)] public class CommandHandlerAttribute : Attribute Inheritance object Attribute CommandHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MicroPlumberd.DirectConnect.ContainerExtensions.html": {
    "href": "api/MicroPlumberd.DirectConnect.ContainerExtensions.html",
    "title": "Class ContainerExtensions | MicroPlumberd",
    "keywords": "Class ContainerExtensions Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll public static class ContainerExtensions Inheritance object ContainerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCommandHandler<TCommandHandler>(IServiceCollection) public static IServiceCollection AddCommandHandler<TCommandHandler>(this IServiceCollection services) where TCommandHandler : IApiTypeRegister Parameters services IServiceCollection Returns IServiceCollection Type Parameters TCommandHandler AddCommandInvoker(IServiceCollection, Type) public static IServiceCollection AddCommandInvoker(this IServiceCollection services, Type commandType) Parameters services IServiceCollection commandType Type Returns IServiceCollection AddCommandInvoker<TCommand>(IServiceCollection) public static IServiceCollection AddCommandInvoker<TCommand>(this IServiceCollection services) where TCommand : ICommand Parameters services IServiceCollection Returns IServiceCollection Type Parameters TCommand AddCommandInvokers(IServiceCollection) public static IServiceCollection AddCommandInvokers(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddCommandInvokers(IServiceCollection, IEnumerable<Type>) public static IServiceCollection AddCommandInvokers(this IServiceCollection services, IEnumerable<Type> commandTypes) Parameters services IServiceCollection commandTypes IEnumerable<Type> Returns IServiceCollection AddCommandInvokers(IServiceCollection, params Type[]) public static IServiceCollection AddCommandInvokers(this IServiceCollection services, params Type[] commandTypes) Parameters services IServiceCollection commandTypes Type[] Returns IServiceCollection"
  },
  "api/MicroPlumberd.DirectConnect.HandlerOperationStatus.html": {
    "href": "api/MicroPlumberd.DirectConnect.HandlerOperationStatus.html",
    "title": "Class HandlerOperationStatus | MicroPlumberd",
    "keywords": "Class HandlerOperationStatus Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll [ProtoContract] public class HandlerOperationStatus Inheritance object HandlerOperationStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code [ProtoMember(1)] public HttpStatusCode Code { get; init; } Property Value HttpStatusCode Methods Ok() public static HandlerOperationStatus Ok() Returns HandlerOperationStatus"
  },
  "api/MicroPlumberd.DirectConnect.IApiTypeRegister.html": {
    "href": "api/MicroPlumberd.DirectConnect.IApiTypeRegister.html",
    "title": "Interface IApiTypeRegister | MicroPlumberd",
    "keywords": "Interface IApiTypeRegister Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll public interface IApiTypeRegister Properties CommandTypes public static abstract IEnumerable<Type> CommandTypes { get; } Property Value IEnumerable<Type> FaultTypes public static abstract IEnumerable<Type> FaultTypes { get; } Property Value IEnumerable<Type> ReturnTypes public static abstract IEnumerable<Type> ReturnTypes { get; } Property Value IEnumerable<Type> Methods RegisterHandlers(IServiceCollection) public static abstract IServiceCollection RegisterHandlers(IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/MicroPlumberd.DirectConnect.ICommand.html": {
    "href": "api/MicroPlumberd.DirectConnect.ICommand.html",
    "title": "Interface ICommand | MicroPlumberd",
    "keywords": "Interface ICommand Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll public interface ICommand Properties Id Guid Id { get; } Property Value Guid"
  },
  "api/MicroPlumberd.DirectConnect.ICommandHandler-1.html": {
    "href": "api/MicroPlumberd.DirectConnect.ICommandHandler-1.html",
    "title": "Interface ICommandHandler<TCommand> | MicroPlumberd",
    "keywords": "Interface ICommandHandler<TCommand> Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll public interface ICommandHandler<in TCommand> where TCommand : ICommand Type Parameters TCommand Methods Execute(Guid, TCommand) Task<object> Execute(Guid id, TCommand command) Parameters id Guid command TCommand Returns Task<object>"
  },
  "api/MicroPlumberd.DirectConnect.RequestInvokerExtensions.html": {
    "href": "api/MicroPlumberd.DirectConnect.RequestInvokerExtensions.html",
    "title": "Class RequestInvokerExtensions | MicroPlumberd",
    "keywords": "Class RequestInvokerExtensions Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll public static class RequestInvokerExtensions Inheritance object RequestInvokerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IRequestInvoker, Guid, ICommand) public static Task Execute(this IRequestInvoker ri, Guid id, ICommand c) Parameters ri IRequestInvoker id Guid c ICommand Returns Task Execute<TResponse>(IRequestInvoker, Guid, ICommand) public static Task<TResponse> Execute<TResponse>(this IRequestInvoker ri, Guid id, ICommand c) Parameters ri IRequestInvoker id Guid c ICommand Returns Task<TResponse> Type Parameters TResponse"
  },
  "api/MicroPlumberd.DirectConnect.ReturnsAttribute-1.html": {
    "href": "api/MicroPlumberd.DirectConnect.ReturnsAttribute-1.html",
    "title": "Class ReturnsAttribute<TResult> | MicroPlumberd",
    "keywords": "Class ReturnsAttribute<TResult> Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll [AttributeUsage(AttributeTargets.Class)] public class ReturnsAttribute<TResult> : ReturnsAttribute Type Parameters TResult Inheritance object Attribute ReturnsAttribute ReturnsAttribute<TResult> Inherited Members ReturnsAttribute.ReturnType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReturnsAttribute() public ReturnsAttribute()"
  },
  "api/MicroPlumberd.DirectConnect.ReturnsAttribute.html": {
    "href": "api/MicroPlumberd.DirectConnect.ReturnsAttribute.html",
    "title": "Class ReturnsAttribute | MicroPlumberd",
    "keywords": "Class ReturnsAttribute Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll public abstract class ReturnsAttribute : Attribute Inheritance object Attribute ReturnsAttribute Derived ReturnsAttribute<TResult> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReturnsAttribute(Type) protected ReturnsAttribute(Type returnType) Parameters returnType Type Properties ReturnType public Type ReturnType { get; init; } Property Value Type"
  },
  "api/MicroPlumberd.DirectConnect.ThrowsFaultExceptionAttribute-1.html": {
    "href": "api/MicroPlumberd.DirectConnect.ThrowsFaultExceptionAttribute-1.html",
    "title": "Class ThrowsFaultExceptionAttribute<TMessage> | MicroPlumberd",
    "keywords": "Class ThrowsFaultExceptionAttribute<TMessage> Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class ThrowsFaultExceptionAttribute<TMessage> : ThrowsFaultExceptionAttribute Type Parameters TMessage Inheritance object Attribute ThrowsFaultExceptionAttribute ThrowsFaultExceptionAttribute<TMessage> Inherited Members ThrowsFaultExceptionAttribute.ThrownType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ThrowsFaultExceptionAttribute() public ThrowsFaultExceptionAttribute()"
  },
  "api/MicroPlumberd.DirectConnect.ThrowsFaultExceptionAttribute.html": {
    "href": "api/MicroPlumberd.DirectConnect.ThrowsFaultExceptionAttribute.html",
    "title": "Class ThrowsFaultExceptionAttribute | MicroPlumberd",
    "keywords": "Class ThrowsFaultExceptionAttribute Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.DirectConnect.dll public abstract class ThrowsFaultExceptionAttribute : Attribute Inheritance object Attribute ThrowsFaultExceptionAttribute Derived ThrowsFaultExceptionAttribute<TMessage> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ThrowsFaultExceptionAttribute(Type) protected ThrowsFaultExceptionAttribute(Type thrownType) Parameters thrownType Type Properties ThrownType public Type ThrownType { get; init; } Property Value Type"
  },
  "api/MicroPlumberd.DirectConnect.html": {
    "href": "api/MicroPlumberd.DirectConnect.html",
    "title": "Namespace MicroPlumberd.DirectConnect | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.DirectConnect Classes CommandEnvelope<TCommand> CommandHandlerAttribute ContainerExtensions HandlerOperationStatus RequestInvokerExtensions ReturnsAttribute ReturnsAttribute<TResult> ThrowsFaultExceptionAttribute ThrowsFaultExceptionAttribute<TMessage> Interfaces IApiTypeRegister ICommand ICommandHandler<TCommand>"
  },
  "api/MicroPlumberd.EventHandlerAttribute.html": {
    "href": "api/MicroPlumberd.EventHandlerAttribute.html",
    "title": "Class EventHandlerAttribute | MicroPlumberd",
    "keywords": "Class EventHandlerAttribute Namespace MicroPlumberd Assembly MicroPlumberd.dll [AttributeUsage(AttributeTargets.Class)] public class EventHandlerAttribute : Attribute Inheritance object Attribute EventHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MicroPlumberd.EventIdConvention.html": {
    "href": "api/MicroPlumberd.EventIdConvention.html",
    "title": "Delegate EventIdConvention | MicroPlumberd",
    "keywords": "Delegate EventIdConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate Uuid EventIdConvention(IAggregate? aggregator, object evt) Parameters aggregator IAggregate evt object Returns Uuid"
  },
  "api/MicroPlumberd.EventNameConvention.html": {
    "href": "api/MicroPlumberd.EventNameConvention.html",
    "title": "Delegate EventNameConvention | MicroPlumberd",
    "keywords": "Delegate EventNameConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate string EventNameConvention(IAggregate? aggregate, object evt) Parameters aggregate IAggregate evt object Returns string"
  },
  "api/MicroPlumberd.EventStoreProjectionManagementClientExtensions.html": {
    "href": "api/MicroPlumberd.EventStoreProjectionManagementClientExtensions.html",
    "title": "Class EventStoreProjectionManagementClientExtensions | MicroPlumberd",
    "keywords": "Class EventStoreProjectionManagementClientExtensions Namespace MicroPlumberd Assembly MicroPlumberd.dll public static class EventStoreProjectionManagementClientExtensions Inheritance object EventStoreProjectionManagementClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnsureJoinProjection(EventStoreProjectionManagementClient, string, IProjectionRegister, IEnumerable<string>) public static Task EnsureJoinProjection(this EventStoreProjectionManagementClient client, string outputStream, IProjectionRegister register, IEnumerable<string> eventTypes) Parameters client EventStoreProjectionManagementClient outputStream string register IProjectionRegister eventTypes IEnumerable<string> Returns Task EnsureJoinProjection(EventStoreProjectionManagementClient, string, IEnumerable<string>) public static Task EnsureJoinProjection(this EventStoreProjectionManagementClient client, string outputStream, IEnumerable<string> eventTypes) Parameters client EventStoreProjectionManagementClient outputStream string eventTypes IEnumerable<string> Returns Task"
  },
  "api/MicroPlumberd.GroupNameModelConvention.html": {
    "href": "api/MicroPlumberd.GroupNameModelConvention.html",
    "title": "Delegate GroupNameModelConvention | MicroPlumberd",
    "keywords": "Delegate GroupNameModelConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate string GroupNameModelConvention(Type model) Parameters model Type Returns string"
  },
  "api/MicroPlumberd.IAggregate-1.html": {
    "href": "api/MicroPlumberd.IAggregate-1.html",
    "title": "Interface IAggregate<TSelf> | MicroPlumberd",
    "keywords": "Interface IAggregate<TSelf> Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IAggregate<out TSelf> : IAggregate Type Parameters TSelf Inherited Members IAggregate.Id IAggregate.Age IAggregate.PendingEvents IAggregate.Rehydrate(IAsyncEnumerable<object>) IAggregate.AckCommitted() Methods New(Guid) public static abstract TSelf New(Guid id) Parameters id Guid Returns TSelf"
  },
  "api/MicroPlumberd.IAggregate.html": {
    "href": "api/MicroPlumberd.IAggregate.html",
    "title": "Interface IAggregate | MicroPlumberd",
    "keywords": "Interface IAggregate Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IAggregate Properties Age long Age { get; } Property Value long Id Guid Id { get; } Property Value Guid PendingEvents IReadOnlyList<object> PendingEvents { get; } Property Value IReadOnlyList<object> Methods AckCommitted() void AckCommitted() Rehydrate(IAsyncEnumerable<object>) Task Rehydrate(IAsyncEnumerable<object> events) Parameters events IAsyncEnumerable<object> Returns Task"
  },
  "api/MicroPlumberd.IConventions.html": {
    "href": "api/MicroPlumberd.IConventions.html",
    "title": "Interface IConventions | MicroPlumberd",
    "keywords": "Interface IConventions Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IConventions Properties GetEventIdConvention EventIdConvention GetEventIdConvention { get; set; } Property Value EventIdConvention GetEventNameConvention EventNameConvention GetEventNameConvention { get; set; } Property Value EventNameConvention GetStreamIdConvention SteamNameConvention GetStreamIdConvention { get; set; } Property Value SteamNameConvention GroupNameModelConvention GroupNameModelConvention GroupNameModelConvention { get; set; } Property Value GroupNameModelConvention MetadataEnrichers MetadataConvention? MetadataEnrichers { get; set; } Property Value MetadataConvention OutputStreamModelConvention OutputStreamModelConvention OutputStreamModelConvention { get; set; } Property Value OutputStreamModelConvention Methods GetMetadata(IAggregate?, object, object?) object GetMetadata(IAggregate? aggregate, object evt, object? metadata) Parameters aggregate IAggregate evt object metadata object Returns object"
  },
  "api/MicroPlumberd.IObjectSerializer.html": {
    "href": "api/MicroPlumberd.IObjectSerializer.html",
    "title": "Interface IObjectSerializer | MicroPlumberd",
    "keywords": "Interface IObjectSerializer Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IObjectSerializer Methods Deserialize(ReadOnlySpan<byte>, Type) object? Deserialize(ReadOnlySpan<byte> span, Type t) Parameters span ReadOnlySpan<byte> t Type Returns object Parse(ReadOnlySpan<byte>) JsonElement Parse(ReadOnlySpan<byte> span) Parameters span ReadOnlySpan<byte> Returns JsonElement SerializeToUtf8Bytes(object?) byte[] SerializeToUtf8Bytes(object? t) Parameters t object Returns byte[]"
  },
  "api/MicroPlumberd.IPlumber.html": {
    "href": "api/MicroPlumberd.IPlumber.html",
    "title": "Interface IPlumber | MicroPlumberd",
    "keywords": "Interface IPlumber Namespace MicroPlumberd Assembly MicroPlumberd.dll Root interface for plumber public interface IPlumber Methods AppendEvents(string, StreamRevision, IEnumerable<object>, object?) Appends event to a stream, uses relevant convention, however aggregate-type or instance are passed as null to conventions. Task AppendEvents(string streamId, StreamRevision rev, IEnumerable<object> events, object? metadata = null) Parameters streamId string rev StreamRevision events IEnumerable<object> metadata object Returns Task AppendEvents(string, StreamState, IEnumerable<object>, object?) Task AppendEvents(string streamId, StreamState state, IEnumerable<object> events, object? metadata = null) Parameters streamId string state StreamState events IEnumerable<object> metadata object Returns Task Get<T>(Guid) Task<T> Get<T>(Guid id) where T : IAggregate<T>, ITypeRegister Parameters id Guid Returns Task<T> Type Parameters T SaveChanges<T>(T, object?) Task SaveChanges<T>(T aggregate, object? metadata = null) where T : IAggregate<T> Parameters aggregate T metadata object Returns Task Type Parameters T SaveNew<T>(T, object?) Task SaveNew<T>(T aggregate, object? metadata = null) where T : IAggregate<T> Parameters aggregate T metadata object Returns Task Type Parameters T Subscribe(string, FromStream, UserCredentials?, CancellationToken) ISubscriptionRunner Subscribe(string streamName, FromStream start, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string start FromStream userCredentials UserCredentials cancellationToken CancellationToken Returns ISubscriptionRunner SubscribeModelPersistently<TModel>(TModel) Task<IAsyncDisposable> SubscribeModelPersistently<TModel>(TModel model) where TModel : IReadModel, ITypeRegister Parameters model TModel Returns Task<IAsyncDisposable> Type Parameters TModel SubscribeModel<TModel>(TModel, FromStream?) Task<IAsyncDisposable> SubscribeModel<TModel>(TModel model, FromStream? start = null) where TModel : IReadModel, ITypeRegister Parameters model TModel start FromStream? Returns Task<IAsyncDisposable> Type Parameters TModel SubscribePersistently(string, string, int, UserCredentials?, CancellationToken) ISubscriptionRunner SubscribePersistently(string streamName, string groupName, int bufferSize = 10, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string groupName string bufferSize int userCredentials UserCredentials cancellationToken CancellationToken Returns ISubscriptionRunner SubscribeSet() ISubscriptionSet SubscribeSet() Returns ISubscriptionSet"
  },
  "api/MicroPlumberd.IProjectionRegister.html": {
    "href": "api/MicroPlumberd.IProjectionRegister.html",
    "title": "Interface IProjectionRegister | MicroPlumberd",
    "keywords": "Interface IProjectionRegister Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IProjectionRegister Methods Get(string) Task<ProjectionDetails?> Get(string name) Parameters name string Returns Task<ProjectionDetails>"
  },
  "api/MicroPlumberd.IReadModel.html": {
    "href": "api/MicroPlumberd.IReadModel.html",
    "title": "Interface IReadModel | MicroPlumberd",
    "keywords": "Interface IReadModel Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IReadModel Methods Given(Metadata, object) Task Given(Metadata m, object ev) Parameters m Metadata ev object Returns Task"
  },
  "api/MicroPlumberd.ISubscriptionRunner.html": {
    "href": "api/MicroPlumberd.ISubscriptionRunner.html",
    "title": "Interface ISubscriptionRunner | MicroPlumberd",
    "keywords": "Interface ISubscriptionRunner Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface ISubscriptionRunner : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Methods WithModel<T>(T) Task WithModel<T>(T model) where T : IReadModel, ITypeRegister Parameters model T Returns Task Type Parameters T"
  },
  "api/MicroPlumberd.ISubscriptionSet.html": {
    "href": "api/MicroPlumberd.ISubscriptionSet.html",
    "title": "Interface ISubscriptionSet | MicroPlumberd",
    "keywords": "Interface ISubscriptionSet Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface ISubscriptionSet Methods SubscribeAsync(string, FromStream) Task SubscribeAsync(string name, FromStream start) Parameters name string start FromStream Returns Task SubscribePersistentlyAsync(string, string?) Task SubscribePersistentlyAsync(string outputStream, string? groupName = null) Parameters outputStream string groupName string Returns Task With<TModel>(TModel) ISubscriptionSet With<TModel>(TModel model) where TModel : IReadModel, ITypeRegister Parameters model TModel Returns ISubscriptionSet Type Parameters TModel"
  },
  "api/MicroPlumberd.ITypeRegister.html": {
    "href": "api/MicroPlumberd.ITypeRegister.html",
    "title": "Interface ITypeRegister | MicroPlumberd",
    "keywords": "Interface ITypeRegister Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface ITypeRegister Properties TypeRegister public static abstract IDictionary<string, Type> TypeRegister { get; } Property Value IDictionary<string, Type>"
  },
  "api/MicroPlumberd.InvocationContext.html": {
    "href": "api/MicroPlumberd.InvocationContext.html",
    "title": "Class InvocationContext | MicroPlumberd",
    "keywords": "Class InvocationContext Namespace MicroPlumberd Assembly MicroPlumberd.dll public class InvocationContext Inheritance object InvocationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current public static InvocationContext Current { get; } Property Value InvocationContext Value public dynamic Value { get; } Property Value dynamic Methods Clear() public void Clear() ClearCorrelation() public void ClearCorrelation() ContainsProperty(string) public bool ContainsProperty(string propertyName) Parameters propertyName string Returns bool Set(string, object) public InvocationContext Set(string key, object value) Parameters key string value object Returns InvocationContext SetCausation(Guid) public InvocationContext SetCausation(Guid causationId) Parameters causationId Guid Returns InvocationContext SetCorrelation(Guid) public InvocationContext SetCorrelation(Guid correlationId) Parameters correlationId Guid Returns InvocationContext SetUserId(Guid) public InvocationContext SetUserId(Guid userId) Parameters userId Guid Returns InvocationContext"
  },
  "api/MicroPlumberd.InvocationScope.html": {
    "href": "api/MicroPlumberd.InvocationScope.html",
    "title": "Class InvocationScope | MicroPlumberd",
    "keywords": "Class InvocationScope Namespace MicroPlumberd Assembly MicroPlumberd.dll public class InvocationScope : IDisposable Inheritance object InvocationScope Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Context public InvocationContext Context { get; } Property Value InvocationContext Methods ContainsProperty(string) public bool ContainsProperty(string propertyName) Parameters propertyName string Returns bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Set(string, object) public InvocationContext Set(string key, object value) Parameters key string value object Returns InvocationContext SetCausation(Guid) public InvocationContext SetCausation(Guid causationId) Parameters causationId Guid Returns InvocationContext SetCorrelation(Guid) public InvocationContext SetCorrelation(Guid correlationId) Parameters correlationId Guid Returns InvocationContext SetUserId(Guid) public InvocationContext SetUserId(Guid userId) Parameters userId Guid Returns InvocationContext"
  },
  "api/MicroPlumberd.Metadata.html": {
    "href": "api/MicroPlumberd.Metadata.html",
    "title": "Struct Metadata | MicroPlumberd",
    "keywords": "Struct Metadata Namespace MicroPlumberd Assembly MicroPlumberd.dll public readonly struct Metadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods MetadataExtensions.CorrelationId(Metadata) Constructors Metadata(Guid, JsonElement) public Metadata(Guid id, JsonElement data) Parameters id Guid data JsonElement Properties Data public JsonElement Data { get; } Property Value JsonElement Id public Guid Id { get; } Property Value Guid"
  },
  "api/MicroPlumberd.MetadataConvention.html": {
    "href": "api/MicroPlumberd.MetadataConvention.html",
    "title": "Delegate MetadataConvention | MicroPlumberd",
    "keywords": "Delegate MetadataConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate void MetadataConvention(dynamic metadata, IAggregate? aggregate, object evt) Parameters metadata dynamic aggregate IAggregate evt object"
  },
  "api/MicroPlumberd.MetadataExtensions.html": {
    "href": "api/MicroPlumberd.MetadataExtensions.html",
    "title": "Class MetadataExtensions | MicroPlumberd",
    "keywords": "Class MetadataExtensions Namespace MicroPlumberd Assembly MicroPlumberd.dll public static class MetadataExtensions Inheritance object MetadataExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CorrelationId(Metadata) public static Guid? CorrelationId(this Metadata m) Parameters m Metadata Returns Guid?"
  },
  "api/MicroPlumberd.OutputStreamAttribute.html": {
    "href": "api/MicroPlumberd.OutputStreamAttribute.html",
    "title": "Class OutputStreamAttribute | MicroPlumberd",
    "keywords": "Class OutputStreamAttribute Namespace MicroPlumberd Assembly MicroPlumberd.dll [AttributeUsage(AttributeTargets.Class)] public class OutputStreamAttribute : Attribute Inheritance object Attribute OutputStreamAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OutputStreamAttribute(string) public OutputStreamAttribute(string outputStreamName) Parameters outputStreamName string Properties OutputStreamName public string OutputStreamName { get; } Property Value string"
  },
  "api/MicroPlumberd.OutputStreamModelConvention.html": {
    "href": "api/MicroPlumberd.OutputStreamModelConvention.html",
    "title": "Delegate OutputStreamModelConvention | MicroPlumberd",
    "keywords": "Delegate OutputStreamModelConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate string OutputStreamModelConvention(Type model) Parameters model Type Returns string"
  },
  "api/MicroPlumberd.Plumber.html": {
    "href": "api/MicroPlumberd.Plumber.html",
    "title": "Class Plumber | MicroPlumberd",
    "keywords": "Class Plumber Namespace MicroPlumberd Assembly MicroPlumberd.dll public class Plumber : IPlumber Inheritance object Plumber Implements IPlumber Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Plumber(EventStoreClientSettings) public Plumber(EventStoreClientSettings settings) Parameters settings EventStoreClientSettings Properties Client public EventStoreClient Client { get; } Property Value EventStoreClient Conventions public IConventions Conventions { get; } Property Value IConventions PersistentSubscriptionClient public EventStorePersistentSubscriptionsClient PersistentSubscriptionClient { get; } Property Value EventStorePersistentSubscriptionsClient ProjectionManagementClient public EventStoreProjectionManagementClient ProjectionManagementClient { get; } Property Value EventStoreProjectionManagementClient ProjectionRegister public IProjectionRegister ProjectionRegister { get; } Property Value IProjectionRegister Serializer public IObjectSerializer Serializer { get; set; } Property Value IObjectSerializer Methods AppendEvents(string, StreamRevision, IEnumerable<object>, object?) Appends event to a stream, uses relevant convention, however aggregate-type or instance are passed as null to conventions. public Task AppendEvents(string streamId, StreamRevision rev, IEnumerable<object> events, object? metadata = null) Parameters streamId string rev StreamRevision events IEnumerable<object> metadata object Returns Task AppendEvents(string, StreamState, IEnumerable<object>, object?) public Task AppendEvents(string streamId, StreamState state, IEnumerable<object> events, object? metadata = null) Parameters streamId string state StreamState events IEnumerable<object> metadata object Returns Task Get<T>(Guid) public Task<T> Get<T>(Guid id) where T : IAggregate<T>, ITypeRegister Parameters id Guid Returns Task<T> Type Parameters T SaveChanges<T>(T, object?) public Task SaveChanges<T>(T aggregate, object? metadata = null) where T : IAggregate<T> Parameters aggregate T metadata object Returns Task Type Parameters T SaveNew<T>(T, object?) public Task SaveNew<T>(T aggregate, object? metadata = null) where T : IAggregate<T> Parameters aggregate T metadata object Returns Task Type Parameters T Subscribe(string, FromStream, UserCredentials?, CancellationToken) public ISubscriptionRunner Subscribe(string streamName, FromStream start, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string start FromStream userCredentials UserCredentials cancellationToken CancellationToken Returns ISubscriptionRunner SubscribeModelPersistently<TModel>(TModel) public Task<IAsyncDisposable> SubscribeModelPersistently<TModel>(TModel model) where TModel : IReadModel, ITypeRegister Parameters model TModel Returns Task<IAsyncDisposable> Type Parameters TModel SubscribeModel<TModel>(TModel, FromStream?) public Task<IAsyncDisposable> SubscribeModel<TModel>(TModel model, FromStream? start = null) where TModel : IReadModel, ITypeRegister Parameters model TModel start FromStream? Returns Task<IAsyncDisposable> Type Parameters TModel SubscribePersistently(string, string, int, UserCredentials?, CancellationToken) public ISubscriptionRunner SubscribePersistently(string streamName, string groupName, int bufferSize = 10, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string groupName string bufferSize int userCredentials UserCredentials cancellationToken CancellationToken Returns ISubscriptionRunner SubscribeSet() public ISubscriptionSet SubscribeSet() Returns ISubscriptionSet"
  },
  "api/MicroPlumberd.SourceGenerators.AggregateSourceGenerator.html": {
    "href": "api/MicroPlumberd.SourceGenerators.AggregateSourceGenerator.html",
    "title": "Class AggregateSourceGenerator | MicroPlumberd",
    "keywords": "Class AggregateSourceGenerator Namespace MicroPlumberd.SourceGenerators Assembly MicroPlumberd.SourceGenerators.dll [Generator] public class AggregateSourceGenerator : ISourceGenerator Inheritance object AggregateSourceGenerator Implements ISourceGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(GeneratorExecutionContext) Called to perform source generation. A generator can use the context to add source files via the AddSource(string, SourceText) method. public void Execute(GeneratorExecutionContext context) Parameters context GeneratorExecutionContext The GeneratorExecutionContext to add source to Remarks This call represents the main generation step. It is called after a Compilation is created that contains the user written code. A generator can use the Compilation property to discover information about the users compilation and make decisions on what source to provide. Initialize(GeneratorInitializationContext) Called before generation occurs. A generator can use the context to register callbacks required to perform generation. public void Initialize(GeneratorInitializationContext context) Parameters context GeneratorInitializationContext The GeneratorInitializationContext to register callbacks on"
  },
  "api/MicroPlumberd.SourceGenerators.CommandHandlerSourceGenerator.html": {
    "href": "api/MicroPlumberd.SourceGenerators.CommandHandlerSourceGenerator.html",
    "title": "Class CommandHandlerSourceGenerator | MicroPlumberd",
    "keywords": "Class CommandHandlerSourceGenerator Namespace MicroPlumberd.SourceGenerators Assembly MicroPlumberd.SourceGenerators.dll [Generator] public class CommandHandlerSourceGenerator : ISourceGenerator Inheritance object CommandHandlerSourceGenerator Implements ISourceGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(GeneratorExecutionContext) Called to perform source generation. A generator can use the context to add source files via the AddSource(string, SourceText) method. public void Execute(GeneratorExecutionContext context) Parameters context GeneratorExecutionContext The GeneratorExecutionContext to add source to Remarks This call represents the main generation step. It is called after a Compilation is created that contains the user written code. A generator can use the Compilation property to discover information about the users compilation and make decisions on what source to provide. Initialize(GeneratorInitializationContext) Called before generation occurs. A generator can use the context to register callbacks required to perform generation. public void Initialize(GeneratorInitializationContext context) Parameters context GeneratorInitializationContext The GeneratorInitializationContext to register callbacks on"
  },
  "api/MicroPlumberd.SourceGenerators.EventHandlerSourceGenerator.html": {
    "href": "api/MicroPlumberd.SourceGenerators.EventHandlerSourceGenerator.html",
    "title": "Class EventHandlerSourceGenerator | MicroPlumberd",
    "keywords": "Class EventHandlerSourceGenerator Namespace MicroPlumberd.SourceGenerators Assembly MicroPlumberd.SourceGenerators.dll [Generator] public class EventHandlerSourceGenerator : ISourceGenerator Inheritance object EventHandlerSourceGenerator Implements ISourceGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(GeneratorExecutionContext) Called to perform source generation. A generator can use the context to add source files via the AddSource(string, SourceText) method. public void Execute(GeneratorExecutionContext context) Parameters context GeneratorExecutionContext The GeneratorExecutionContext to add source to Remarks This call represents the main generation step. It is called after a Compilation is created that contains the user written code. A generator can use the Compilation property to discover information about the users compilation and make decisions on what source to provide. Initialize(GeneratorInitializationContext) Called before generation occurs. A generator can use the context to register callbacks required to perform generation. public void Initialize(GeneratorInitializationContext context) Parameters context GeneratorInitializationContext The GeneratorInitializationContext to register callbacks on"
  },
  "api/MicroPlumberd.SourceGenerators.html": {
    "href": "api/MicroPlumberd.SourceGenerators.html",
    "title": "Namespace MicroPlumberd.SourceGenerators | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.SourceGenerators Classes AggregateSourceGenerator CommandHandlerSourceGenerator EventHandlerSourceGenerator"
  },
  "api/MicroPlumberd.StandardMetadataEnricherTypes.html": {
    "href": "api/MicroPlumberd.StandardMetadataEnricherTypes.html",
    "title": "Enum StandardMetadataEnricherTypes | MicroPlumberd",
    "keywords": "Enum StandardMetadataEnricherTypes Namespace MicroPlumberd Assembly MicroPlumberd.dll [Flags] public enum StandardMetadataEnricherTypes Fields All = Created | InvocationContext Created = 1 InvocationContext = 2"
  },
  "api/MicroPlumberd.SteamNameConvention.html": {
    "href": "api/MicroPlumberd.SteamNameConvention.html",
    "title": "Delegate SteamNameConvention | MicroPlumberd",
    "keywords": "Delegate SteamNameConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate string SteamNameConvention(Type aggregateType, Guid aggregateId) Parameters aggregateType Type aggregateId Guid Returns string"
  },
  "api/MicroPlumberd.html": {
    "href": "api/MicroPlumberd.html",
    "title": "Namespace MicroPlumberd | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd Classes AggregateAttribute AggregateBase<TState> EventHandlerAttribute EventStoreProjectionManagementClientExtensions InvocationContext InvocationScope MetadataExtensions OutputStreamAttribute Plumber Structs Metadata Interfaces IAggregate IAggregate<TSelf> IConventions IObjectSerializer IPlumber Root interface for plumber IProjectionRegister IReadModel ISubscriptionRunner ISubscriptionSet ITypeRegister Enums StandardMetadataEnricherTypes Delegates EventIdConvention EventNameConvention GroupNameModelConvention MetadataConvention OutputStreamModelConvention SteamNameConvention"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | MicroPlumberd",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | MicroPlumberd",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | MicroPlumberd",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}