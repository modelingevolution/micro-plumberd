{
  "api/MicroPlumberd.AcceptedTypeAttribute.html": {
    "href": "api/MicroPlumberd.AcceptedTypeAttribute.html",
    "title": "Class AcceptedTypeAttribute | MicroPlumberd",
    "keywords": "Class AcceptedTypeAttribute Namespace MicroPlumberd Assembly MicroPlumberd.dll Attribute used to decorate dispatching method to list possible concrete types. It is when code gets generated by source generators. [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = true)] public class AcceptedTypeAttribute : Attribute Inheritance object Attribute AcceptedTypeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AcceptedTypeAttribute(Type) public AcceptedTypeAttribute(Type acceptedType) Parameters acceptedType Type Properties AcceptedType Gets or sets the accepted type of dispatching method. public Type AcceptedType { get; init; } Property Value Type The type that is accepted by dispatching method. See Also Attribute"
  },
  "api/MicroPlumberd.AggregateAttribute.html": {
    "href": "api/MicroPlumberd.AggregateAttribute.html",
    "title": "Class AggregateAttribute | MicroPlumberd",
    "keywords": "Class AggregateAttribute Namespace MicroPlumberd Assembly MicroPlumberd.dll Attribute that is used on aggregates. When a class is marked with this attribute, source generators will generate partial class that contains all boring dispatching code and metadata for plumberd to do its job. [AttributeUsage(AttributeTargets.Class)] public class AggregateAttribute : Attribute Inheritance object Attribute AggregateAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SnaphotPolicy public Type? SnaphotPolicy { get; set; } Property Value Type SnapshotAfter Gets or sets the time from last snapshots (in seconds) before a new one is performed. public long SnapshotAfter { get; set; } Property Value long SnapshotEvery Gets or sets the number of events from the last snapshot before a new one is performed. public int SnapshotEvery { get; set; } Property Value int The snapshot every. See Also Attribute"
  },
  "api/MicroPlumberd.AggregateBase-1.html": {
    "href": "api/MicroPlumberd.AggregateBase-1.html",
    "title": "Class AggregateBase<TState> | MicroPlumberd",
    "keywords": "Class AggregateBase<TState> Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents the base class for aggregate roots in the application. public abstract class AggregateBase<TState> : IVersioned, IId, IStatefull<TState>, IStatefull where TState : new() Type Parameters TState The type of the aggregate state. Inheritance object AggregateBase<TState> Implements IVersioned IId IStatefull<TState> IStatefull Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AggregateBase(Guid) Represents the base class for aggregate roots in the application. protected AggregateBase(Guid id) Parameters id Guid Properties Id Gets the unique identifier of the aggregate. public Guid Id { get; } Property Value Guid PendingEvents Gets or sets the list of pending events for the aggregate. public IReadOnlyList<object> PendingEvents { get; } Property Value IReadOnlyList<object> State Gets the state of the aggregate. protected TState State { get; } Property Value TState Version Gets the version of the aggregate. public long Version { get; } Property Value long Methods AckCommitted() Acknowledges the committed events and clears the pending events. public void AckCommitted() AppendPendingChange(object) Appends a pending change to the list of pending events and applies the change. protected void AppendPendingChange(object ev) Parameters ev object The pending change to append. Given(TState, object) Dispatches event to create a new state. protected abstract TState Given(TState state, object ev) Parameters state TState ev object Returns TState Rehydrate(IAsyncEnumerable<object>) Rehydrates the aggregate by applying a sequence of events. public Task Rehydrate(IAsyncEnumerable<object> events) Parameters events IAsyncEnumerable<object> The sequence of events to apply. Returns Task A task representing the asynchronous operation."
  },
  "api/MicroPlumberd.AggregateBase-2.html": {
    "href": "api/MicroPlumberd.AggregateBase-2.html",
    "title": "Class AggregateBase<TId, TState> | MicroPlumberd",
    "keywords": "Class AggregateBase<TId, TState> Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents the base class for aggregate roots in the application. public abstract class AggregateBase<TId, TState> : IVersioned, IId<TId>, IId, IStatefull<TState>, IStatefull where TId : IParsable<TId> where TState : new() Type Parameters TId TState The type of the aggregate state. Inheritance object AggregateBase<TId, TState> Implements IVersioned IId<TId> IId IStatefull<TState> IStatefull Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AggregateBase(TId) Represents the base class for aggregate roots in the application. protected AggregateBase(TId id) Parameters id TId Properties Id Gets the unique identifier of the aggregate. public TId Id { get; } Property Value TId PendingEvents Gets or sets the list of pending events for the aggregate. public IReadOnlyList<object> PendingEvents { get; } Property Value IReadOnlyList<object> State Gets the state of the aggregate. protected TState State { get; } Property Value TState Version Gets the version of the aggregate. public long Version { get; } Property Value long Methods AckCommitted() Acknowledges the committed events and clears the pending events. public void AckCommitted() AppendPendingChange(object) Appends a pending change to the list of pending events and applies the change. protected void AppendPendingChange(object ev) Parameters ev object The pending change to append. Given(TState, object) Dispatches event to create a new state. protected abstract TState Given(TState state, object ev) Parameters state TState ev object Returns TState Rehydrate(IAsyncEnumerable<object>) Rehydrates the aggregate by applying a sequence of events. public Task Rehydrate(IAsyncEnumerable<object> events) Parameters events IAsyncEnumerable<object> The sequence of events to apply. Returns Task A task representing the asynchronous operation."
  },
  "api/MicroPlumberd.AsyncLazy-1.html": {
    "href": "api/MicroPlumberd.AsyncLazy-1.html",
    "title": "Class AsyncLazy<T> | MicroPlumberd",
    "keywords": "Class AsyncLazy<T> Namespace MicroPlumberd Assembly MicroPlumberd.dll public class AsyncLazy<T> : Lazy<Task<T>> Type Parameters T Inheritance object Lazy<Task<T>> AsyncLazy<T> Inherited Members Lazy<Task<T>>.ToString() Lazy<Task<T>>.IsValueCreated Lazy<Task<T>>.Value object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AsyncLazy(Func<Task<T>>) public AsyncLazy(Func<Task<T>> taskFactory) Parameters taskFactory Func<Task<T>> AsyncLazy(Func<T>) public AsyncLazy(Func<T> valueFactory) Parameters valueFactory Func<T> Methods GetAwaiter() public TaskAwaiter<T> GetAwaiter() Returns TaskAwaiter<T>"
  },
  "api/MicroPlumberd.AttributeSnaphotPolicy-1.html": {
    "href": "api/MicroPlumberd.AttributeSnaphotPolicy-1.html",
    "title": "Class AttributeSnaphotPolicy<T> | MicroPlumberd",
    "keywords": "Class AttributeSnaphotPolicy<T> Namespace MicroPlumberd Assembly MicroPlumberd.dll Standard snapshot policy that takes into the account time and minimal event occurence from the last taken snapshot. public class AttributeSnaphotPolicy<T> : ISnapshotPolicy<T>, ISnapshotPolicy where T : IAggregate Type Parameters T Inheritance object AttributeSnaphotPolicy<T> Implements ISnapshotPolicy<T> ISnapshotPolicy Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AttributeSnaphotPolicy() public AttributeSnaphotPolicy() Properties MinEventCount public int? MinEventCount { get; } Property Value int? MinTime public TimeSpan? MinTime { get; } Property Value TimeSpan? Methods ShouldMakeSnapshot(object, StateInfo?) public bool ShouldMakeSnapshot(object owner, StateInfo? info) Parameters owner object info StateInfo? Returns bool ShouldMakeSnapshot(T, StateInfo?) public virtual bool ShouldMakeSnapshot(T aggregate, StateInfo? info) Parameters aggregate T info StateInfo? Returns bool See Also ISnapshotPolicy<T>"
  },
  "api/MicroPlumberd.BuildInvocationContext.html": {
    "href": "api/MicroPlumberd.BuildInvocationContext.html",
    "title": "Delegate BuildInvocationContext | MicroPlumberd",
    "keywords": "Delegate BuildInvocationContext Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate void BuildInvocationContext(InvocationContext context, Metadata m) Parameters context InvocationContext m Metadata"
  },
  "api/MicroPlumberd.Collections.ConcurrentHashSet-1.Enumerator.html": {
    "href": "api/MicroPlumberd.Collections.ConcurrentHashSet-1.Enumerator.html",
    "title": "Struct ConcurrentHashSet<T>.Enumerator | MicroPlumberd",
    "keywords": "Struct ConcurrentHashSet<T>.Enumerator Namespace MicroPlumberd.Collections Assembly MicroPlumberd.dll Represents an enumerator for ConcurrentHashSet<T>. public struct ConcurrentHashSet<T>.Enumerator : IEnumerator<T>, IEnumerator, IDisposable Implements IEnumerator<T> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Enumerator(ConcurrentHashSet<T>) Constructs an enumerator for ConcurrentHashSet<T>. public Enumerator(ConcurrentHashSet<T> set) Parameters set ConcurrentHashSet<T> Properties Current Gets the element in the collection at the current position of the enumerator. public readonly T Current { get; } Property Value T The element in the collection at the current position of the enumerator. Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset()"
  },
  "api/MicroPlumberd.Collections.ConcurrentHashSet-1.html": {
    "href": "api/MicroPlumberd.Collections.ConcurrentHashSet-1.html",
    "title": "Class ConcurrentHashSet<T> | MicroPlumberd",
    "keywords": "Class ConcurrentHashSet<T> Namespace MicroPlumberd.Collections Assembly MicroPlumberd.dll Represents a thread-safe hash-based unique collection. public class ConcurrentHashSet<T> : IReadOnlyCollection<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters T The type of the items in the collection. Inheritance object ConcurrentHashSet<T> Implements IReadOnlyCollection<T> ICollection<T> IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks All public members of ConcurrentHashSet<T> are thread-safe and may be used concurrently from multiple threads. Constructors ConcurrentHashSet() Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the item type. public ConcurrentHashSet() ConcurrentHashSet(IEnumerable<T>) Initializes a new instance of the ConcurrentHashSet<T> class that contains elements copied from the specified IEnumerable<T>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the item type. public ConcurrentHashSet(IEnumerable<T> collection) Parameters collection IEnumerable<T> The IEnumerable<T> whose elements are copied to the new ConcurrentHashSet<T>. Exceptions ArgumentNullException collection is a null reference. ConcurrentHashSet(IEnumerable<T>, IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that contains elements copied from the specified IEnumerable, has the default concurrency level, has the default initial capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(IEnumerable<T> collection, IEqualityComparer<T>? comparer) Parameters collection IEnumerable<T> The IEnumerable<T> whose elements are copied to the new ConcurrentHashSet<T>. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. Exceptions ArgumentNullException collection is a null reference (Nothing in Visual Basic). ConcurrentHashSet(IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the specified concurrency level and capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(IEqualityComparer<T>? comparer) Parameters comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. ConcurrentHashSet(int, IEnumerable<T>, IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that contains elements copied from the specified IEnumerable, has the specified concurrency level, has the specified initial capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(int concurrencyLevel, IEnumerable<T> collection, IEqualityComparer<T>? comparer) Parameters concurrencyLevel int The estimated number of threads that will update the ConcurrentHashSet<T> concurrently. collection IEnumerable<T> The IEnumerable<T> whose elements are copied to the new ConcurrentHashSet<T>. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. Exceptions ArgumentNullException collection is a null reference. ArgumentOutOfRangeException concurrencyLevel is less than 1. ConcurrentHashSet(int, int) Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the item type. public ConcurrentHashSet(int concurrencyLevel, int capacity) Parameters concurrencyLevel int The estimated number of threads that will update the ConcurrentHashSet<T> concurrently. capacity int The initial number of elements that the ConcurrentHashSet<T> can contain. Exceptions ArgumentOutOfRangeException concurrencyLevel is less than 1. ArgumentOutOfRangeException capacity is less than 0. ConcurrentHashSet(int, int, IEqualityComparer<T>?) Initializes a new instance of the ConcurrentHashSet<T> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified IEqualityComparer<T>. public ConcurrentHashSet(int concurrencyLevel, int capacity, IEqualityComparer<T>? comparer) Parameters concurrencyLevel int The estimated number of threads that will update the ConcurrentHashSet<T> concurrently. capacity int The initial number of elements that the ConcurrentHashSet<T> can contain. comparer IEqualityComparer<T> The IEqualityComparer<T> implementation to use when comparing items. Exceptions ArgumentOutOfRangeException concurrencyLevel is less than 1. -or- capacity is less than 0. Properties Comparer Gets the IEqualityComparer<T> that is used to determine equality for the values in the set. public IEqualityComparer<T> Comparer { get; } Property Value IEqualityComparer<T> The IEqualityComparer<T> generic interface implementation that is used to provide hash values and determine equality for the values in the current ConcurrentHashSet<T>. Remarks ConcurrentHashSet<T> requires an equality implementation to determine whether values are equal. You can specify an implementation of the IEqualityComparer<T> generic interface by using a constructor that accepts a comparer parameter; if you do not specify one, the default generic equality comparer Default is used. Count Gets the number of items contained in the ConcurrentHashSet<T>. public int Count { get; } Property Value int The number of items contained in the ConcurrentHashSet<T>. Remarks Count has snapshot semantics and represents the number of items in the ConcurrentHashSet<T> at the moment when Count was accessed. IsEmpty Gets a value that indicates whether the ConcurrentHashSet<T> is empty. public bool IsEmpty { get; } Property Value bool true if the ConcurrentHashSet<T> is empty; otherwise, false. Methods Add(T) Adds the specified item to the ConcurrentHashSet<T>. public bool Add(T item) Parameters item T The item to add. Returns bool true if the items was added to the ConcurrentHashSet<T> successfully; false if it already exists. Exceptions OverflowException The ConcurrentHashSet<T> contains too many items. Clear() Removes all items from the ConcurrentHashSet<T>. public void Clear() Contains(T) Determines whether the ConcurrentHashSet<T> contains the specified item. public bool Contains(T item) Parameters item T The item to locate in the ConcurrentHashSet<T>. Returns bool true if the ConcurrentHashSet<T> contains the item; otherwise, false. GetEnumerator() Returns a value-type enumerator that iterates through the ConcurrentHashSet<T>. public ConcurrentHashSet<T>.Enumerator GetEnumerator() Returns ConcurrentHashSet<T>.Enumerator An enumerator for the ConcurrentHashSet<T>. Remarks The enumerator returned from the collection is safe to use concurrently with reads and writes to the collection, however it does not represent a moment-in-time snapshot of the collection. The contents exposed through the enumerator may contain modifications made to the collection after GetEnumerator() was called. TryGetValue(T, out T) Searches the ConcurrentHashSet<T> for a given value and returns the equal value it finds, if any. public bool TryGetValue(T equalValue, out T actualValue) Parameters equalValue T The value to search for. actualValue T The value from the set that the search found, or the default value of T when the search yielded no match. Returns bool A value indicating whether the search was successful. Remarks This can be useful when you want to reuse a previously stored reference instead of a newly constructed one (so that more sharing of references can occur) or to look up a value that has more complete data than the value you currently have, although their comparer functions indicate they are equal. TryRemove(T) Attempts to remove the item from the ConcurrentHashSet<T>. public bool TryRemove(T item) Parameters item T The item to remove. Returns bool true if an item was removed successfully; otherwise, false."
  },
  "api/MicroPlumberd.Collections.html": {
    "href": "api/MicroPlumberd.Collections.html",
    "title": "Namespace MicroPlumberd.Collections | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.Collections Classes ConcurrentHashSet<T> Represents a thread-safe hash-based unique collection. Structs ConcurrentHashSet<T>.Enumerator Represents an enumerator for ConcurrentHashSet<T>."
  },
  "api/MicroPlumberd.CommandEnqueued-1.html": {
    "href": "api/MicroPlumberd.CommandEnqueued-1.html",
    "title": "Class CommandEnqueued<TCommand> | MicroPlumberd",
    "keywords": "Class CommandEnqueued<TCommand> Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll Immutable class used in ProcessManagers in Given methods the rebuild the state based on send commands. public sealed class CommandEnqueued<TCommand> : ICommandEnqueued Type Parameters TCommand The type of the command. Inheritance object CommandEnqueued<TCommand> Implements ICommandEnqueued Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CommandEnqueued() Initializes a new instance of the CommandEnqueued<TCommand> class. public CommandEnqueued() CommandEnqueued(Guid, TCommand) Initializes a new instance of the CommandEnqueued<TCommand> class. public CommandEnqueued(Guid recipientId, TCommand command) Parameters recipientId Guid The recipient identifier. command TCommand The command. Properties Command Gets the command. public TCommand Command { get; init; } Property Value TCommand The command. RecipientId Gets the recipient identifier. public Guid RecipientId { get; init; } Property Value Guid The recipient identifier."
  },
  "api/MicroPlumberd.CommandEnqueued.html": {
    "href": "api/MicroPlumberd.CommandEnqueued.html",
    "title": "Class CommandEnqueued | MicroPlumberd",
    "keywords": "Class CommandEnqueued Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll Factory class for CommandEnqueued<TCommand> events. public static class CommandEnqueued Inheritance object CommandEnqueued Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(Guid, object) Creates the specified event. public static ICommandEnqueued Create(Guid recipient, object command) Parameters recipient Guid The recipient. command object The command. Returns ICommandEnqueued"
  },
  "api/MicroPlumberd.CommandInvocationFailed.html": {
    "href": "api/MicroPlumberd.CommandInvocationFailed.html",
    "title": "Class CommandInvocationFailed | MicroPlumberd",
    "keywords": "Class CommandInvocationFailed Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public record CommandInvocationFailed : IEquatable<CommandInvocationFailed> Inheritance object CommandInvocationFailed Implements IEquatable<CommandInvocationFailed> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command public ICommandRequest Command { get; init; } Property Value ICommandRequest Message public string Message { get; init; } Property Value string RecipientId public Guid RecipientId { get; init; } Property Value Guid"
  },
  "api/MicroPlumberd.CommandRequest-1.html": {
    "href": "api/MicroPlumberd.CommandRequest-1.html",
    "title": "Class CommandRequest<TCommand> | MicroPlumberd",
    "keywords": "Class CommandRequest<TCommand> Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public record CommandRequest<TCommand> : ICommandRequest<TCommand>, ICommandRequest, IProcessAction, IEquatable<CommandRequest<TCommand>> Type Parameters TCommand Inheritance object CommandRequest<TCommand> Implements ICommandRequest<TCommand> ICommandRequest IProcessAction IEquatable<CommandRequest<TCommand>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandRequest() public CommandRequest() Properties Command public TCommand Command { get; init; } Property Value TCommand RecipientId public Guid RecipientId { get; init; } Property Value Guid"
  },
  "api/MicroPlumberd.CommandRequest.html": {
    "href": "api/MicroPlumberd.CommandRequest.html",
    "title": "Class CommandRequest | MicroPlumberd",
    "keywords": "Class CommandRequest Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public static class CommandRequest Inheritance object CommandRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(Guid, object) public static ICommandRequest Create(Guid recipientId, object command) Parameters recipientId Guid command object Returns ICommandRequest Create<TCommand>(Guid, TCommand) public static ICommandRequest<TCommand> Create<TCommand>(Guid recipientId, TCommand command) Parameters recipientId Guid command TCommand Returns ICommandRequest<TCommand> Type Parameters TCommand"
  },
  "api/MicroPlumberd.ContainerExtensions.html": {
    "href": "api/MicroPlumberd.ContainerExtensions.html",
    "title": "Class ContainerExtensions | MicroPlumberd",
    "keywords": "Class ContainerExtensions Namespace MicroPlumberd Assembly MicroPlumberd.Services.ProcessManagers.dll public static class ContainerExtensions Inheritance object ContainerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddProcessManager<TProcessManager>(IServiceCollection) public static IServiceCollection AddProcessManager<TProcessManager>(this IServiceCollection services) where TProcessManager : IProcessManager, ITypeRegister Parameters services IServiceCollection Returns IServiceCollection Type Parameters TProcessManager"
  },
  "api/MicroPlumberd.DirectConnect.CommandEnvelope-1.html": {
    "href": "api/MicroPlumberd.DirectConnect.CommandEnvelope-1.html",
    "title": "Class CommandEnvelope<TCommand> | MicroPlumberd",
    "keywords": "Class CommandEnvelope<TCommand> Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll [ProtoContract] public record CommandEnvelope<TCommand> : IEquatable<CommandEnvelope<TCommand>> Type Parameters TCommand Inheritance object CommandEnvelope<TCommand> Implements IEquatable<CommandEnvelope<TCommand>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Command [ProtoMember(2)] public required TCommand Command { get; init; } Property Value TCommand CommandId public Guid CommandId { get; } Property Value Guid CorrelationId [ProtoMember(3)] public Guid? CorrelationId { get; init; } Property Value Guid? StreamId [ProtoMember(1)] public string StreamId { get; init; } Property Value string"
  },
  "api/MicroPlumberd.DirectConnect.ContainerExtensions.html": {
    "href": "api/MicroPlumberd.DirectConnect.ContainerExtensions.html",
    "title": "Class ContainerExtensions | MicroPlumberd",
    "keywords": "Class ContainerExtensions Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll public static class ContainerExtensions Inheritance object ContainerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddCommandHandler<TCommandHandler>(IServiceCollection) public static IServiceCollection AddCommandHandler<TCommandHandler>(this IServiceCollection services) where TCommandHandler : IServiceTypeRegister Parameters services IServiceCollection Returns IServiceCollection Type Parameters TCommandHandler AddCommandInvoker(IServiceCollection, Type) public static IServiceCollection AddCommandInvoker(this IServiceCollection services, Type commandType) Parameters services IServiceCollection commandType Type Returns IServiceCollection AddCommandInvoker<TCommand>(IServiceCollection) public static IServiceCollection AddCommandInvoker<TCommand>(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection Type Parameters TCommand AddCommandInvokers(IServiceCollection, IEnumerable<Type>) public static IServiceCollection AddCommandInvokers(this IServiceCollection services, IEnumerable<Type> commandTypes) Parameters services IServiceCollection commandTypes IEnumerable<Type> Returns IServiceCollection AddCommandInvokers(IServiceCollection, params Type[]) public static IServiceCollection AddCommandInvokers(this IServiceCollection services, params Type[] commandTypes) Parameters services IServiceCollection commandTypes Type[] Returns IServiceCollection"
  },
  "api/MicroPlumberd.DirectConnect.FaultEnvelope-1.html": {
    "href": "api/MicroPlumberd.DirectConnect.FaultEnvelope-1.html",
    "title": "Class FaultEnvelope<TData> | MicroPlumberd",
    "keywords": "Class FaultEnvelope<TData> Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll [ProtoContract] public record FaultEnvelope<TData> : IFaultEnvelope, IEquatable<FaultEnvelope<TData>> Type Parameters TData Inheritance object FaultEnvelope<TData> Implements IFaultEnvelope IEquatable<FaultEnvelope<TData>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FaultEnvelope() public FaultEnvelope() FaultEnvelope(TData, string) public FaultEnvelope(TData data, string error) Parameters data TData error string Properties Code [ProtoMember(3)] public HttpStatusCode Code { get; init; } Property Value HttpStatusCode Data [ProtoMember(1)] public required TData Data { get; init; } Property Value TData Error [ProtoMember(2)] public required string Error { get; init; } Property Value string"
  },
  "api/MicroPlumberd.DirectConnect.FaultEnvelope.html": {
    "href": "api/MicroPlumberd.DirectConnect.FaultEnvelope.html",
    "title": "Class FaultEnvelope | MicroPlumberd",
    "keywords": "Class FaultEnvelope Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll public static class FaultEnvelope Inheritance object FaultEnvelope Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(object, string) public static object Create(object faultData, string message) Parameters faultData object message string Returns object"
  },
  "api/MicroPlumberd.DirectConnect.HandlerOperationStatus.html": {
    "href": "api/MicroPlumberd.DirectConnect.HandlerOperationStatus.html",
    "title": "Class HandlerOperationStatus | MicroPlumberd",
    "keywords": "Class HandlerOperationStatus Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll [ProtoContract] public class HandlerOperationStatus Inheritance object HandlerOperationStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code [ProtoMember(1)] public HttpStatusCode Code { get; init; } Property Value HttpStatusCode Error [ProtoMember(2)] public string Error { get; init; } Property Value string Methods Ok() public static HandlerOperationStatus Ok() Returns HandlerOperationStatus"
  },
  "api/MicroPlumberd.DirectConnect.IFaultEnvelope.html": {
    "href": "api/MicroPlumberd.DirectConnect.IFaultEnvelope.html",
    "title": "Interface IFaultEnvelope | MicroPlumberd",
    "keywords": "Interface IFaultEnvelope Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll public interface IFaultEnvelope Properties Code HttpStatusCode Code { get; } Property Value HttpStatusCode Data object Data { get; } Property Value object Error string Error { get; } Property Value string"
  },
  "api/MicroPlumberd.DirectConnect.ReturnsAttribute-1.html": {
    "href": "api/MicroPlumberd.DirectConnect.ReturnsAttribute-1.html",
    "title": "Class ReturnsAttribute<TResult> | MicroPlumberd",
    "keywords": "Class ReturnsAttribute<TResult> Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll [AttributeUsage(AttributeTargets.Class)] public class ReturnsAttribute<TResult> : ReturnsAttribute Type Parameters TResult Inheritance object Attribute ReturnsAttribute ReturnsAttribute<TResult> Inherited Members ReturnsAttribute.ReturnType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReturnsAttribute() public ReturnsAttribute()"
  },
  "api/MicroPlumberd.DirectConnect.ReturnsAttribute.html": {
    "href": "api/MicroPlumberd.DirectConnect.ReturnsAttribute.html",
    "title": "Class ReturnsAttribute | MicroPlumberd",
    "keywords": "Class ReturnsAttribute Namespace MicroPlumberd.DirectConnect Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll public abstract class ReturnsAttribute : Attribute Inheritance object Attribute ReturnsAttribute Derived ReturnsAttribute<TResult> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReturnsAttribute(Type) protected ReturnsAttribute(Type returnType) Parameters returnType Type Properties ReturnType public Type ReturnType { get; init; } Property Value Type"
  },
  "api/MicroPlumberd.DirectConnect.html": {
    "href": "api/MicroPlumberd.DirectConnect.html",
    "title": "Namespace MicroPlumberd.DirectConnect | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.DirectConnect Classes CommandEnvelope<TCommand> ContainerExtensions FaultEnvelope FaultEnvelope<TData> HandlerOperationStatus ReturnsAttribute ReturnsAttribute<TResult> Interfaces IFaultEnvelope"
  },
  "api/MicroPlumberd.EventDispatcher.html": {
    "href": "api/MicroPlumberd.EventDispatcher.html",
    "title": "Delegate EventDispatcher | MicroPlumberd",
    "keywords": "Delegate EventDispatcher Namespace MicroPlumberd Assembly MicroPlumberd.dll public delegate Task EventDispatcher(Metadata m, object evt) Parameters m Metadata evt object Returns Task"
  },
  "api/MicroPlumberd.EventHandlerAttribute.html": {
    "href": "api/MicroPlumberd.EventHandlerAttribute.html",
    "title": "Class EventHandlerAttribute | MicroPlumberd",
    "keywords": "Class EventHandlerAttribute Namespace MicroPlumberd Assembly MicroPlumberd.dll Attribute that marks a class that is an EventHandler for code-generation. This is usually a read-model or a processor. [AttributeUsage(AttributeTargets.Class)] public class EventHandlerAttribute : Attribute Inheritance object Attribute EventHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() See Also Attribute"
  },
  "api/MicroPlumberd.EventIdConvention.html": {
    "href": "api/MicroPlumberd.EventIdConvention.html",
    "title": "Delegate EventIdConvention | MicroPlumberd",
    "keywords": "Delegate EventIdConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents delegate that creates Uuid from an event and optinally aggregate instance. public delegate Uuid EventIdConvention(IAggregate? aggregator, object evt) Parameters aggregator IAggregate Represents delegate that creates Uuid from an event and optinally aggregate instance. evt object Represents delegate that creates Uuid from an event and optinally aggregate instance. Returns Uuid Represents delegate that creates Uuid from an event and optinally aggregate instance."
  },
  "api/MicroPlumberd.EventNameConvention.html": {
    "href": "api/MicroPlumberd.EventNameConvention.html",
    "title": "Delegate EventNameConvention | MicroPlumberd",
    "keywords": "Delegate EventNameConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines the convention for generating event names. public delegate string EventNameConvention(Type? ownerType, Type evtType) Parameters ownerType Type The type of the owner of the event. evtType Type The type of the event. Returns string A string representing the generated event name."
  },
  "api/MicroPlumberd.EventStoreProjectionManagementClientExtensions.html": {
    "href": "api/MicroPlumberd.EventStoreProjectionManagementClientExtensions.html",
    "title": "Class EventStoreProjectionManagementClientExtensions | MicroPlumberd",
    "keywords": "Class EventStoreProjectionManagementClientExtensions Namespace MicroPlumberd Assembly MicroPlumberd.dll public static class EventStoreProjectionManagementClientExtensions Inheritance object EventStoreProjectionManagementClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnsureJoinProjection(EventStoreProjectionManagementClient, string, IProjectionRegister, IEnumerable<string>) public static Task EnsureJoinProjection(this EventStoreProjectionManagementClient client, string outputStream, IProjectionRegister register, IEnumerable<string> eventTypes) Parameters client EventStoreProjectionManagementClient outputStream string register IProjectionRegister eventTypes IEnumerable<string> Returns Task EnsureJoinProjection(EventStoreProjectionManagementClient, string, IEnumerable<string>) public static Task EnsureJoinProjection(this EventStoreProjectionManagementClient client, string outputStream, IEnumerable<string> eventTypes) Parameters client EventStoreProjectionManagementClient outputStream string eventTypes IEnumerable<string> Returns Task EnsureLookupProjection(EventStoreProjectionManagementClient, IProjectionRegister, string, string, string) public static Task EnsureLookupProjection(this EventStoreProjectionManagementClient client, IProjectionRegister register, string category, string eventProperty, string outputStreamCategory) Parameters client EventStoreProjectionManagementClient register IProjectionRegister category string eventProperty string outputStreamCategory string Returns Task"
  },
  "api/MicroPlumberd.ExecutionContext.html": {
    "href": "api/MicroPlumberd.ExecutionContext.html",
    "title": "Class ExecutionContext | MicroPlumberd",
    "keywords": "Class ExecutionContext Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public record ExecutionContext : IEquatable<ExecutionContext> Inheritance object ExecutionContext Implements IEquatable<ExecutionContext> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecutionContext(Metadata, object, Guid, ICommandRequest?, Exception) public ExecutionContext(Metadata Metadata, object Event, Guid Id, ICommandRequest? Command, Exception Exception) Parameters Metadata Metadata Event object Id Guid Command ICommandRequest Exception Exception Properties Command public ICommandRequest? Command { get; init; } Property Value ICommandRequest Event public object Event { get; init; } Property Value object Exception public Exception Exception { get; init; } Property Value Exception Id public Guid Id { get; init; } Property Value Guid Metadata public Metadata Metadata { get; init; } Property Value Metadata"
  },
  "api/MicroPlumberd.FaultException-1.html": {
    "href": "api/MicroPlumberd.FaultException-1.html",
    "title": "Class FaultException<TData> | MicroPlumberd",
    "keywords": "Class FaultException<TData> Namespace MicroPlumberd Assembly MicroPlumberd.CommandBus.Abstractions.dll public class FaultException<TData> : FaultException, ISerializable Type Parameters TData Inheritance object Exception FaultException FaultException<TData> Implements ISerializable Inherited Members FaultException.Code FaultException.Create(string, object, int) Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FaultException(string?, TData, int) public FaultException(string? message, TData data, int code) Parameters message string data TData code int FaultException(TData) public FaultException(TData data) Parameters data TData Properties Data public TData Data { get; init; } Property Value TData Methods GetFaultData() public override object GetFaultData() Returns object"
  },
  "api/MicroPlumberd.FaultException.html": {
    "href": "api/MicroPlumberd.FaultException.html",
    "title": "Class FaultException | MicroPlumberd",
    "keywords": "Class FaultException Namespace MicroPlumberd Assembly MicroPlumberd.CommandBus.Abstractions.dll public class FaultException : Exception, ISerializable Inheritance object Exception FaultException Implements ISerializable Derived FaultException<TData> Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors FaultException() public FaultException() FaultException(string?) public FaultException(string? message) Parameters message string FaultException(string?, int) public FaultException(string? message, int code) Parameters message string code int Properties Code public int Code { get; init; } Property Value int Methods Create(string, object, int) public static FaultException Create(string message, object data, int code) Parameters message string data object code int Returns FaultException GetFaultData() public virtual object GetFaultData() Returns object"
  },
  "api/MicroPlumberd.FromRelativeStreamPosition.html": {
    "href": "api/MicroPlumberd.FromRelativeStreamPosition.html",
    "title": "Struct FromRelativeStreamPosition | MicroPlumberd",
    "keywords": "Struct FromRelativeStreamPosition Namespace MicroPlumberd Assembly MicroPlumberd.dll public readonly struct FromRelativeStreamPosition Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors FromRelativeStreamPosition(FromStream, long) public FromRelativeStreamPosition(FromStream start, long delta) Parameters start FromStream delta long Properties Count public ulong Count { get; } Property Value ulong Direction public Direction Direction { get; } Property Value Direction End public static FromRelativeStreamPosition End { get; } Property Value FromRelativeStreamPosition Start public static FromRelativeStreamPosition Start { get; } Property Value FromRelativeStreamPosition StartPosition public FromStream StartPosition { get; } Property Value FromStream Operators operator +(FromRelativeStreamPosition, long) public static FromRelativeStreamPosition operator +(FromRelativeStreamPosition p, long d) Parameters p FromRelativeStreamPosition d long Returns FromRelativeStreamPosition operator --(FromRelativeStreamPosition) public static FromRelativeStreamPosition operator --(FromRelativeStreamPosition p) Parameters p FromRelativeStreamPosition Returns FromRelativeStreamPosition implicit operator FromRelativeStreamPosition(FromStream) public static implicit operator FromRelativeStreamPosition(FromStream st) Parameters st FromStream Returns FromRelativeStreamPosition operator ++(FromRelativeStreamPosition) public static FromRelativeStreamPosition operator ++(FromRelativeStreamPosition p) Parameters p FromRelativeStreamPosition Returns FromRelativeStreamPosition operator -(FromRelativeStreamPosition, long) public static FromRelativeStreamPosition operator -(FromRelativeStreamPosition p, long d) Parameters p FromRelativeStreamPosition d long Returns FromRelativeStreamPosition"
  },
  "api/MicroPlumberd.GroupNameModelConvention.html": {
    "href": "api/MicroPlumberd.GroupNameModelConvention.html",
    "title": "Delegate GroupNameModelConvention | MicroPlumberd",
    "keywords": "Delegate GroupNameModelConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines a naming convention for group name used in persistent subscription. public delegate string GroupNameModelConvention(Type model) Parameters model Type The type of the model. Returns string A string representing the group name for the model."
  },
  "api/MicroPlumberd.IAggregate-1.html": {
    "href": "api/MicroPlumberd.IAggregate-1.html",
    "title": "Interface IAggregate<TSelf> | MicroPlumberd",
    "keywords": "Interface IAggregate<TSelf> Namespace MicroPlumberd Assembly MicroPlumberd.dll Generic version of IAggregate interface that contains factory method. public interface IAggregate<out TSelf> : IAggregate, IVersioned Type Parameters TSelf The type of the self. Inherited Members IAggregate.PendingEvents IAggregate.Rehydrate(IAsyncEnumerable<object>) IAggregate.AckCommitted() IVersioned.Version Methods Empty(object) Factory method to create new Aggregates based on identifiers. public static abstract TSelf Empty(object id) Parameters id object The identifier. Returns TSelf See Also IVersioned"
  },
  "api/MicroPlumberd.IAggregate.html": {
    "href": "api/MicroPlumberd.IAggregate.html",
    "title": "Interface IAggregate | MicroPlumberd",
    "keywords": "Interface IAggregate Namespace MicroPlumberd Assembly MicroPlumberd.dll Interface for an aggregate. public interface IAggregate : IVersioned Inherited Members IVersioned.Version Properties PendingEvents Pending events. IReadOnlyList<object> PendingEvents { get; } Property Value IReadOnlyList<object> The pending events. Methods AckCommitted() Is used when all pending events are saved in eventstore. void AckCommitted() Rehydrate(IAsyncEnumerable<object>) Rehydrates aggregate with specified events. Task Rehydrate(IAsyncEnumerable<object> events) Parameters events IAsyncEnumerable<object> The events. Returns Task See Also IId IVersioned"
  },
  "api/MicroPlumberd.ICommandBus.html": {
    "href": "api/MicroPlumberd.ICommandBus.html",
    "title": "Interface ICommandBus | MicroPlumberd",
    "keywords": "Interface ICommandBus Namespace MicroPlumberd Assembly MicroPlumberd.CommandBus.Abstractions.dll Represents a command bus for sending commands. public interface ICommandBus Methods SendAsync(object, object) Sends a command asynchronously to the specified recipient - command handler. Task SendAsync(object recipientId, object command) Parameters recipientId object The ID of the recipient. command object The command to send. Returns Task A task representing the asynchronous operation."
  },
  "api/MicroPlumberd.ICommandEnqueued.html": {
    "href": "api/MicroPlumberd.ICommandEnqueued.html",
    "title": "Interface ICommandEnqueued | MicroPlumberd",
    "keywords": "Interface ICommandEnqueued Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public interface ICommandEnqueued Properties Command object Command { get; } Property Value object RecipientId Guid RecipientId { get; } Property Value Guid"
  },
  "api/MicroPlumberd.ICommandRequest-1.html": {
    "href": "api/MicroPlumberd.ICommandRequest-1.html",
    "title": "Interface ICommandRequest<TCommand> | MicroPlumberd",
    "keywords": "Interface ICommandRequest<TCommand> Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public interface ICommandRequest<out TCommand> : ICommandRequest, IProcessAction Type Parameters TCommand Inherited Members ICommandRequest.RecipientId Properties Command TCommand Command { get; } Property Value TCommand"
  },
  "api/MicroPlumberd.ICommandRequest.html": {
    "href": "api/MicroPlumberd.ICommandRequest.html",
    "title": "Interface ICommandRequest | MicroPlumberd",
    "keywords": "Interface ICommandRequest Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public interface ICommandRequest : IProcessAction Properties Command object Command { get; } Property Value object RecipientId Guid RecipientId { get; } Property Value Guid"
  },
  "api/MicroPlumberd.IConventions.html": {
    "href": "api/MicroPlumberd.IConventions.html",
    "title": "Interface IConventions | MicroPlumberd",
    "keywords": "Interface IConventions Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IConventions : IExtension Inherited Members IExtension.GetExtension<T>() Extension Methods PlumberdConventionsExtensions.ServicesConventions(IConventions) Properties BuildInvocationContext BuildInvocationContext BuildInvocationContext { get; set; } Property Value BuildInvocationContext GetEventIdConvention EventIdConvention GetEventIdConvention { get; set; } Property Value EventIdConvention GetEventNameConvention EventNameConvention GetEventNameConvention { get; set; } Property Value EventNameConvention GetStreamCategoryConvention StreamCategoryConvention GetStreamCategoryConvention { get; set; } Property Value StreamCategoryConvention GetStreamIdConvention SteamNameConvention GetStreamIdConvention { get; set; } Property Value SteamNameConvention GetStreamIdSnapshotConvention SteamNameConvention GetStreamIdSnapshotConvention { get; set; } Property Value SteamNameConvention GroupNameModelConvention GroupNameModelConvention GroupNameModelConvention { get; set; } Property Value GroupNameModelConvention MetadataEnrichers MetadataConvention? MetadataEnrichers { get; set; } Property Value MetadataConvention OutputStreamModelConvention OutputStreamModelConvention OutputStreamModelConvention { get; set; } Property Value OutputStreamModelConvention ProjectionCategoryStreamConvention ProjectionCategoryStreamConvention ProjectionCategoryStreamConvention { get; set; } Property Value ProjectionCategoryStreamConvention SnapshotEventNameConvention SnapshotEventName SnapshotEventNameConvention { get; set; } Property Value SnapshotEventName SnapshotPolicyFactoryConvention SnapshotPolicyFactory SnapshotPolicyFactoryConvention { get; set; } Property Value SnapshotPolicyFactory StandardMetadataEnricherTypes StandardMetadataEnricherTypes StandardMetadataEnricherTypes { get; set; } Property Value StandardMetadataEnricherTypes StreamNameFromEventConvention StreamNameFromEventConvention StreamNameFromEventConvention { get; set; } Property Value StreamNameFromEventConvention Methods GetMetadata(IAggregate?, object, object?) object GetMetadata(IAggregate? aggregate, object evt, object? metadata) Parameters aggregate IAggregate evt object metadata object Returns object"
  },
  "api/MicroPlumberd.IEventHandler-1.html": {
    "href": "api/MicroPlumberd.IEventHandler-1.html",
    "title": "Interface IEventHandler<TOwner> | MicroPlumberd",
    "keywords": "Interface IEventHandler<TOwner> Namespace MicroPlumberd Assembly MicroPlumberd.dll Interface for EventHandlers. public interface IEventHandler<TOwner> : IEventHandler where TOwner : IEventHandler Type Parameters TOwner The type of the owner. Inherited Members IEventHandler.Handle(Metadata, object) See Also IEventHandler"
  },
  "api/MicroPlumberd.IEventHandler.html": {
    "href": "api/MicroPlumberd.IEventHandler.html",
    "title": "Interface IEventHandler | MicroPlumberd",
    "keywords": "Interface IEventHandler Namespace MicroPlumberd Assembly MicroPlumberd.dll Dispatching interface for EventHandlers. public interface IEventHandler Methods Handle(Metadata, object) Dispatching method. Handles the specified metadata and event. Task Handle(Metadata m, object ev) Parameters m Metadata The m. ev object The ev. Returns Task See Also IEventHandler"
  },
  "api/MicroPlumberd.IEventRecord-1.html": {
    "href": "api/MicroPlumberd.IEventRecord-1.html",
    "title": "Interface IEventRecord<TEvent> | MicroPlumberd",
    "keywords": "Interface IEventRecord<TEvent> Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IEventRecord<out TEvent> : IEventRecord Type Parameters TEvent Inherited Members IEventRecord.Metadata Properties Event TEvent Event { get; } Property Value TEvent"
  },
  "api/MicroPlumberd.IEventRecord.html": {
    "href": "api/MicroPlumberd.IEventRecord.html",
    "title": "Interface IEventRecord | MicroPlumberd",
    "keywords": "Interface IEventRecord Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IEventRecord Properties Event object Event { get; } Property Value object Metadata Metadata Metadata { get; } Property Value Metadata"
  },
  "api/MicroPlumberd.IExtension.html": {
    "href": "api/MicroPlumberd.IExtension.html",
    "title": "Interface IExtension | MicroPlumberd",
    "keywords": "Interface IExtension Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IExtension Methods GetExtension<T>() T GetExtension<T>() where T : new() Returns T Type Parameters T"
  },
  "api/MicroPlumberd.IId-1.html": {
    "href": "api/MicroPlumberd.IId-1.html",
    "title": "Interface IId<T> | MicroPlumberd",
    "keywords": "Interface IId<T> Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IId<out T> : IId where T : IParsable<out T> Type Parameters T Inherited Members IId.Uuid Properties Id T Id { get; } Property Value T"
  },
  "api/MicroPlumberd.IId.html": {
    "href": "api/MicroPlumberd.IId.html",
    "title": "Interface IId | MicroPlumberd",
    "keywords": "Interface IId Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IId Properties Id object Id { get; } Property Value object Uuid Guid Uuid { get; } Property Value Guid"
  },
  "api/MicroPlumberd.IIdAware.html": {
    "href": "api/MicroPlumberd.IIdAware.html",
    "title": "Interface IIdAware | MicroPlumberd",
    "keywords": "Interface IIdAware Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IIdAware Properties Id object Id { set; } Property Value object"
  },
  "api/MicroPlumberd.IObjectSerializer.html": {
    "href": "api/MicroPlumberd.IObjectSerializer.html",
    "title": "Interface IObjectSerializer | MicroPlumberd",
    "keywords": "Interface IObjectSerializer Namespace MicroPlumberd Assembly MicroPlumberd.dll Object serializer used for event data and metadata serialization. public interface IObjectSerializer Properties ContentType Gets the type of the content. (application/json or application/octet-stream) string ContentType { get; } Property Value string The type of the content. Methods Deserialize(ReadOnlySpan<byte>, Type) Deserializes the specified span for event's data. object? Deserialize(ReadOnlySpan<byte> span, Type t) Parameters span ReadOnlySpan<byte> The span. t Type The t. Returns object ParseMetadata(ReadOnlySpan<byte>) Parses span a JsonElement of the metadata. JsonElement ParseMetadata(ReadOnlySpan<byte> span) Parameters span ReadOnlySpan<byte> The span. Returns JsonElement Serialize(object?) Serializes the specified object. byte[] Serialize(object? t) Parameters t object The t. Returns byte[]"
  },
  "api/MicroPlumberd.IPlumber.html": {
    "href": "api/MicroPlumberd.IPlumber.html",
    "title": "Interface IPlumber | MicroPlumberd",
    "keywords": "Interface IPlumber Namespace MicroPlumberd Assembly MicroPlumberd.dll Root interface for plumberd public interface IPlumber Extension Methods PlumberExtensions.SubscribeCommandHandler<TCommandHandler>(IPlumber, bool?, StreamPosition?) Properties Client EventStore's client EventStoreClient Client { get; } Property Value EventStoreClient Config Plubers configuration. IPlumberReadOnlyConfig Config { get; } Property Value IPlumberReadOnlyConfig PersistentSubscriptionClient EventStore's persistent subsctiption client EventStorePersistentSubscriptionsClient PersistentSubscriptionClient { get; } Property Value EventStorePersistentSubscriptionsClient ProjectionManagementClient EventStore's projection managemenet client EventStoreProjectionManagementClient ProjectionManagementClient { get; } Property Value EventStoreProjectionManagementClient ProjectionRegister Projection's register, responsible for caching information about projection from EventStore. IProjectionRegister ProjectionRegister { get; } Property Value IProjectionRegister TypeHandlerRegisters Metadata information about registered event-handlers. ITypeHandlerRegisters TypeHandlerRegisters { get; } Property Value ITypeHandlerRegisters Methods AppendEvent(object, object?, object?, StreamState?, string?) Appends the event. StreamId is determined using conventions. Task<IWriteResult> AppendEvent(object evt, object? id = null, object? metadata = null, StreamState? state = null, string? evtName = null) Parameters evt object The evt. id object The identifier of stream.(second segment of typical streamId, So if streamId is 'foo-123', 123 would be the id.) metadata object Optional metadata. state StreamState? Expected state. evtName string Optional name of the event. Returns Task<IWriteResult> AppendEvent(string, StreamState, string, object, object?) Appends event to a stream, uses relevant convention to create metadata. Task<IWriteResult> AppendEvent(string streamId, StreamState state, string evtName, object evt, object? metadata = null) Parameters streamId string Full name of streamId for example: 'TicketBooked-b27f9322-7d73-4d98-a605-a731a2c373c6' state StreamState Expected state of the stream evtName string Name of the event evt object Event object metadata object Additional metadata, can be null Returns Task<IWriteResult> AppendEvents(string, StreamRevision, IEnumerable<object>, object?) Appends event to a stream, uses relevant convention to create metadata. Task<IWriteResult> AppendEvents(string streamId, StreamRevision rev, IEnumerable<object> events, object? metadata = null) Parameters streamId string Full stream id, typically in format {category}-{id} rev StreamRevision Expected stream revision events IEnumerable<object> Events that are going to be serialized and appended metadata object Metadata that will be merged with metadata created from conventions Returns Task<IWriteResult> AppendEvents(string, StreamState, IEnumerable<object>, object?) Appends event to a stream, uses relevant convention to create metadata. Task<IWriteResult> AppendEvents(string streamId, StreamState state, IEnumerable<object> events, object? metadata = null) Parameters streamId string Full stream id, typically in format {category}-{id} state StreamState State of the stream events IEnumerable<object> Events that are going to be serialized and appended metadata object Metadata that will be merged with metadata created from conventions Returns Task<IWriteResult> AppendEvents(string, StreamState, params object[]) Appends event to a stream, uses relevant convention to create metadata. Task AppendEvents(string streamId, StreamState state, params object[] events) Parameters streamId string Full name of streamId for example: 'TicketBooked-b27f9322-7d73-4d98-a605-a731a2c373c6' state StreamState events object[] Returns Task AppendLink(string, Metadata, StreamState?) Appends the link to a stream. Task<IWriteResult> AppendLink(string streamId, Metadata metadata, StreamState? state = null) Parameters streamId string The stream identifier. metadata Metadata The metadata. state StreamState? The expected state of the stream Returns Task<IWriteResult> AppendSnapshot(object, object, long, StreamState) Appends the snapshot to a stream determined by the type of the snapshot/state. Task<IWriteResult> AppendSnapshot(object snapshot, object id, long version, StreamState state) Parameters snapshot object The snapshot. id object The identifier of the snapshot/state. version long The expected version. state StreamState The expected state of the stream. Returns Task<IWriteResult> FindEventInStream(string, Guid, TypeEventConverter, Direction) Finds the event in the stream. Task<IEventRecord?> FindEventInStream(string streamId, Guid id, TypeEventConverter eventMapping, Direction scanDirection = Direction.Backwards) Parameters streamId string The stream identifier. id Guid The identifier of the event. eventMapping TypeEventConverter The event mapping. scanDirection Direction The scan direction. Returns Task<IEventRecord> FindEventInStream<T>(string, Guid, TypeEventConverter, Direction) Finds the event in the stream. Task<IEventRecord<T>?> FindEventInStream<T>(string streamId, Guid id, TypeEventConverter eventMapping = null, Direction scanDirection = Direction.Backwards) Parameters streamId string The stream identifier. id Guid The identifier of the event. eventMapping TypeEventConverter The event mapping. scanDirection Direction The scan direction. Returns Task<IEventRecord<T>> Type Parameters T GetSnapshot(object, Type) Gets the snapshot - deserializes snapshot from the stream. Stream is identified by snaphostType. Deserialization is done from the latest event (snaphost) in the stream. Task<Snapshot?> GetSnapshot(object id, Type snapshotType) Parameters id object The identifier. snapshotType Type Type of the snapshot. Returns Task<Snapshot> The snapshot information containing the snaphost and relevant metadata. GetSnapshot<T>(Guid) Gets the snapshot - deserializes snapshot from the stream. Stream is identified by typeof(T). Deserialization is done from the latest event (snaphost) in the stream. Task<Snapshot<T>?> GetSnapshot<T>(Guid id) Parameters id Guid The identifier. Returns Task<Snapshot<T>> Type Parameters T Get<T>(object) Returns the aggregate identified by id. This usually mean that all the event will be loaded from the EventStoreDB and executed through 'Given' method on it's instance. If the aggregate supports snapshoting, it's state will be loaded from latest snapshot and relevant events from that time will be replied on it's instance. Task<T> Get<T>(object id) where T : IAggregate<T>, ITypeRegister, IId Parameters id object The identifier. Returns Task<T> Type Parameters T Read(string, TypeEventConverter, StreamPosition?, Direction?, long) Reads stream and returns events. IAsyncEnumerable<object> Read(string streamId, TypeEventConverter converter, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) Parameters streamId string The full stream name converter TypeEventConverter The event-map converter. start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<object> ReadFull(string, TypeEventConverter, StreamPosition?, Direction?, long) Reads stream and returns event and metadata information. IAsyncEnumerable<(object, Metadata)> ReadFull(string streamId, TypeEventConverter converter, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) Parameters streamId string The full stream name converter TypeEventConverter The event-map converter. start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<(object, Metadata)> Read<TOwner>(StreamPosition?, Direction?, long) Reads stream and returns events. IAsyncEnumerable<object> Read<TOwner>(StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) where TOwner : ITypeRegister Parameters start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<object> Type Parameters TOwner The type of the owner(aggregate). Read<TOwner>(object, StreamPosition?, Direction?, long) Reads stream and returns events. IAsyncEnumerable<object> Read<TOwner>(object id, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) where TOwner : ITypeRegister Parameters id object The identifier (of the aggregate). start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<object> Type Parameters TOwner The type of the owner (aggregate). Rehydrate<T>(T, Guid, StreamPosition?) Rehydrates the specified model Task Rehydrate<T>(T model, Guid id, StreamPosition? position = null) where T : IEventHandler, ITypeRegister Parameters model T The model. id Guid The identifier. position StreamPosition? The position from which reply events. Returns Task Type Parameters T Rehydrate<T>(T, string, StreamPosition?) Rehydrates the specified model. Task Rehydrate<T>(T model, string stream, StreamPosition? position = null) where T : IEventHandler, ITypeRegister Parameters model T The model. stream string The stream. position StreamPosition? The position. Returns Task Type Parameters T SaveChanges<T>(T, object?) Saves all pending events from the aggregate. Uses optimistic concurrency. Task<IWriteResult> SaveChanges<T>(T aggregate, object? metadata = null) where T : IAggregate<T>, IId Parameters aggregate T The aggregate. metadata object The optional metadata. Returns Task<IWriteResult> Type Parameters T SaveNew<T>(T, object?) Saves the aggregate. Expects that no aggregate exists. Task<IWriteResult> SaveNew<T>(T aggregate, object? metadata = null) where T : IAggregate<T>, IId Parameters aggregate T The aggregate. metadata object The optional metadata. Returns Task<IWriteResult> Type Parameters T Subscribe(string, FromRelativeStreamPosition, UserCredentials?, CancellationToken) Subscribes the specified stream name. ISubscriptionRunner Subscribe(string streamName, FromRelativeStreamPosition start, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string Name of the stream. start FromRelativeStreamPosition The start position userCredentials UserCredentials The user credentials. cancellationToken CancellationToken The cancellation token. Returns ISubscriptionRunner SubscribeEventHandlerPersistently<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, string?, IPosition?, bool) Subscribes the event handler persistently. This means that at least once an event is processed successfully, it wont be processed anymore. Task<IAsyncDisposable> SubscribeEventHandlerPersistently<TEventHandler>(TypeEventConverter mapFunc, IEnumerable<string>? events, TEventHandler? model, string? outputStream = null, string? groupName = null, IPosition? startFrom = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler Parameters mapFunc TypeEventConverter The map function. events IEnumerable<string> The events. model TEventHandler The model. outputStream string The output stream. groupName string Name of the group. startFrom IPosition The start from. ensureOutputStreamProjection bool if set to true [ensure output stream projection]. Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler?, string?, string?, IPosition?, bool) Subscribes the event handler persistently. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler. Then EventHandler subscribe the the output stream. Task<IAsyncDisposable> SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler? model = null, string? outputStream = null, string? groupName = null, IPosition? startFrom = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler, ITypeRegister Parameters model TEventHandler Optional event-handler/model. outputStream string Optional output stream. groupName string Optional group name. startFrom IPosition Optional start of the stream. ensureOutputStreamProjection bool when true creates projection that creates output's stream Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribeEventHandler<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, FromStream?, bool) Subscribes the event handler. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler. Then EventHandler subscribe the the output stream. Task<IAsyncDisposable> SubscribeEventHandler<TEventHandler>(TypeEventConverter mapFunc, IEnumerable<string>? eventTypes, TEventHandler? eh = null, string? outputStream = null, FromStream? start = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler Parameters mapFunc TypeEventConverter The map function. eventTypes IEnumerable<string> Supported event types. eh TEventHandler The event-handler outputStream string The output stream. start FromStream? The start of the stream ensureOutputStreamProjection bool if set to true [ensure output stream projection]. Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribeEventHandler<TEventHandler>(TEventHandler?, string?, FromRelativeStreamPosition?, bool) Subscribes the event handler. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler. Then EventHandler subscribe the output stream. Task<IAsyncDisposable> SubscribeEventHandler<TEventHandler>(TEventHandler? eh = null, string? outputStream = null, FromRelativeStreamPosition? start = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler, ITypeRegister Parameters eh TEventHandler The event-handler/model outputStream string The output stream. start FromRelativeStreamPosition? The start. ensureOutputStreamProjection bool if set to true [ensure output stream projection]. Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribePersistently(string, string, int, UserCredentials?, CancellationToken) Returns a subscription builder that will subscribe model persistently. ISubscriptionRunner SubscribePersistently(string streamName, string groupName, int bufferSize = 10, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string Name of the stream. groupName string Name of the group. bufferSize int Size of the buffer. userCredentials UserCredentials The user credentials. cancellationToken CancellationToken The cancellation token. Returns ISubscriptionRunner SubscribeSet() Returns a builder for creating composition of projections subscribed to a stream. ISubscriptionSet SubscribeSet() Returns ISubscriptionSet"
  },
  "api/MicroPlumberd.IPlumberConfig.html": {
    "href": "api/MicroPlumberd.IPlumberConfig.html",
    "title": "Interface IPlumberConfig | MicroPlumberd",
    "keywords": "Interface IPlumberConfig Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IPlumberConfig : IExtension Inherited Members IExtension.GetExtension<T>() Extension Methods PlumberdConventionsExtensions.ServicesConfig(IPlumberConfig) Properties Conventions IConventions Conventions { get; } Property Value IConventions SerializerFactory Func<Type, IObjectSerializer> SerializerFactory { get; set; } Property Value Func<Type, IObjectSerializer> ServiceProvider IServiceProvider ServiceProvider { get; set; } Property Value IServiceProvider"
  },
  "api/MicroPlumberd.IPlumberReadOnlyConfig.html": {
    "href": "api/MicroPlumberd.IPlumberReadOnlyConfig.html",
    "title": "Interface IPlumberReadOnlyConfig | MicroPlumberd",
    "keywords": "Interface IPlumberReadOnlyConfig Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IPlumberReadOnlyConfig : IExtension Inherited Members IExtension.GetExtension<T>() Extension Methods PlumberdConventionsExtensions.ServicesConfig(IPlumberReadOnlyConfig) Properties Conventions IReadOnlyConventions Conventions { get; } Property Value IReadOnlyConventions SerializerFactory Func<Type, IObjectSerializer> SerializerFactory { get; } Property Value Func<Type, IObjectSerializer> ServiceProvider IServiceProvider ServiceProvider { get; } Property Value IServiceProvider"
  },
  "api/MicroPlumberd.IProcessAction.html": {
    "href": "api/MicroPlumberd.IProcessAction.html",
    "title": "Interface IProcessAction | MicroPlumberd",
    "keywords": "Interface IProcessAction Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public interface IProcessAction"
  },
  "api/MicroPlumberd.IProcessManager.html": {
    "href": "api/MicroPlumberd.IProcessManager.html",
    "title": "Interface IProcessManager | MicroPlumberd",
    "keywords": "Interface IProcessManager Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public interface IProcessManager : IEventHandler, IVersioned, IId Inherited Members IEventHandler.Handle(Metadata, object) IVersioned.Version IId.Id IId.Uuid Properties CommandTypes public static abstract IEnumerable<Type> CommandTypes { get; } Property Value IEnumerable<Type> StartEvent public static abstract Type StartEvent { get; } Property Value Type Methods HandleError(ExecutionContext) Task<ICommandRequest?> HandleError(ExecutionContext executionContext) Parameters executionContext ExecutionContext Returns Task<ICommandRequest> StartWhen(Metadata, object) Task<ICommandRequest> StartWhen(Metadata m, object evt) Parameters m Metadata evt object Returns Task<ICommandRequest> When(Metadata, object) Task<ICommandRequest?> When(Metadata m, object evt) Parameters m Metadata evt object Returns Task<ICommandRequest>"
  },
  "api/MicroPlumberd.IProjectionRegister.html": {
    "href": "api/MicroPlumberd.IProjectionRegister.html",
    "title": "Interface IProjectionRegister | MicroPlumberd",
    "keywords": "Interface IProjectionRegister Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IProjectionRegister Methods Get(string) Task<ProjectionDetails?> Get(string name) Parameters name string Returns Task<ProjectionDetails>"
  },
  "api/MicroPlumberd.IReadModel.html": {
    "href": "api/MicroPlumberd.IReadModel.html",
    "title": "Interface IReadModel | MicroPlumberd",
    "keywords": "Interface IReadModel Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface IReadModel : IEventHandler Inherited Members IEventHandler.Handle(Metadata, object) Methods Given(Metadata, object) Task Given(Metadata m, object ev) Parameters m Metadata ev object Returns Task"
  },
  "api/MicroPlumberd.IReadOnlyConventions.html": {
    "href": "api/MicroPlumberd.IReadOnlyConventions.html",
    "title": "Interface IReadOnlyConventions | MicroPlumberd",
    "keywords": "Interface IReadOnlyConventions Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a set of read-only conventions used by the MicroPlumberd framework. public interface IReadOnlyConventions : IExtension Inherited Members IExtension.GetExtension<T>() Extension Methods PlumberdConventionsExtensions.ServicesConventions(IReadOnlyConventions) Properties BuildInvocationContext BuildInvocationContext BuildInvocationContext { get; } Property Value BuildInvocationContext GetEventIdConvention EventIdConvention GetEventIdConvention { get; } Property Value EventIdConvention GetEventNameConvention EventNameConvention GetEventNameConvention { get; } Property Value EventNameConvention GetStreamCategoryConvention StreamCategoryConvention GetStreamCategoryConvention { get; } Property Value StreamCategoryConvention GetStreamIdConvention SteamNameConvention GetStreamIdConvention { get; } Property Value SteamNameConvention GetStreamIdSnapshotConvention SteamNameConvention GetStreamIdSnapshotConvention { get; } Property Value SteamNameConvention GroupNameModelConvention GroupNameModelConvention GroupNameModelConvention { get; } Property Value GroupNameModelConvention MetadataEnrichers MetadataConvention? MetadataEnrichers { get; } Property Value MetadataConvention OutputStreamModelConvention OutputStreamModelConvention OutputStreamModelConvention { get; } Property Value OutputStreamModelConvention ProjectionCategoryStreamConvention ProjectionCategoryStreamConvention ProjectionCategoryStreamConvention { get; } Property Value ProjectionCategoryStreamConvention SnapshotEventNameConvention SnapshotEventName SnapshotEventNameConvention { get; } Property Value SnapshotEventName SnapshotPolicyFactoryConvention SnapshotPolicyFactory SnapshotPolicyFactoryConvention { get; } Property Value SnapshotPolicyFactory StandardMetadataEnricherTypes StandardMetadataEnricherTypes StandardMetadataEnricherTypes { get; } Property Value StandardMetadataEnricherTypes StreamNameFromEventConvention StreamNameFromEventConvention StreamNameFromEventConvention { get; } Property Value StreamNameFromEventConvention Methods GetMetadata(IAggregate?, object, object?) object GetMetadata(IAggregate? aggregate, object evt, object? metadata) Parameters aggregate IAggregate evt object metadata object Returns object"
  },
  "api/MicroPlumberd.ISnapshot.html": {
    "href": "api/MicroPlumberd.ISnapshot.html",
    "title": "Interface ISnapshot | MicroPlumberd",
    "keywords": "Interface ISnapshot Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a snapshot object used in Plumberd. public interface ISnapshot Properties Created Gets the creation date of the snapshot. DateTimeOffset Created { get; } Property Value DateTimeOffset Data Gets the data of the snapshot. object Data { get; } Property Value object Version Gets the version of the snapshot. long Version { get; } Property Value long"
  },
  "api/MicroPlumberd.ISnapshotPolicy-1.html": {
    "href": "api/MicroPlumberd.ISnapshotPolicy-1.html",
    "title": "Interface ISnapshotPolicy<T> | MicroPlumberd",
    "keywords": "Interface ISnapshotPolicy<T> Namespace MicroPlumberd Assembly MicroPlumberd.dll Interface for creating snapshot policies, that manage when a snapshot is performed on an aggregate. public interface ISnapshotPolicy<in T> : ISnapshotPolicy Type Parameters T Inherited Members ISnapshotPolicy.ShouldMakeSnapshot(object, StateInfo?) Methods ShouldMakeSnapshot(T, StateInfo?) bool ShouldMakeSnapshot(T aggregate, StateInfo? info) Parameters aggregate T info StateInfo? Returns bool"
  },
  "api/MicroPlumberd.ISnapshotPolicy.html": {
    "href": "api/MicroPlumberd.ISnapshotPolicy.html",
    "title": "Interface ISnapshotPolicy | MicroPlumberd",
    "keywords": "Interface ISnapshotPolicy Namespace MicroPlumberd Assembly MicroPlumberd.dll Interface for creating snapshot policies, that manage when a snapshot is performed on an aggregate. public interface ISnapshotPolicy Methods ShouldMakeSnapshot(object, StateInfo?) bool ShouldMakeSnapshot(object owner, StateInfo? info) Parameters owner object info StateInfo? Returns bool"
  },
  "api/MicroPlumberd.IStateChangeAction.html": {
    "href": "api/MicroPlumberd.IStateChangeAction.html",
    "title": "Interface IStateChangeAction | MicroPlumberd",
    "keywords": "Interface IStateChangeAction Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public interface IStateChangeAction : IProcessAction Properties Events object[] Events { get; } Property Value object[] Id Guid Id { get; } Property Value Guid Owner Type Owner { get; } Property Value Type Version long Version { get; } Property Value long"
  },
  "api/MicroPlumberd.IStatefull-1.html": {
    "href": "api/MicroPlumberd.IStatefull-1.html",
    "title": "Interface IStatefull<T> | MicroPlumberd",
    "keywords": "Interface IStatefull<T> Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a stateful object that exposes a read-only state. public interface IStatefull<out T> Type Parameters T The type of the state. Properties State Gets the current state of the object. T State { get; } Property Value T"
  },
  "api/MicroPlumberd.IStatefull.html": {
    "href": "api/MicroPlumberd.IStatefull.html",
    "title": "Interface IStatefull | MicroPlumberd",
    "keywords": "Interface IStatefull Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a stateful object. public interface IStatefull Properties InitializedWith Gets the state information with which the aggregate was initialized. StateInfo? InitializedWith { get; } Property Value StateInfo? SnapshotType Gets the type of the snapshot. Type SnapshotType { get; } Property Value Type State Gets the state of the object. object State { get; } Property Value object Methods Initialize(object, StateInfo) Initializes the aggregate with the specified state and version information. void Initialize(object state, StateInfo version) Parameters state object The state object. version StateInfo The version information."
  },
  "api/MicroPlumberd.ISubscriptionRunner.html": {
    "href": "api/MicroPlumberd.ISubscriptionRunner.html",
    "title": "Interface ISubscriptionRunner | MicroPlumberd",
    "keywords": "Interface ISubscriptionRunner Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface ISubscriptionRunner : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Methods WithHandler<T>() Task<IEventHandler> WithHandler<T>() where T : IEventHandler, ITypeRegister Returns Task<IEventHandler> Type Parameters T WithHandler<T>(TypeEventConverter) Task<IEventHandler> WithHandler<T>(TypeEventConverter mapFunc) where T : IEventHandler Parameters mapFunc TypeEventConverter Returns Task<IEventHandler> Type Parameters T WithHandler<T>(T) Task<T> WithHandler<T>(T model) where T : IEventHandler, ITypeRegister Parameters model T Returns Task<T> Type Parameters T WithHandler<T>(T, TypeEventConverter) Task<T> WithHandler<T>(T model, TypeEventConverter mapFunc) where T : IEventHandler Parameters model T mapFunc TypeEventConverter Returns Task<T> Type Parameters T"
  },
  "api/MicroPlumberd.ISubscriptionSet.html": {
    "href": "api/MicroPlumberd.ISubscriptionSet.html",
    "title": "Interface ISubscriptionSet | MicroPlumberd",
    "keywords": "Interface ISubscriptionSet Namespace MicroPlumberd Assembly MicroPlumberd.dll Subscription set builder. public interface ISubscriptionSet Methods SubscribeAsync(string, FromStream) Subscribes to stream. Task SubscribeAsync(string name, FromStream start) Parameters name string The name of the stream. start FromStream The start. Returns Task SubscribePersistentlyAsync(string, string?) Subscribes persistently. Task SubscribePersistentlyAsync(string outputStream, string? groupName = null) Parameters outputStream string The output stream. groupName string Name of the group. Returns Task With<TModel>(TModel) Withes the specified model. ISubscriptionSet With<TModel>(TModel model) where TModel : IEventHandler, ITypeRegister Parameters model TModel The model. Returns ISubscriptionSet Type Parameters TModel The type of the model."
  },
  "api/MicroPlumberd.ITypeHandlerRegisters.html": {
    "href": "api/MicroPlumberd.ITypeHandlerRegisters.html",
    "title": "Interface ITypeHandlerRegisters | MicroPlumberd",
    "keywords": "Interface ITypeHandlerRegisters Namespace MicroPlumberd Assembly MicroPlumberd.dll public interface ITypeHandlerRegisters Properties HandlerTypes IEnumerable<Type> HandlerTypes { get; } Property Value IEnumerable<Type> Methods GetEventNameConverterFor<THandler>() TypeEventConverter GetEventNameConverterFor<THandler>() where THandler : ITypeRegister Returns TypeEventConverter Type Parameters THandler GetEventNameMappingsFor<THandler>() IEnumerable<KeyValuePair<string, Type>> GetEventNameMappingsFor<THandler>() where THandler : ITypeRegister Returns IEnumerable<KeyValuePair<string, Type>> Type Parameters THandler GetEventNamesFor<THandler>() IEnumerable<string> GetEventNamesFor<THandler>() where THandler : ITypeRegister Returns IEnumerable<string> Type Parameters THandler"
  },
  "api/MicroPlumberd.ITypeRegister.html": {
    "href": "api/MicroPlumberd.ITypeRegister.html",
    "title": "Interface ITypeRegister | MicroPlumberd",
    "keywords": "Interface ITypeRegister Namespace MicroPlumberd Assembly MicroPlumberd.dll ITypeRegister is used to indicate which event types are supported by the class. public interface ITypeRegister Properties Types Supported event types. public static abstract IEnumerable<Type> Types { get; } Property Value IEnumerable<Type> Supported types."
  },
  "api/MicroPlumberd.IVersionAware.html": {
    "href": "api/MicroPlumberd.IVersionAware.html",
    "title": "Interface IVersionAware | MicroPlumberd",
    "keywords": "Interface IVersionAware Namespace MicroPlumberd Assembly MicroPlumberd.dll Interface for increasing the version. public interface IVersionAware : IVersioned Inherited Members IVersioned.Version Methods Increase() void Increase() See Also IVersioned"
  },
  "api/MicroPlumberd.IVersioned.html": {
    "href": "api/MicroPlumberd.IVersioned.html",
    "title": "Interface IVersioned | MicroPlumberd",
    "keywords": "Interface IVersioned Namespace MicroPlumberd Assembly MicroPlumberd.dll Simple interface for versioned objects. public interface IVersioned Properties Version Gets the current version. long Version { get; } Property Value long The version."
  },
  "api/MicroPlumberd.InvocationContext.html": {
    "href": "api/MicroPlumberd.InvocationContext.html",
    "title": "Class InvocationContext | MicroPlumberd",
    "keywords": "Class InvocationContext Namespace MicroPlumberd Assembly MicroPlumberd.dll public class InvocationContext Inheritance object InvocationContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current public static InvocationContext Current { get; set; } Property Value InvocationContext Value public dynamic Value { get; } Property Value dynamic Methods Build(InvocationContext, Metadata) public static void Build(InvocationContext context, Metadata metadata) Parameters context InvocationContext metadata Metadata CausactionId() public Guid? CausactionId() Returns Guid? Clear() public void Clear() ClearCorrelation() public void ClearCorrelation() Clone() public InvocationContext Clone() Returns InvocationContext ContainsProperty(string) public bool ContainsProperty(string propertyName) Parameters propertyName string Returns bool CorrelationId() public Guid? CorrelationId() Returns Guid? Set(string, object) public InvocationContext Set(string key, object value) Parameters key string value object Returns InvocationContext SetCausation(Guid) public InvocationContext SetCausation(Guid causationId) Parameters causationId Guid Returns InvocationContext SetCorrelation(Guid) public InvocationContext SetCorrelation(Guid correlationId) Parameters correlationId Guid Returns InvocationContext SetUserId(Guid) public InvocationContext SetUserId(Guid userId) Parameters userId Guid Returns InvocationContext TryGetValue<TValue>(string, out TValue) public bool TryGetValue<TValue>(string propertyName, out TValue value) Parameters propertyName string value TValue Returns bool Type Parameters TValue"
  },
  "api/MicroPlumberd.InvocationScope.html": {
    "href": "api/MicroPlumberd.InvocationScope.html",
    "title": "Class InvocationScope | MicroPlumberd",
    "keywords": "Class InvocationScope Namespace MicroPlumberd Assembly MicroPlumberd.dll public class InvocationScope : IDisposable Inheritance object InvocationScope Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InvocationScope() public InvocationScope() InvocationScope(InvocationContext) public InvocationScope(InvocationContext copy) Parameters copy InvocationContext Properties Context public InvocationContext Context { get; } Property Value InvocationContext Methods ContainsProperty(string) public bool ContainsProperty(string propertyName) Parameters propertyName string Returns bool Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Set(string, object) public InvocationContext Set(string key, object value) Parameters key string value object Returns InvocationContext SetCausation(Guid) public InvocationContext SetCausation(Guid causationId) Parameters causationId Guid Returns InvocationContext SetCorrelation(Guid) public InvocationContext SetCorrelation(Guid correlationId) Parameters correlationId Guid Returns InvocationContext SetUserId(Guid) public InvocationContext SetUserId(Guid userId) Parameters userId Guid Returns InvocationContext"
  },
  "api/MicroPlumberd.Metadata.html": {
    "href": "api/MicroPlumberd.Metadata.html",
    "title": "Struct Metadata | MicroPlumberd",
    "keywords": "Struct Metadata Namespace MicroPlumberd Assembly MicroPlumberd.dll Metadata structure. public readonly struct Metadata Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods MetadataExtensions.CausationId(Metadata) MetadataExtensions.CorrelationId(Metadata) MetadataExtensions.Created(Metadata) MetadataExtensions.SnapshotVersion(Metadata) MetadataExtensions.TryGetValue<TValue>(Metadata, string, out TValue) CommandHandlerMetadataExtensions.RecipientId(Metadata) MetadataExtensions.SessionId(Metadata) Constructors Metadata(Guid, Guid, long, string, JsonElement) Metadata structure. public Metadata(Guid id, Guid eventId, long sourceStreamPosition, string sourceStreamId, JsonElement data) Parameters id Guid eventId Guid sourceStreamPosition long sourceStreamId string data JsonElement Properties Data Data from metadata is deserialized in JsonElement. public JsonElement Data { get; } Property Value JsonElement The data. EventId Gets the event identifier. public Guid EventId { get; } Property Value Guid The event identifier. Id Gets the identifier or the stream. This is the second segment of the streamId (category-id). public Guid Id { get; } Property Value Guid The identifier. SourceStreamId Gets the full source stream-id public string SourceStreamId { get; } Property Value string The source stream identifier. SourceStreamPosition Gets the source stream position. public long SourceStreamPosition { get; } Property Value long The source stream position."
  },
  "api/MicroPlumberd.MetadataConvention.html": {
    "href": "api/MicroPlumberd.MetadataConvention.html",
    "title": "Delegate MetadataConvention | MicroPlumberd",
    "keywords": "Delegate MetadataConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines a convention for handling metadata in an event. public delegate void MetadataConvention(dynamic metadata, IAggregate? aggregate, object evt) Parameters metadata dynamic The dynamic metadata associated with the event. aggregate IAggregate The optional aggregate associated with the event. evt object The event object."
  },
  "api/MicroPlumberd.MetadataExtensions.html": {
    "href": "api/MicroPlumberd.MetadataExtensions.html",
    "title": "Class MetadataExtensions | MicroPlumberd",
    "keywords": "Class MetadataExtensions Namespace MicroPlumberd Assembly MicroPlumberd.dll public static class MetadataExtensions Inheritance object MetadataExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CausationId(Metadata) public static Guid? CausationId(this Metadata m) Parameters m Metadata Returns Guid? CorrelationId(Metadata) public static Guid? CorrelationId(this Metadata m) Parameters m Metadata Returns Guid? Created(Metadata) public static DateTimeOffset? Created(this Metadata m) Parameters m Metadata Returns DateTimeOffset? SnapshotVersion(Metadata) public static long? SnapshotVersion(this Metadata m) Parameters m Metadata Returns long? TryGetValue<TValue>(Metadata, string, out TValue) public static bool TryGetValue<TValue>(this Metadata m, string propertyName, out TValue value) Parameters m Metadata propertyName string value TValue Returns bool Type Parameters TValue"
  },
  "api/MicroPlumberd.OutputStreamAttribute.html": {
    "href": "api/MicroPlumberd.OutputStreamAttribute.html",
    "title": "Class OutputStreamAttribute | MicroPlumberd",
    "keywords": "Class OutputStreamAttribute Namespace MicroPlumberd Assembly MicroPlumberd.dll Use this attribute on Models where you want to override stream name convention. [AttributeUsage(AttributeTargets.Class)] public class OutputStreamAttribute : Attribute Inheritance object Attribute OutputStreamAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Your read-models/event-handlers typically subscribe to a stream that comes from a merge of event-type streams. If you have a FooModel: [EventHandler] [OutputStream(\"Foo\")] class FooModel { public async Task Given(Metadata m, FooEvent1 ev) { } public async Task Given(Metadata m, FooEvent2 ev) { } } Without the OutputStream attribute a projection would be made in EventStoreDB that produces FooModel stream out of $et-FooEvent1 and $et-FooEvent2. But, since there is the attribute the produced stream will be named 'Foo'. Constructors OutputStreamAttribute(string) public OutputStreamAttribute(string outputStreamName) Parameters outputStreamName string Properties OutputStreamName Gets or sets the name of the output stream, that is a joined stream from all event types used in model. public string OutputStreamName { get; } Property Value string The name of the output stream. See Also Attribute"
  },
  "api/MicroPlumberd.OutputStreamModelConvention.html": {
    "href": "api/MicroPlumberd.OutputStreamModelConvention.html",
    "title": "Delegate OutputStreamModelConvention | MicroPlumberd",
    "keywords": "Delegate OutputStreamModelConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines the convention for generating the output stream name based on the model type. public delegate string OutputStreamModelConvention(Type model) Parameters model Type The model type. Returns string The output stream name."
  },
  "api/MicroPlumberd.Plumber.html": {
    "href": "api/MicroPlumberd.Plumber.html",
    "title": "Class Plumber | MicroPlumberd",
    "keywords": "Class Plumber Namespace MicroPlumberd Assembly MicroPlumberd.dll Root class for ED plumbing. public class Plumber : IPlumber, IPlumberReadOnlyConfig, IExtension Inheritance object Plumber Implements IPlumber IPlumberReadOnlyConfig IExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods PlumberExtensions.SubscribeCommandHandler<TCommandHandler>(IPlumber, bool?, StreamPosition?) PlumberdConventionsExtensions.ServicesConfig(IPlumberReadOnlyConfig) Properties Client EventStore's client public EventStoreClient Client { get; } Property Value EventStoreClient Config Plubers configuration. public IPlumberReadOnlyConfig Config { get; } Property Value IPlumberReadOnlyConfig Conventions public IReadOnlyConventions Conventions { get; } Property Value IReadOnlyConventions PersistentSubscriptionClient EventStore's persistent subsctiption client public EventStorePersistentSubscriptionsClient PersistentSubscriptionClient { get; } Property Value EventStorePersistentSubscriptionsClient ProjectionManagementClient EventStore's projection managemenet client public EventStoreProjectionManagementClient ProjectionManagementClient { get; } Property Value EventStoreProjectionManagementClient ProjectionRegister Projection's register, responsible for caching information about projection from EventStore. public IProjectionRegister ProjectionRegister { get; } Property Value IProjectionRegister SerializerFactory public Func<Type, IObjectSerializer> SerializerFactory { get; } Property Value Func<Type, IObjectSerializer> ServiceProvider public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider TypeHandlerRegisters Metadata information about registered event-handlers. public ITypeHandlerRegisters TypeHandlerRegisters { get; } Property Value ITypeHandlerRegisters Methods AppendEvent(object, object?, object?, StreamState?, string?) Appends the event. StreamId is determined using conventions. public Task<IWriteResult> AppendEvent(object evt, object? id = null, object? metadata = null, StreamState? state = null, string? evtName = null) Parameters evt object The evt. id object The identifier of stream.(second segment of typical streamId, So if streamId is 'foo-123', 123 would be the id.) metadata object Optional metadata. state StreamState? Expected state. evtName string Optional name of the event. Returns Task<IWriteResult> AppendEvent(string, StreamState, string, object, object?) Appends event to a stream, uses relevant convention to create metadata. public Task<IWriteResult> AppendEvent(string streamId, StreamState state, string evtName, object evt, object? metadata = null) Parameters streamId string Full name of streamId for example: 'TicketBooked-b27f9322-7d73-4d98-a605-a731a2c373c6' state StreamState Expected state of the stream evtName string Name of the event evt object Event object metadata object Additional metadata, can be null Returns Task<IWriteResult> AppendEvents(string, StreamRevision, IEnumerable<object>, object?) Appends event to a stream, uses relevant convention to create metadata. public Task<IWriteResult> AppendEvents(string streamId, StreamRevision rev, IEnumerable<object> events, object? metadata = null) Parameters streamId string Full stream id, typically in format {category}-{id} rev StreamRevision Expected stream revision events IEnumerable<object> Events that are going to be serialized and appended metadata object Metadata that will be merged with metadata created from conventions Returns Task<IWriteResult> AppendEvents(string, StreamState, IEnumerable<object>, object?) Appends event to a stream, uses relevant convention to create metadata. public Task<IWriteResult> AppendEvents(string streamId, StreamState state, IEnumerable<object> events, object? metadata = null) Parameters streamId string Full stream id, typically in format {category}-{id} state StreamState State of the stream events IEnumerable<object> Events that are going to be serialized and appended metadata object Metadata that will be merged with metadata created from conventions Returns Task<IWriteResult> AppendLink(string, Metadata, StreamState?) Appends a link to the stream based on metadata loaded from somewhere else. public Task<IWriteResult> AppendLink(string streamId, Metadata metadata, StreamState? state = null) Parameters streamId string Full name of the stream. metadata Metadata Event's metadata that link will point to. state StreamState? StreamState, default is Any Returns Task<IWriteResult> AppendSnapshot(object, object, long, StreamState) Appends the snapshot to a stream determined by the type of the snapshot/state. public Task<IWriteResult> AppendSnapshot(object snapshot, object id, long version, StreamState state) Parameters snapshot object The snapshot. id object The identifier of the snapshot/state. version long The expected version. state StreamState The expected state of the stream. Returns Task<IWriteResult> Create(EventStoreClientSettings?, Action<IPlumberConfig>?) Creates instance of IPlumber. public static IPlumber Create(EventStoreClientSettings? settings = null, Action<IPlumberConfig>? configure = null) Parameters settings EventStoreClientSettings Connection settings to EventStore configure Action<IPlumberConfig> Additional configuration Returns IPlumber FindEventInStream(string, Guid, TypeEventConverter, Direction) Finds the event in the stream. public Task<IEventRecord?> FindEventInStream(string streamId, Guid id, TypeEventConverter eventMapping, Direction scanDirection = Direction.Backwards) Parameters streamId string The stream identifier. id Guid The identifier of the event. eventMapping TypeEventConverter The event mapping. scanDirection Direction The scan direction. Returns Task<IEventRecord> FindEventInStream<TEvent>(string, Guid, TypeEventConverter?, Direction) Finds the event in the stream. public Task<IEventRecord<TEvent>?> FindEventInStream<TEvent>(string streamId, Guid id, TypeEventConverter? eventMapping = null, Direction scanDirection = Direction.Backwards) Parameters streamId string The stream identifier. id Guid The identifier of the event. eventMapping TypeEventConverter The event mapping. scanDirection Direction The scan direction. Returns Task<IEventRecord<TEvent>> Type Parameters TEvent GetExtension<T>() public T GetExtension<T>() where T : new() Returns T Type Parameters T GetSnapshot(object, Type) Gets the snapshot - deserializes snapshot from the stream. Stream is identified by snaphostType. Deserialization is done from the latest event (snaphost) in the stream. public Task<Snapshot?> GetSnapshot(object id, Type snapshotType) Parameters id object The identifier. snapshotType Type Type of the snapshot. Returns Task<Snapshot> The snapshot information containing the snaphost and relevant metadata. GetSnapshot<T>(Guid) Gets the snapshot - deserializes snapshot from the stream. Stream is identified by typeof(T). Deserialization is done from the latest event (snaphost) in the stream. public Task<Snapshot<T>?> GetSnapshot<T>(Guid id) Parameters id Guid The identifier. Returns Task<Snapshot<T>> Type Parameters T Get<TOwner>(object) Returns the aggregate identified by id. This usually mean that all the event will be loaded from the EventStoreDB and executed through 'Given' method on it's instance. If the aggregate supports snapshoting, it's state will be loaded from latest snapshot and relevant events from that time will be replied on it's instance. public Task<TOwner> Get<TOwner>(object id) where TOwner : IAggregate<TOwner>, ITypeRegister, IId Parameters id object The identifier. Returns Task<TOwner> Type Parameters TOwner Read(string, TypeEventConverter, StreamPosition?, Direction?, long) Reads stream and returns events. public IAsyncEnumerable<object> Read(string streamId, TypeEventConverter converter, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) Parameters streamId string The full stream name converter TypeEventConverter The event-map converter. start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<object> ReadFull(string, TypeEventConverter, StreamPosition?, Direction?, long) Reads stream and returns event and metadata information. public IAsyncEnumerable<(object, Metadata)> ReadFull(string streamId, TypeEventConverter converter, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) Parameters streamId string The full stream name converter TypeEventConverter The event-map converter. start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<(object, Metadata)> Read<TOwner>(StreamPosition?, Direction?, long) Reads stream and returns events. public IAsyncEnumerable<object> Read<TOwner>(StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) where TOwner : ITypeRegister Parameters start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<object> Type Parameters TOwner The type of the owner(aggregate). Read<TOwner>(object, StreamPosition?, Direction?, long) Reads stream and returns events. public IAsyncEnumerable<object> Read<TOwner>(object id, StreamPosition? start = null, Direction? direction = null, long maxCount = 9223372036854775807) where TOwner : ITypeRegister Parameters id object The identifier (of the aggregate). start StreamPosition? The stream start position. direction Direction? The direction of the reading. maxCount long The maximum number of read events. Returns IAsyncEnumerable<object> Type Parameters TOwner The type of the owner (aggregate). Rehydrate<T>(T, Guid, StreamPosition?) Rehydrates the specified model public Task Rehydrate<T>(T model, Guid id, StreamPosition? position = null) where T : IEventHandler, ITypeRegister Parameters model T The model. id Guid The identifier. position StreamPosition? The position from which reply events. Returns Task Type Parameters T Rehydrate<T>(T, string, StreamPosition?) Rehydrates the specified model. public Task Rehydrate<T>(T model, string streamId, StreamPosition? position = null) where T : IEventHandler, ITypeRegister Parameters model T The model. streamId string position StreamPosition? The position. Returns Task Type Parameters T SaveChanges<T>(T, object?) Saves all pending events from the aggregate. Uses optimistic concurrency. public Task<IWriteResult> SaveChanges<T>(T aggregate, object? metadata = null) where T : IAggregate<T>, IId Parameters aggregate T The aggregate. metadata object The optional metadata. Returns Task<IWriteResult> Type Parameters T SaveNew<T>(T, object?) Saves the aggregate. Expects that no aggregate exists. public Task<IWriteResult> SaveNew<T>(T aggregate, object? metadata = null) where T : IAggregate<T>, IId Parameters aggregate T The aggregate. metadata object The optional metadata. Returns Task<IWriteResult> Type Parameters T Subscribe(string, FromRelativeStreamPosition, UserCredentials?, CancellationToken) Subscribes the specified stream name. public ISubscriptionRunner Subscribe(string streamName, FromRelativeStreamPosition start, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string Name of the stream. start FromRelativeStreamPosition The start position userCredentials UserCredentials The user credentials. cancellationToken CancellationToken The cancellation token. Returns ISubscriptionRunner SubscribeEventHandlerPersistently<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, string?, IPosition?, bool) Subscribes the event handler persistently. This means that at least once an event is processed successfully, it wont be processed anymore. public Task<IAsyncDisposable> SubscribeEventHandlerPersistently<TEventHandler>(TypeEventConverter mapFunc, IEnumerable<string>? events, TEventHandler? model, string? outputStream = null, string? groupName = null, IPosition? startFrom = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler Parameters mapFunc TypeEventConverter The map function. events IEnumerable<string> The events. model TEventHandler The model. outputStream string The output stream. groupName string Name of the group. startFrom IPosition The start from. ensureOutputStreamProjection bool if set to true [ensure output stream projection]. Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler?, string?, string?, IPosition?, bool) Subscribes the event handler persistently. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler. Then EventHandler subscribe the the output stream. public Task<IAsyncDisposable> SubscribeEventHandlerPersistently<TEventHandler>(TEventHandler? model, string? outputStream = null, string? groupName = null, IPosition? startFrom = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler, ITypeRegister Parameters model TEventHandler Optional event-handler/model. outputStream string Optional output stream. groupName string Optional group name. startFrom IPosition Optional start of the stream. ensureOutputStreamProjection bool when true creates projection that creates output's stream Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribeEventHandler<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, FromStream?, bool) Subscribes the event handler. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler. Then EventHandler subscribe the the output stream. public Task<IAsyncDisposable> SubscribeEventHandler<TEventHandler>(TypeEventConverter mapFunc, IEnumerable<string>? eventTypes, TEventHandler? eh = null, string? outputStream = null, FromStream? start = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler Parameters mapFunc TypeEventConverter The map function. eventTypes IEnumerable<string> Supported event types. eh TEventHandler The event-handler outputStream string The output stream. start FromStream? The start of the stream ensureOutputStreamProjection bool if set to true [ensure output stream projection]. Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribeEventHandler<TEventHandler>(TypeEventConverter, IEnumerable<string>?, TEventHandler?, string?, FromRelativeStreamPosition?, bool) public Task<IAsyncDisposable> SubscribeEventHandler<TEventHandler>(TypeEventConverter mapFunc, IEnumerable<string>? eventTypes, TEventHandler? eh = null, string? outputStream = null, FromRelativeStreamPosition? start = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler Parameters mapFunc TypeEventConverter eventTypes IEnumerable<string> eh TEventHandler outputStream string start FromRelativeStreamPosition? ensureOutputStreamProjection bool Returns Task<IAsyncDisposable> Type Parameters TEventHandler SubscribeEventHandler<TEventHandler>(TEventHandler?, string?, FromRelativeStreamPosition?, bool) Subscribes the event handler. EventHandler is a class that contains many overloaded 'Given' methods. A projection will be created at EventStore that creates a joined stream from all supported event-types by EventHandler. Then EventHandler subscribe the output stream. public Task<IAsyncDisposable> SubscribeEventHandler<TEventHandler>(TEventHandler? eh = null, string? outputStream = null, FromRelativeStreamPosition? start = null, bool ensureOutputStreamProjection = true) where TEventHandler : class, IEventHandler, ITypeRegister Parameters eh TEventHandler The event-handler/model outputStream string The output stream. start FromRelativeStreamPosition? The start. ensureOutputStreamProjection bool if set to true [ensure output stream projection]. Returns Task<IAsyncDisposable> Type Parameters TEventHandler The type of the event handler. SubscribePersistently(string, string, int, UserCredentials?, CancellationToken) Returns a subscription builder that will subscribe model persistently. public ISubscriptionRunner SubscribePersistently(string streamName, string groupName, int bufferSize = 10, UserCredentials? userCredentials = null, CancellationToken cancellationToken = default) Parameters streamName string Name of the stream. groupName string Name of the group. bufferSize int Size of the buffer. userCredentials UserCredentials The user credentials. cancellationToken CancellationToken The cancellation token. Returns ISubscriptionRunner SubscribeSet() Returns a builder for creating composition of projections subscribed to a stream. public ISubscriptionSet SubscribeSet() Returns ISubscriptionSet"
  },
  "api/MicroPlumberd.ProcessManagerAttribute.html": {
    "href": "api/MicroPlumberd.ProcessManagerAttribute.html",
    "title": "Class ProcessManagerAttribute | MicroPlumberd",
    "keywords": "Class ProcessManagerAttribute Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll [AttributeUsage(AttributeTargets.Class)] public class ProcessManagerAttribute : Attribute Inheritance object Attribute ProcessManagerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MicroPlumberd.ProcessManagerBase-1.html": {
    "href": "api/MicroPlumberd.ProcessManagerBase-1.html",
    "title": "Class ProcessManagerBase<TId> | MicroPlumberd",
    "keywords": "Class ProcessManagerBase<TId> Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public abstract class ProcessManagerBase<TId> : IVersionAware, IVersioned, IIdAware, IId<TId>, IId where TId : IParsable<TId> Type Parameters TId Inheritance object ProcessManagerBase<TId> Implements IVersionAware IVersioned IIdAware IId<TId> IId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public TId Id { get; } Property Value TId Version Gets the current version. public long Version { get; } Property Value long The version. Methods HandleError(ExecutionContext) public virtual Task<ICommandRequest?> HandleError(ExecutionContext executionContext) Parameters executionContext ExecutionContext Returns Task<ICommandRequest>"
  },
  "api/MicroPlumberd.ProcessManagerBase.html": {
    "href": "api/MicroPlumberd.ProcessManagerBase.html",
    "title": "Class ProcessManagerBase | MicroPlumberd",
    "keywords": "Class ProcessManagerBase Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public abstract class ProcessManagerBase : IVersionAware, IVersioned, IIdAware, IId Inheritance object ProcessManagerBase Implements IVersionAware IVersioned IIdAware IId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public Guid Id { get; } Property Value Guid Version Gets the current version. public long Version { get; } Property Value long The version. Methods HandleError(ExecutionContext) public virtual Task<ICommandRequest?> HandleError(ExecutionContext executionContext) Parameters executionContext ExecutionContext Returns Task<ICommandRequest>"
  },
  "api/MicroPlumberd.ProjectionCategoryStreamConvention.html": {
    "href": "api/MicroPlumberd.ProjectionCategoryStreamConvention.html",
    "title": "Delegate ProjectionCategoryStreamConvention | MicroPlumberd",
    "keywords": "Delegate ProjectionCategoryStreamConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines the convention for determining the projection category stream for a given model type. public delegate string ProjectionCategoryStreamConvention(Type type) Parameters type Type The type of the model. Returns string The projection category stream."
  },
  "api/MicroPlumberd.Protobuf.ProtoBuffObjectSerialization.html": {
    "href": "api/MicroPlumberd.Protobuf.ProtoBuffObjectSerialization.html",
    "title": "Class ProtoBuffObjectSerialization | MicroPlumberd",
    "keywords": "Class ProtoBuffObjectSerialization Namespace MicroPlumberd.Protobuf Assembly MicroPlumberd.Protobuf.dll public class ProtoBuffObjectSerialization : IObjectSerializer Inheritance object ProtoBuffObjectSerialization Implements IObjectSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Options public static JsonSerializerOptions Options Field Value JsonSerializerOptions Properties ContentType Gets the type of the content. (application/json or application/octet-stream) public string ContentType { get; } Property Value string The type of the content. Methods Deserialize(ReadOnlySpan<byte>, Type) Deserializes the specified span for event's data. public object? Deserialize(ReadOnlySpan<byte> span, Type t) Parameters span ReadOnlySpan<byte> The span. t Type The t. Returns object ParseMetadata(ReadOnlySpan<byte>) Parses span a JsonElement of the metadata. public JsonElement ParseMetadata(ReadOnlySpan<byte> span) Parameters span ReadOnlySpan<byte> The span. Returns JsonElement Serialize(object?) Serializes the specified object. public byte[] Serialize(object? t) Parameters t object The t. Returns byte[]"
  },
  "api/MicroPlumberd.Protobuf.html": {
    "href": "api/MicroPlumberd.Protobuf.html",
    "title": "Namespace MicroPlumberd.Protobuf | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.Protobuf Classes ProtoBuffObjectSerialization"
  },
  "api/MicroPlumberd.RequestInvokerExtensions.html": {
    "href": "api/MicroPlumberd.RequestInvokerExtensions.html",
    "title": "Class RequestInvokerExtensions | MicroPlumberd",
    "keywords": "Class RequestInvokerExtensions Namespace MicroPlumberd Assembly MicroPlumberd.Services.Grpc.DirectConnect.dll public static class RequestInvokerExtensions Inheritance object RequestInvokerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(IRequestInvoker, object, object) Executes a command and gets a response of type HandlerOperationStatus. public static Task Execute(this IRequestInvoker ri, object id, object c) Parameters ri IRequestInvoker The IRequestInvoker instance on which this method is invoked. id object The unique identifier for the command. c object The command object. Returns Task A Task that represents the asynchronous operation. The task result contains the response of type HandlerOperationStatus. Execute(IRequestInvoker, string, object) Executes a command and gets a response of type HandlerOperationStatus. public static Task Execute(this IRequestInvoker ri, string id, object c) Parameters ri IRequestInvoker The IRequestInvoker instance on which this method is invoked. id string The unique identifier for the command. c object The command object. Returns Task A Task that represents the asynchronous operation. The task result contains the response of type HandlerOperationStatus. Execute<TResponse>(IRequestInvoker, object, object) Executes a command and gets a response of type TResponse. public static Task<TResponse> Execute<TResponse>(this IRequestInvoker ri, object id, object c) Parameters ri IRequestInvoker The IRequestInvoker instance on which this method is invoked. id object The identifier. c object The command object. Returns Task<TResponse> Type Parameters TResponse The type of the response. Execute<TResponse>(IRequestInvoker, string, object) Executes a command and gets a response of type TResponse. public static Task<TResponse> Execute<TResponse>(this IRequestInvoker ri, string id, object c) Parameters ri IRequestInvoker The IRequestInvoker instance on which this method is invoked. id string The unique identifier for the command. c object The command object. Returns Task<TResponse> A Task that represents the asynchronous operation. The task result contains the response of type TResponse. Type Parameters TResponse The type of the response."
  },
  "api/MicroPlumberd.Services.AppCommandStream.html": {
    "href": "api/MicroPlumberd.Services.AppCommandStream.html",
    "title": "Delegate AppCommandStream | MicroPlumberd",
    "keywords": "Delegate AppCommandStream Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents a delegate that returns a string representing the application's command stream. public delegate string AppCommandStream() Returns string A string representing the application command stream."
  },
  "api/MicroPlumberd.Services.CommandExecutionResults.html": {
    "href": "api/MicroPlumberd.Services.CommandExecutionResults.html",
    "title": "Class CommandExecutionResults | MicroPlumberd",
    "keywords": "Class CommandExecutionResults Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public class CommandExecutionResults Inheritance object CommandExecutionResults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ErrorCode public HttpStatusCode ErrorCode { get; } Property Value HttpStatusCode ErrorData public object? ErrorData { get; } Property Value object ErrorMessage public string ErrorMessage { get; } Property Value string IsReady public TaskCompletionSource<bool> IsReady { get; } Property Value TaskCompletionSource<bool> IsSuccess public bool IsSuccess { get; } Property Value bool Methods Handle(Metadata, object) public ValueTask<bool> Handle(Metadata m, object ev) Parameters m Metadata ev object Returns ValueTask<bool>"
  },
  "api/MicroPlumberd.Services.CommandHandlerAttribute.html": {
    "href": "api/MicroPlumberd.Services.CommandHandlerAttribute.html",
    "title": "Class CommandHandlerAttribute | MicroPlumberd",
    "keywords": "Class CommandHandlerAttribute Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll [AttributeUsage(AttributeTargets.Class)] public class CommandHandlerAttribute : Attribute Inheritance object Attribute CommandHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/MicroPlumberd.Services.CommandHandlerAttributeValidator-1.html": {
    "href": "api/MicroPlumberd.Services.CommandHandlerAttributeValidator-1.html",
    "title": "Class CommandHandlerAttributeValidator<T> | MicroPlumberd",
    "keywords": "Class CommandHandlerAttributeValidator<T> Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public class CommandHandlerAttributeValidator<T> : ICommandHandler<T>, ICommandHandler Type Parameters T Inheritance object CommandHandlerAttributeValidator<T> Implements ICommandHandler<T> ICommandHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandlerAttributeValidator(ICommandHandler<T>, IServiceProvider) public CommandHandlerAttributeValidator(ICommandHandler<T> nx, IServiceProvider sp) Parameters nx ICommandHandler<T> sp IServiceProvider Methods Execute(string, T) public Task<object?> Execute(string id, T command) Parameters id string command T Returns Task<object>"
  },
  "api/MicroPlumberd.Services.CommandHandlerMetadataExtensions.html": {
    "href": "api/MicroPlumberd.Services.CommandHandlerMetadataExtensions.html",
    "title": "Class CommandHandlerMetadataExtensions | MicroPlumberd",
    "keywords": "Class CommandHandlerMetadataExtensions Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public static class CommandHandlerMetadataExtensions Inheritance object CommandHandlerMetadataExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RecipientId(Metadata) public static string RecipientId(this Metadata m) Parameters m Metadata Returns string"
  },
  "api/MicroPlumberd.Services.CommandMessageTypes.html": {
    "href": "api/MicroPlumberd.Services.CommandMessageTypes.html",
    "title": "Delegate CommandMessageTypes | MicroPlumberd",
    "keywords": "Delegate CommandMessageTypes Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents a delegate that returns a collection of command message types. public delegate IEnumerable<(string, Type)> CommandMessageTypes(Type command) Parameters command Type The command type. Returns IEnumerable<(string, Type)> A collection of tuples containing the message name and message type."
  },
  "api/MicroPlumberd.Services.CommandName.html": {
    "href": "api/MicroPlumberd.Services.CommandName.html",
    "title": "Delegate CommandName | MicroPlumberd",
    "keywords": "Delegate CommandName Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents a delegate that returns the name of a command based on its type. public delegate string CommandName(Type command) Parameters command Type The type of the command. Returns string The name of the command."
  },
  "api/MicroPlumberd.Services.ContainerExtensions.html": {
    "href": "api/MicroPlumberd.Services.ContainerExtensions.html",
    "title": "Class ContainerExtensions | MicroPlumberd",
    "keywords": "Class ContainerExtensions Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public static class ContainerExtensions Inheritance object ContainerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddBackgroundServiceIfMissing<TService>(IServiceCollection) public static IServiceCollection AddBackgroundServiceIfMissing<TService>(this IServiceCollection services) where TService : BackgroundService Parameters services IServiceCollection Returns IServiceCollection Type Parameters TService AddCommandHandler<TCommandHandler>(IServiceCollection, bool, StreamPosition?) public static IServiceCollection AddCommandHandler<TCommandHandler>(this IServiceCollection services, bool persistently = false, StreamPosition? start = null) where TCommandHandler : ICommandHandler, IServiceTypeRegister Parameters services IServiceCollection persistently bool start StreamPosition? Returns IServiceCollection Type Parameters TCommandHandler AddEventHandler<TEventHandler>(IServiceCollection, bool, FromStream?) public static IServiceCollection AddEventHandler<TEventHandler>(this IServiceCollection services, bool persistently = false, FromStream? start = null) where TEventHandler : class, IEventHandler, ITypeRegister Parameters services IServiceCollection persistently bool start FromStream? Returns IServiceCollection Type Parameters TEventHandler AddPlumberd(IServiceCollection, EventStoreClientSettings?, Action<IPlumberConfig>?) public static IServiceCollection AddPlumberd(this IServiceCollection collection, EventStoreClientSettings? settings = null, Action<IPlumberConfig>? configure = null) Parameters collection IServiceCollection settings EventStoreClientSettings configure Action<IPlumberConfig> Returns IServiceCollection"
  },
  "api/MicroPlumberd.Services.GroupNameFromCommandHandler.html": {
    "href": "api/MicroPlumberd.Services.GroupNameFromCommandHandler.html",
    "title": "Delegate GroupNameFromCommandHandler | MicroPlumberd",
    "keywords": "Delegate GroupNameFromCommandHandler Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents a delegate that returns the group name for a given command handler type. public delegate string GroupNameFromCommandHandler(Type commandHandlerType) Parameters commandHandlerType Type The type of the command handler. Returns string The group name for the command handler."
  },
  "api/MicroPlumberd.Services.ICommandHandler-1.html": {
    "href": "api/MicroPlumberd.Services.ICommandHandler-1.html",
    "title": "Interface ICommandHandler<TCommand> | MicroPlumberd",
    "keywords": "Interface ICommandHandler<TCommand> Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public interface ICommandHandler<in TCommand> : ICommandHandler Type Parameters TCommand Inherited Members ICommandHandler.Execute(string, object) Methods Execute(string, TCommand) Task<object?> Execute(string id, TCommand command) Parameters id string command TCommand Returns Task<object>"
  },
  "api/MicroPlumberd.Services.ICommandHandler-2.html": {
    "href": "api/MicroPlumberd.Services.ICommandHandler-2.html",
    "title": "Interface ICommandHandler<TId, TCommand> | MicroPlumberd",
    "keywords": "Interface ICommandHandler<TId, TCommand> Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public interface ICommandHandler<in TId, in TCommand> : ICommandHandler<TCommand>, ICommandHandler where TId : IParsable<in TId> Type Parameters TId TCommand Inherited Members ICommandHandler<TCommand>.Execute(string, TCommand) ICommandHandler.Execute(string, object) Methods Execute(TId, TCommand) Task<object?> Execute(TId id, TCommand command) Parameters id TId command TCommand Returns Task<object>"
  },
  "api/MicroPlumberd.Services.ICommandHandler.html": {
    "href": "api/MicroPlumberd.Services.ICommandHandler.html",
    "title": "Interface ICommandHandler | MicroPlumberd",
    "keywords": "Interface ICommandHandler Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public interface ICommandHandler Methods Execute(string, object) Task<object?> Execute(string id, object command) Parameters id string command object Returns Task<object>"
  },
  "api/MicroPlumberd.Services.IServiceTypeRegister.html": {
    "href": "api/MicroPlumberd.Services.IServiceTypeRegister.html",
    "title": "Interface IServiceTypeRegister | MicroPlumberd",
    "keywords": "Interface IServiceTypeRegister Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public interface IServiceTypeRegister Properties CommandTypes public static abstract IEnumerable<Type> CommandTypes { get; } Property Value IEnumerable<Type> FaultTypes public static abstract IEnumerable<Type> FaultTypes { get; } Property Value IEnumerable<Type> ReturnTypes public static abstract IEnumerable<Type> ReturnTypes { get; } Property Value IEnumerable<Type> Methods RegisterHandlers(IServiceCollection) public static abstract IServiceCollection RegisterHandlers(IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/MicroPlumberd.Services.IServicesConfig.html": {
    "href": "api/MicroPlumberd.Services.IServicesConfig.html",
    "title": "Interface IServicesConfig | MicroPlumberd",
    "keywords": "Interface IServicesConfig Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents the configuration for services. public interface IServicesConfig Properties DefaultTimeout Gets or sets the default timeout for services. TimeSpan DefaultTimeout { get; set; } Property Value TimeSpan"
  },
  "api/MicroPlumberd.Services.IServicesConvention.html": {
    "href": "api/MicroPlumberd.Services.IServicesConvention.html",
    "title": "Interface IServicesConvention | MicroPlumberd",
    "keywords": "Interface IServicesConvention Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Convention setting interface for plumberd framework. public interface IServicesConvention Properties AppCommandStreamConvention Gets or sets the application command's stream convention. AppCommandStream AppCommandStreamConvention { get; set; } Property Value AppCommandStream AreCommandHandlersExecutedPersistently Gets or sets a function that determines whether the command handlers are executed persistently. Func<bool> AreCommandHandlersExecutedPersistently { get; set; } Property Value Func<bool> Remarks The value of this property should be a function that returns a boolean value indicating whether the handlers should be executed persistently. CommandHandlerSkipFilter Gets or sets the filter used to determine whether a command handler should skip a command. Func<Metadata, object, bool> CommandHandlerSkipFilter { get; set; } Property Value Func<Metadata, object, bool> Remarks The filter is a function that takes a Metadata object and an object as parameters, and returns a boolean value indicating whether the command handler should be skipped. CommandMessageTypes Gets or sets the command message types. CommandMessageTypes CommandMessageTypes { get; set; } Property Value CommandMessageTypes CommandNameConvention Gets or sets the command name convention. CommandName CommandNameConvention { get; set; } Property Value CommandName GroupNameFromCommandHandlerConvention Gets or sets the convention for determining the group name for a persisted subscription for a command handler. GroupNameFromCommandHandler GroupNameFromCommandHandlerConvention { get; set; } Property Value GroupNameFromCommandHandler IsHandlerExecutionPersistent IsHandlerExecutionPersistent IsHandlerExecutionPersistent { get; set; } Property Value IsHandlerExecutionPersistent OutputSteamNameFromCommandHandlerConvention Gets or sets the convention for output stream name from command handler. OutputSteamNameFromCommandHandler OutputSteamNameFromCommandHandlerConvention { get; set; } Property Value OutputSteamNameFromCommandHandler SessionInStreamFromSessionIdConvention Gets or sets the convention for session command input stream from session ID. SessionStreamFromSessionId SessionInStreamFromSessionIdConvention { get; set; } Property Value SessionStreamFromSessionId SessionOutStreamFromSessionIdConvention Gets or sets the convention for obtaining the session output stream from the session ID. SessionStreamFromSessionId SessionOutStreamFromSessionIdConvention { get; set; } Property Value SessionStreamFromSessionId"
  },
  "api/MicroPlumberd.Services.IsHandlerExecutionPersistent.html": {
    "href": "api/MicroPlumberd.Services.IsHandlerExecutionPersistent.html",
    "title": "Delegate IsHandlerExecutionPersistent | MicroPlumberd",
    "keywords": "Delegate IsHandlerExecutionPersistent Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents a delegate that determines whether the execution of a handler is persistent. public delegate bool IsHandlerExecutionPersistent(Type handlerType) Parameters handlerType Type The type of the handler. Returns bool true if the execution of the handler is persistent; otherwise, false."
  },
  "api/MicroPlumberd.Services.MetadataExtensions.html": {
    "href": "api/MicroPlumberd.Services.MetadataExtensions.html",
    "title": "Class MetadataExtensions | MicroPlumberd",
    "keywords": "Class MetadataExtensions Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Provides extension methods for working with metadata. public static class MetadataExtensions Inheritance object MetadataExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SessionId(Metadata) Retrieves the session ID from the metadata. public static Guid? SessionId(this Metadata m) Parameters m Metadata The metadata. Returns Guid? The session ID, or null if not found."
  },
  "api/MicroPlumberd.Services.OutputSteamNameFromCommandHandler.html": {
    "href": "api/MicroPlumberd.Services.OutputSteamNameFromCommandHandler.html",
    "title": "Delegate OutputSteamNameFromCommandHandler | MicroPlumberd",
    "keywords": "Delegate OutputSteamNameFromCommandHandler Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents a delegate that returns the output stream name from a command handler type. public delegate string OutputSteamNameFromCommandHandler(Type commandHandlerType) Parameters commandHandlerType Type The type of the command handler. Returns string The name of the output stream."
  },
  "api/MicroPlumberd.Services.PlumberExtensions.html": {
    "href": "api/MicroPlumberd.Services.PlumberExtensions.html",
    "title": "Class PlumberExtensions | MicroPlumberd",
    "keywords": "Class PlumberExtensions Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public static class PlumberExtensions Inheritance object PlumberExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SubscribeCommandHandler<TCommandHandler>(IPlumber, bool?, StreamPosition?) public static Task<IAsyncDisposable> SubscribeCommandHandler<TCommandHandler>(this IPlumber plumber, bool? subscribePersistently, StreamPosition? streamStartPosition) where TCommandHandler : ICommandHandler, IServiceTypeRegister Parameters plumber IPlumber subscribePersistently bool? streamStartPosition StreamPosition? Returns Task<IAsyncDisposable> Type Parameters TCommandHandler"
  },
  "api/MicroPlumberd.Services.PlumberdConventionsExtensions.html": {
    "href": "api/MicroPlumberd.Services.PlumberdConventionsExtensions.html",
    "title": "Class PlumberdConventionsExtensions | MicroPlumberd",
    "keywords": "Class PlumberdConventionsExtensions Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Provides extension methods for working with conventionson service-layer. public static class PlumberdConventionsExtensions Inheritance object PlumberdConventionsExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ServicesConfig(IPlumberConfig) Retrieves the services configuration from the specified plumber configuration. public static IServicesConfig ServicesConfig(this IPlumberConfig config) Parameters config IPlumberConfig The plumber configuration to retrieve the services configuration from. Returns IServicesConfig The services configuration. ServicesConfig(IPlumberReadOnlyConfig) Retrieves the services configuration from the specified read-only plumber configuration. public static IServicesConfig ServicesConfig(this IPlumberReadOnlyConfig config) Parameters config IPlumberReadOnlyConfig The read-only plumber configuration to retrieve the services configuration from. Returns IServicesConfig The services configuration. ServicesConventions(IConventions) Retrieves the services conventions from the specified root conventions. public static IServicesConvention ServicesConventions(this IConventions conventions) Parameters conventions IConventions The conventions to retrieve the services conventions from. Returns IServicesConvention The services conventions. ServicesConventions(IReadOnlyConventions) Retrieves the services conventions from the specified read-only conventions. public static IServicesConvention ServicesConventions(this IReadOnlyConventions conventions) Parameters conventions IReadOnlyConventions The read-only conventions to retrieve the services conventions from. Returns IServicesConvention The services conventions."
  },
  "api/MicroPlumberd.Services.ProcessManagers.IProcessManagerClient.html": {
    "href": "api/MicroPlumberd.Services.ProcessManagers.IProcessManagerClient.html",
    "title": "Interface IProcessManagerClient | MicroPlumberd",
    "keywords": "Interface IProcessManagerClient Namespace MicroPlumberd.Services.ProcessManagers Assembly MicroPlumberd.Services.ProcessManagers.dll public interface IProcessManagerClient Properties Bus ICommandBus Bus { get; } Property Value ICommandBus Plumber IPlumber Plumber { get; } Property Value IPlumber Methods GetManager<TProcessManager>(Guid) Task<TProcessManager> GetManager<TProcessManager>(Guid commandRecipientId) where TProcessManager : IProcessManager, ITypeRegister Parameters commandRecipientId Guid Returns Task<TProcessManager> Type Parameters TProcessManager SubscribeProcessManager<TProcessManager>() Task<IAsyncDisposable> SubscribeProcessManager<TProcessManager>() where TProcessManager : IProcessManager, ITypeRegister Returns Task<IAsyncDisposable> Type Parameters TProcessManager"
  },
  "api/MicroPlumberd.Services.ProcessManagers.ProcessManagerClient.html": {
    "href": "api/MicroPlumberd.Services.ProcessManagers.ProcessManagerClient.html",
    "title": "Class ProcessManagerClient | MicroPlumberd",
    "keywords": "Class ProcessManagerClient Namespace MicroPlumberd.Services.ProcessManagers Assembly MicroPlumberd.Services.ProcessManagers.dll public class ProcessManagerClient : IProcessManagerClient Inheritance object ProcessManagerClient Implements IProcessManagerClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessManagerClient(IServiceProvider, IPlumber, ICommandBus) public ProcessManagerClient(IServiceProvider serviceProvider, IPlumber plumber, ICommandBus bus) Parameters serviceProvider IServiceProvider plumber IPlumber bus ICommandBus Properties Bus public ICommandBus Bus { get; } Property Value ICommandBus Plumber public IPlumber Plumber { get; } Property Value IPlumber Methods GetManager<TProcessManager>(Guid) public Task<TProcessManager> GetManager<TProcessManager>(Guid commandRecipientId) where TProcessManager : IProcessManager, ITypeRegister Parameters commandRecipientId Guid Returns Task<TProcessManager> Type Parameters TProcessManager SubscribeProcessManager<TProcessManager>() public Task<IAsyncDisposable> SubscribeProcessManager<TProcessManager>() where TProcessManager : IProcessManager, ITypeRegister Returns Task<IAsyncDisposable> Type Parameters TProcessManager"
  },
  "api/MicroPlumberd.Services.ProcessManagers.ProcessManagerExecutor-1.Lookup.html": {
    "href": "api/MicroPlumberd.Services.ProcessManagers.ProcessManagerExecutor-1.Lookup.html",
    "title": "Class ProcessManagerExecutor<TProcessManager>.Lookup | MicroPlumberd",
    "keywords": "Class ProcessManagerExecutor<TProcessManager>.Lookup Namespace MicroPlumberd.Services.ProcessManagers Assembly MicroPlumberd.Services.ProcessManagers.dll public class ProcessManagerExecutor<TProcessManager>.Lookup : IEventHandler, ITypeRegister Inheritance object ProcessManagerExecutor<TProcessManager>.Lookup Implements IEventHandler ITypeRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Types Supported event types. public static IEnumerable<Type> Types { get; } Property Value IEnumerable<Type> Supported types. Methods GetProcessManagerIdByReceiverId(Guid) public Guid? GetProcessManagerIdByReceiverId(Guid receiverId) Parameters receiverId Guid Returns Guid? Handle(Metadata, object) Dispatching method. Handles the specified metadata and event. public Task Handle(Metadata m, object ev) Parameters m Metadata The m. ev object The ev. Returns Task"
  },
  "api/MicroPlumberd.Services.ProcessManagers.ProcessManagerExecutor-1.html": {
    "href": "api/MicroPlumberd.Services.ProcessManagers.ProcessManagerExecutor-1.html",
    "title": "Class ProcessManagerExecutor<TProcessManager> | MicroPlumberd",
    "keywords": "Class ProcessManagerExecutor<TProcessManager> Namespace MicroPlumberd.Services.ProcessManagers Assembly MicroPlumberd.Services.ProcessManagers.dll public class ProcessManagerExecutor<TProcessManager> : IEventHandler, ITypeRegister where TProcessManager : IProcessManager, ITypeRegister Type Parameters TProcessManager Inheritance object ProcessManagerExecutor<TProcessManager> Implements IEventHandler ITypeRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProcessManagerExecutor(ProcessManagerClient, ILogger<ProcessManagerExecutor<TProcessManager>>) public ProcessManagerExecutor(ProcessManagerClient pmClient, ILogger<ProcessManagerExecutor<TProcessManager>> log) Parameters pmClient ProcessManagerClient log ILogger<ProcessManagerExecutor<TProcessManager>> Properties Types Supported event types. public static IEnumerable<Type> Types { get; } Property Value IEnumerable<Type> Supported types. Methods Handle(Metadata, object) Dispatching method. Handles the specified metadata and event. public Task Handle(Metadata m, object evt) Parameters m Metadata The m. evt object Returns Task"
  },
  "api/MicroPlumberd.Services.ProcessManagers.html": {
    "href": "api/MicroPlumberd.Services.ProcessManagers.html",
    "title": "Namespace MicroPlumberd.Services.ProcessManagers | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.Services.ProcessManagers Classes ProcessManagerClient ProcessManagerExecutor<TProcessManager> ProcessManagerExecutor<TProcessManager>.Lookup Interfaces IProcessManagerClient"
  },
  "api/MicroPlumberd.Services.SessionStreamFromSessionId.html": {
    "href": "api/MicroPlumberd.Services.SessionStreamFromSessionId.html",
    "title": "Delegate SessionStreamFromSessionId | MicroPlumberd",
    "keywords": "Delegate SessionStreamFromSessionId Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll Represents a delegate that takes a session ID and returns a session stream. public delegate string SessionStreamFromSessionId(Guid id) Parameters id Guid The session ID. Returns string The session stream."
  },
  "api/MicroPlumberd.Services.StreamPositionExtensions.html": {
    "href": "api/MicroPlumberd.Services.StreamPositionExtensions.html",
    "title": "Class StreamPositionExtensions | MicroPlumberd",
    "keywords": "Class StreamPositionExtensions Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public static class StreamPositionExtensions Inheritance object StreamPositionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToStreamPosition(FromStream) public static StreamPosition ToStreamPosition(this FromStream fs) Parameters fs FromStream Returns StreamPosition"
  },
  "api/MicroPlumberd.Services.ThrowsFaultExceptionAttribute-1.html": {
    "href": "api/MicroPlumberd.Services.ThrowsFaultExceptionAttribute-1.html",
    "title": "Class ThrowsFaultExceptionAttribute<TMessage> | MicroPlumberd",
    "keywords": "Class ThrowsFaultExceptionAttribute<TMessage> Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public class ThrowsFaultExceptionAttribute<TMessage> : ThrowsFaultExceptionAttribute Type Parameters TMessage Inheritance object Attribute ThrowsFaultExceptionAttribute ThrowsFaultExceptionAttribute<TMessage> Inherited Members ThrowsFaultExceptionAttribute.ThrownType Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ThrowsFaultExceptionAttribute() public ThrowsFaultExceptionAttribute()"
  },
  "api/MicroPlumberd.Services.ThrowsFaultExceptionAttribute.html": {
    "href": "api/MicroPlumberd.Services.ThrowsFaultExceptionAttribute.html",
    "title": "Class ThrowsFaultExceptionAttribute | MicroPlumberd",
    "keywords": "Class ThrowsFaultExceptionAttribute Namespace MicroPlumberd.Services Assembly MicroPlumberd.Services.dll public abstract class ThrowsFaultExceptionAttribute : Attribute Inheritance object Attribute ThrowsFaultExceptionAttribute Derived ThrowsFaultExceptionAttribute<TMessage> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ThrowsFaultExceptionAttribute(Type) protected ThrowsFaultExceptionAttribute(Type thrownType) Parameters thrownType Type Properties ThrownType public Type ThrownType { get; init; } Property Value Type"
  },
  "api/MicroPlumberd.Services.Uniqueness.IUniqueFrom-2.html": {
    "href": "api/MicroPlumberd.Services.Uniqueness.IUniqueFrom-2.html",
    "title": "Interface IUniqueFrom<TCategory, TCommand> | MicroPlumberd",
    "keywords": "Interface IUniqueFrom<TCategory, TCommand> Namespace MicroPlumberd.Services.Uniqueness Assembly MicroPlumberd.Services.Uniqueness.dll public interface IUniqueFrom<out TCategory, in TCommand> Type Parameters TCategory TCommand Methods From(TCommand) public static abstract TCategory From(TCommand cmd) Parameters cmd TCommand Returns TCategory"
  },
  "api/MicroPlumberd.Services.Uniqueness.UniqueAttribute-1.html": {
    "href": "api/MicroPlumberd.Services.Uniqueness.UniqueAttribute-1.html",
    "title": "Class UniqueAttribute<TCategory> | MicroPlumberd",
    "keywords": "Class UniqueAttribute<TCategory> Namespace MicroPlumberd.Services.Uniqueness Assembly MicroPlumberd.Services.Uniqueness.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Property)] public class UniqueAttribute<TCategory> : Attribute Type Parameters TCategory Inheritance object Attribute UniqueAttribute<TCategory> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Category public static string Category { get; } Property Value string"
  },
  "api/MicroPlumberd.Services.Uniqueness.html": {
    "href": "api/MicroPlumberd.Services.Uniqueness.html",
    "title": "Namespace MicroPlumberd.Services.Uniqueness | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.Services.Uniqueness Classes UniqueAttribute<TCategory> Interfaces IUniqueFrom<TCategory, TCommand>"
  },
  "api/MicroPlumberd.Services.html": {
    "href": "api/MicroPlumberd.Services.html",
    "title": "Namespace MicroPlumberd.Services | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.Services Classes CommandExecutionResults CommandHandlerAttribute CommandHandlerAttributeValidator<T> CommandHandlerMetadataExtensions ContainerExtensions MetadataExtensions Provides extension methods for working with metadata. PlumberExtensions PlumberdConventionsExtensions Provides extension methods for working with conventionson service-layer. StreamPositionExtensions ThrowsFaultExceptionAttribute ThrowsFaultExceptionAttribute<TMessage> Interfaces ICommandHandler ICommandHandler<TCommand> ICommandHandler<TId, TCommand> IServiceTypeRegister IServicesConfig Represents the configuration for services. IServicesConvention Convention setting interface for plumberd framework. Delegates AppCommandStream Represents a delegate that returns a string representing the application's command stream. CommandMessageTypes Represents a delegate that returns a collection of command message types. CommandName Represents a delegate that returns the name of a command based on its type. GroupNameFromCommandHandler Represents a delegate that returns the group name for a given command handler type. IsHandlerExecutionPersistent Represents a delegate that determines whether the execution of a handler is persistent. OutputSteamNameFromCommandHandler Represents a delegate that returns the output stream name from a command handler type. SessionStreamFromSessionId Represents a delegate that takes a session ID and returns a session stream."
  },
  "api/MicroPlumberd.Snapshot-1.html": {
    "href": "api/MicroPlumberd.Snapshot-1.html",
    "title": "Class Snapshot<T> | MicroPlumberd",
    "keywords": "Class Snapshot<T> Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a generic snapshot object used in Plumberd. public sealed record Snapshot<T> : Snapshot, IEquatable<Snapshot>, ISnapshot, IEquatable<Snapshot<T>> Type Parameters T The type of the snapshot data. Inheritance object Snapshot Snapshot<T> Implements IEquatable<Snapshot> ISnapshot IEquatable<Snapshot<T>> Inherited Members Snapshot.Created Snapshot.Version object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Data Gets the data of the snapshot. public T Data { get; } Property Value T"
  },
  "api/MicroPlumberd.Snapshot.html": {
    "href": "api/MicroPlumberd.Snapshot.html",
    "title": "Class Snapshot | MicroPlumberd",
    "keywords": "Class Snapshot Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a snapshot object used in Plumberd. public abstract record Snapshot : IEquatable<Snapshot> Inheritance object Snapshot Implements IEquatable<Snapshot> Derived Snapshot<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Created Gets the creation date of the snapshot. public DateTimeOffset Created { get; } Property Value DateTimeOffset Version Gets the version of the snapshot. public long Version { get; } Property Value long"
  },
  "api/MicroPlumberd.SnapshotEventName.html": {
    "href": "api/MicroPlumberd.SnapshotEventName.html",
    "title": "Delegate SnapshotEventName | MicroPlumberd",
    "keywords": "Delegate SnapshotEventName Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that returns the name of a snapshot event for a given state type. public delegate string SnapshotEventName(Type stateType) Parameters stateType Type The type of the state. Returns string The name of the snapshot event."
  },
  "api/MicroPlumberd.SnapshotPolicyFactory.html": {
    "href": "api/MicroPlumberd.SnapshotPolicyFactory.html",
    "title": "Delegate SnapshotPolicyFactory | MicroPlumberd",
    "keywords": "Delegate SnapshotPolicyFactory Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a policy for creating snapshots of a specific type. public delegate ISnapshotPolicy SnapshotPolicyFactory(Type owner) Parameters owner Type Represents a policy for creating snapshots of a specific type. Returns ISnapshotPolicy Represents a policy for creating snapshots of a specific type."
  },
  "api/MicroPlumberd.StandardMetadataEnricherTypes.html": {
    "href": "api/MicroPlumberd.StandardMetadataEnricherTypes.html",
    "title": "Enum StandardMetadataEnricherTypes | MicroPlumberd",
    "keywords": "Enum StandardMetadataEnricherTypes Namespace MicroPlumberd Assembly MicroPlumberd.dll [Flags] public enum StandardMetadataEnricherTypes Fields All = Created | InvocationContext Created = 1 InvocationContext = 2 None = 0"
  },
  "api/MicroPlumberd.StateChangeAction-1.html": {
    "href": "api/MicroPlumberd.StateChangeAction-1.html",
    "title": "Class StateChangeAction<TOwner> | MicroPlumberd",
    "keywords": "Class StateChangeAction<TOwner> Namespace MicroPlumberd Assembly MicroPlumberd.ProcessManager.Abstractions.dll public record StateChangeAction<TOwner> : IStateChangeAction, IProcessAction, IEquatable<StateChangeAction<TOwner>> Type Parameters TOwner Inheritance object StateChangeAction<TOwner> Implements IStateChangeAction IProcessAction IEquatable<StateChangeAction<TOwner>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StateChangeAction(Guid, long, params object[]) public StateChangeAction(Guid Id, long Version, params object[] Events) Parameters Id Guid Version long Events object[] Properties Events public object[] Events { get; init; } Property Value object[] Id public Guid Id { get; init; } Property Value Guid Owner public Type Owner { get; } Property Value Type Version public long Version { get; init; } Property Value long"
  },
  "api/MicroPlumberd.StateInfo.html": {
    "href": "api/MicroPlumberd.StateInfo.html",
    "title": "Struct StateInfo | MicroPlumberd",
    "keywords": "Struct StateInfo Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents the state information of an aggregate. public readonly struct StateInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors StateInfo(long, DateTimeOffset) Represents the state information of an aggregate. public StateInfo(long version, DateTimeOffset created) Parameters version long created DateTimeOffset Properties Created Gets or sets the creation date and time of the state. public DateTimeOffset Created { get; init; } Property Value DateTimeOffset Version Gets or sets the version of the state. public long Version { get; init; } Property Value long"
  },
  "api/MicroPlumberd.SteamNameConvention.html": {
    "href": "api/MicroPlumberd.SteamNameConvention.html",
    "title": "Delegate SteamNameConvention | MicroPlumberd",
    "keywords": "Delegate SteamNameConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines the convention for generating a steam name based on the aggregate type and aggregate ID. public delegate string SteamNameConvention(Type aggregateType, object aggregateId) Parameters aggregateType Type The type of the aggregate. aggregateId object The ID of the aggregate. Returns string A string representing the steam name."
  },
  "api/MicroPlumberd.StreamCategoryConvention.html": {
    "href": "api/MicroPlumberd.StreamCategoryConvention.html",
    "title": "Delegate StreamCategoryConvention | MicroPlumberd",
    "keywords": "Delegate StreamCategoryConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines a convention for determining the stream category based on the aggregate type. public delegate string StreamCategoryConvention(Type aggregateType) Parameters aggregateType Type The type of the aggregate. Returns string A string representing the stream category."
  },
  "api/MicroPlumberd.StreamNameFromEventConvention.html": {
    "href": "api/MicroPlumberd.StreamNameFromEventConvention.html",
    "title": "Delegate StreamNameFromEventConvention | MicroPlumberd",
    "keywords": "Delegate StreamNameFromEventConvention Namespace MicroPlumberd Assembly MicroPlumberd.dll Represents a delegate that defines a convention for determining the stream category named based on event-type. public delegate string StreamNameFromEventConvention(Type eventType, object? id) Parameters eventType Type Type of the event. id object Represents a delegate that defines a convention for determining the stream category named based on event-type. Returns string"
  },
  "api/MicroPlumberd.TypeEventConverter.html": {
    "href": "api/MicroPlumberd.TypeEventConverter.html",
    "title": "Delegate TypeEventConverter | MicroPlumberd",
    "keywords": "Delegate TypeEventConverter Namespace MicroPlumberd Assembly MicroPlumberd.dll A named delegate used for recognizing event type from a string. public delegate bool TypeEventConverter(string type, out Type t) Parameters type string The type. t Type The t. Returns bool"
  },
  "api/MicroPlumberd.TypeExtensions.html": {
    "href": "api/MicroPlumberd.TypeExtensions.html",
    "title": "Class TypeExtensions | MicroPlumberd",
    "keywords": "Class TypeExtensions Namespace MicroPlumberd Assembly MicroPlumberd.dll public static class TypeExtensions Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFriendlyName(Type) public static string GetFriendlyName(this Type type) Parameters type Type Returns string"
  },
  "api/MicroPlumberd.Utils.AsyncDisposableCollection.html": {
    "href": "api/MicroPlumberd.Utils.AsyncDisposableCollection.html",
    "title": "Class AsyncDisposableCollection | MicroPlumberd",
    "keywords": "Class AsyncDisposableCollection Namespace MicroPlumberd.Utils Assembly MicroPlumberd.dll public class AsyncDisposableCollection : IAsyncDisposable Inheritance object AsyncDisposableCollection Implements IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. New() public static AsyncDisposableCollection New() Returns AsyncDisposableCollection Operators operator +(AsyncDisposableCollection, IAsyncDisposable) public static AsyncDisposableCollection operator +(AsyncDisposableCollection left, IAsyncDisposable right) Parameters left AsyncDisposableCollection right IAsyncDisposable Returns AsyncDisposableCollection"
  },
  "api/MicroPlumberd.Utils.html": {
    "href": "api/MicroPlumberd.Utils.html",
    "title": "Namespace MicroPlumberd.Utils | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd.Utils Classes AsyncDisposableCollection"
  },
  "api/MicroPlumberd.html": {
    "href": "api/MicroPlumberd.html",
    "title": "Namespace MicroPlumberd | MicroPlumberd",
    "keywords": "Namespace MicroPlumberd Classes AcceptedTypeAttribute Attribute used to decorate dispatching method to list possible concrete types. It is when code gets generated by source generators. AggregateAttribute Attribute that is used on aggregates. When a class is marked with this attribute, source generators will generate partial class that contains all boring dispatching code and metadata for plumberd to do its job. AggregateBase<TId, TState> Represents the base class for aggregate roots in the application. AttributeSnaphotPolicy<T> Standard snapshot policy that takes into the account time and minimal event occurence from the last taken snapshot. CommandEnqueued Factory class for CommandEnqueued<TCommand> events. CommandEnqueued<TCommand> Immutable class used in ProcessManagers in Given methods the rebuild the state based on send commands. CommandInvocationFailed CommandRequest CommandRequest<TCommand> ContainerExtensions EventHandlerAttribute Attribute that marks a class that is an EventHandler for code-generation. This is usually a read-model or a processor. EventStoreProjectionManagementClientExtensions ExecutionContext FaultException FaultException<TData> InvocationContext InvocationScope MetadataExtensions OutputStreamAttribute Use this attribute on Models where you want to override stream name convention. Plumber Root class for ED plumbing. ProcessManagerAttribute ProcessManagerBase<TId> RequestInvokerExtensions Snapshot Represents a snapshot object used in Plumberd. Snapshot<T> Represents a generic snapshot object used in Plumberd. StateChangeAction<TOwner> TypeExtensions Structs FromRelativeStreamPosition Metadata Metadata structure. StateInfo Represents the state information of an aggregate. Interfaces IAggregate Interface for an aggregate. IAggregate<TSelf> Generic version of IAggregate interface that contains factory method. ICommandBus Represents a command bus for sending commands. ICommandEnqueued ICommandRequest ICommandRequest<TCommand> IConventions IEventHandler Dispatching interface for EventHandlers. IEventHandler<TOwner> Interface for EventHandlers. IEventRecord IEventRecord<TEvent> IExtension IId IIdAware IId<T> IObjectSerializer Object serializer used for event data and metadata serialization. IPlumber Root interface for plumberd IPlumberConfig IPlumberReadOnlyConfig IProcessAction IProcessManager IProjectionRegister IReadOnlyConventions Represents a set of read-only conventions used by the MicroPlumberd framework. ISnapshot Represents a snapshot object used in Plumberd. ISnapshotPolicy Interface for creating snapshot policies, that manage when a snapshot is performed on an aggregate. ISnapshotPolicy<T> Interface for creating snapshot policies, that manage when a snapshot is performed on an aggregate. IStateChangeAction IStatefull Represents a stateful object. IStatefull<T> Represents a stateful object that exposes a read-only state. ISubscriptionRunner ISubscriptionSet Subscription set builder. ITypeHandlerRegisters ITypeRegister ITypeRegister is used to indicate which event types are supported by the class. IVersionAware Interface for increasing the version. IVersioned Simple interface for versioned objects. Enums StandardMetadataEnricherTypes Delegates BuildInvocationContext EventIdConvention Represents delegate that creates Uuid from an event and optinally aggregate instance. EventNameConvention Represents a delegate that defines the convention for generating event names. GroupNameModelConvention Represents a delegate that defines a naming convention for group name used in persistent subscription. MetadataConvention Represents a delegate that defines a convention for handling metadata in an event. OutputStreamModelConvention Represents a delegate that defines the convention for generating the output stream name based on the model type. ProjectionCategoryStreamConvention Represents a delegate that defines the convention for determining the projection category stream for a given model type. SnapshotEventName Represents a delegate that returns the name of a snapshot event for a given state type. SnapshotPolicyFactory Represents a policy for creating snapshots of a specific type. SteamNameConvention Represents a delegate that defines the convention for generating a steam name based on the aggregate type and aggregate ID. StreamCategoryConvention Represents a delegate that defines a convention for determining the stream category based on the aggregate type. StreamNameFromEventConvention Represents a delegate that defines a convention for determining the stream category named based on event-type. TypeEventConverter A named delegate used for recognizing event type from a string."
  },
  "index.html": {
    "href": "index.html",
    "title": "micro-plumberd | MicroPlumberd",
    "keywords": "micro-plumberd Micro library for EventStore, CQRS and EventSourcing. Just eXtreamly simple. Documentation can be found here: MicroPlumberd Documentation Getting started Install nugets: dotnet add package MicroPlumberd # For your domain dotnet add package MicroPlumberd.Services # For IoC integration dotnet add package MicroPlumberd.SourceGenerators # Code generators for Aggregates, EventHandlers and more. Configure plumber // Vanilla string connectionString = $\"esdb://admin:changeit@localhost:2113?tls=false&tlsVerifyCert=false\"; var settings = EventStoreClientSettings.Create(connectionString); var plumber = Plumber.Create(settings); However, typicly you would add plumberd to your app: services.AddPlumberd(); Aggregates Let's start with an aggregate: [Aggregate] public partial class FooAggregate(Guid id) : AggregateBase<FooAggregate.FooState>(id) { public record FooState { public string Name { get; set; } }; private static FooState Given(FooState state, FooCreated ev) => state with { Name = ev.Name }; private static FooState Given(FooState state, FooRefined ev) => state with { Name =ev.Name }; public void Open(string msg) => AppendPendingChange(new FooCreated() { Name = msg }); public void Change(string msg) => AppendPendingChange(new FooRefined() { Name = msg }); } // And events: public record FooCreated { public string? Name { get; set; } } public record FooRefined { public string? Name { get; set; } } Comments: State is encapsulated in nested class FooState. Given methods, that are used when loading aggregate from the EventStoreDB are private and static. State is encouraged to be immutable. [Aggregate] attribute is used by SourceGenerator that will generate dispatching code and handy metadata. Consume an aggregate. If you want to create a new aggregate and save it to EventStoreDB: FooAggregate aggregate = FooAggregate.New(Guid.NewGuid()); aggregate.Open(\"Hello\"); await plumber.SaveNew(aggregate); If you want to load aggregate from EventStoreDB, change it and save back to EventStoreDB var aggregate = await plumber.Get<FooAggregate>(\"YOUR_ID\"); aggregate.Change(\"World\"); await plumber.SaveChanges(aggregate); Write a read-model/processor Read-Models [EventHandler] public partial class FooModel { private async Task Given(Metadata m, FooCreated ev) { // your code } private async Task Given(Metadata m, FooRefined ev) { // your code } } Comments: ReadModels have private async Given methods. Since they are async, you can invoke SQL here, or othere APIs to store your model. Metadata contains standard stuff (Created, CorrelationId, CausationId), but can be reconfigured. var fooModel = new FooModel(); var sub= await plumber.SubscribeEventHandler(fooModel); // or if you want to persist progress of your subscription var sub2= await plumber.SubscribeEventHandlerPersistently(fooModel); With SubscribeModel you can subscribe from start, from certain moment or from the end of the stream. If you want to use DI and have your model as a scoped one, you can configure plumber at the startup and don't need to invoke SubscribeEventHandler manually. Here you have an example with EF Core. // Program.cs services .AddPlumberd() .AddEventHandler<FooModel>(); // FooModel.cs [EventHandler] public partial class FooModel : DbContext { private async Task Given(Metadata m, FooCreated ev) { // your code } private async Task Given(Metadata m, FooRefined ev) { // your code } // other stuff, DbSet... etc... } Processors [EventHandler] public partial class FooProcessor(IPlumber plumber) { private async Task Given(Metadata m, FooRefined ev) { var agg = FooAggregate.New(Guid.NewGuid()); agg.Open(ev.Name + \" new\"); await plumber.SaveNew(agg); } } Implementing a processor is technically the same as implementing a read-model, but inside the Given method you would typically invoke a command or execute an aggregate. Features Aggregates Read-Models Let's analyse this example: You create a read-model that subscribes persistently. You subscribe it with plumber. You changed something in the event and want to see the new model. Instead of re-creating old read-model, you can easily create new one. Just change MODEL_VER to reflect new version. Please note that Sql schema create/drop auto-generation script will be covered in a different article. (For now we leave it for developers.) Comments: By creating a new read-model you can always compare the differences with the previous one. You can leverage canary-deployment strategy and have 2 versions of your system running in parallel. [OutputStream(FooModel.MODEL_NAME)] [EventHandler] public partial class FooModel : DbContext { internal const string MODEL_VER = \"_v1\"; internal const string MODEL_NAME = $\"FooModel{MODEL_VER}\"; protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder .Entity<FooEntity>() .ToTable($\"FooEntities{MODEL_VER}\"); } private async Task Given(Metadata m, FooCreated ev) { // your code } private async Task Given(Metadata m, FooRefined ev) { // your code } } Command-Handlers & Message Bus If you want to start as quickly as possible, you can start with EventStoreDB as command-message-bus. services.AddPlumberd() .AddCommandHandler<FooCommandHandler>() // on the client side: ICommandBus bus; // from DI bus.SendAsync(Guid.NewGuid(), new CreateFoo() { Name = \"Hello\" }); Scaling considerations If you are running many replicas of your service, you need to switch command-execution to persistent mode: services.AddPlumberd(configure: c => c.Conventions.ServicesConventions().AreHandlersExecutedPersistently = () => true) .AddCommandHandler<FooCommandHandler>() This means, that once your microservice subscribes to commands, it will execute all. So if your service is down, and commands are saved, once your service is up, they will be executed. To skip old commands, you can configure a filter. services.AddPlumberd(configure: c => { c.Conventions.ServicesConventions().AreHandlersExecutedPersistently = () => true; c.Conventions.ServicesConventions().CommandHandlerSkipFilter = (m,ev) => DateTimeOffset.Now.Substract(m.Created()) > TimeSpan.FromSeconds(60); }) .AddCommandHandler<FooCommandHandler>() Conventions SteamNameConvention - from aggregate type, and aggregate id EventNameConvention - from aggregate? instance and event instance MetadataConvention - to enrich event with metadata based on aggregate instance and event instance EventIdConvention - from aggregate instance and event instance OutputStreamModelConvention - for output stream name from model-type GroupNameModelConvention - for group name from model-type Subscription Sets You can easily create a stream that joins events together by event-type, and subscribe many read-models at once. Here it is named 'MasterStream', which is created out of events used to create DimentionLookupModel and MasterModel. In this way, you can easily manage the composition and decoupling of read-models. You can nicely composite your read-models. And if you don't wish to decouple read-models, you can reuse your existing one. /// Given simple models, where master-model has foreign-key used to obtain value from dimentionLookupModel var dimentionTable = new DimentionLookupModel(); var factTable = new MasterModel(dimentionTable); await plumber.SubscribeSet() .With(dimentionTable) .With(factTable) .SubscribeAsync(\"MasterStream\", FromStream.Start); Integration tests support Specflow/Ghierkin step-files generation Given you have written your domain, you can generate step files that would populate Ghierkin API to your domain. GRPC Direct communication If you'd like to use direct dotnet-dotnet communication to execute command-handlers install MicroPlumberd.DirectConnect dotnet add package MicroPlumberd.Services.Grpc.DirectConnect If you prefer direct communication (like REST-API, but without the hassle for contract generation/etc.) you can use direct communication where client invokes command handle using grpc. Command is not stored in EventStore. /// Let's configure server: services.AddCommandHandler<FooCommandHandler>().AddServerDirectConnect(); /// Add mapping to direct-connect service app.MapDirectConnect(); Here is an example of a command handler code: [CommandHandler] public partial class FooCommandHandler(IPlumber plumber) { [ThrowsFaultException<BusinessFault>] public async Task Handle(Guid id, CreateFoo cmd) { if (cmd.Name == \"error\") throw new BusinessFaultException(\"Foo\"); var agg = FooAggregate.New(id); agg.Open(cmd.Name); await plumber.SaveNew(agg); } [ThrowsFaultException<BusinessFault>] public async Task<HandlerOperationStatus> Handle(Guid id, ChangeFoo cmd) { if (cmd.Name == \"error\") throw new BusinessFaultException(\"Foo\"); var agg = await plumber.Get<FooAggregate>(id); agg.Change(cmd.Name); await plumber.SaveChanges(agg); return HandlerOperationStatus.Ok(); } } And how on the client side: service.AddClientDirectConnect().AddCommandInvokers(); // And invocation var clientPool = sp.GetRequiredService<IRequestInvokerPool>(); var invoker = clientPool.Get(\"YOUR_GRPC_URL\"); await invoker.Execute(Guid.NewId(), new CreateFoo(){}); EXPERIMENTAL Process-Manager Given diagram: # Add required packages: dotnet add package MicroPlumberd.Services.ProcessManagers The code of Order Process Manager looks like this: // Let's configure stuff beforehand services.AddPlumberd(eventStoreConfig) .AddCommandHandler<OrderCommandHandler>() // handles PlaceOrder command. .AddProcessManager<OrderProcessManager>(); // And process manager. [ProcessManager] public class OrderProcessManager(IPlumberd plumberd) { public async Task<ICommandRequest<MakeReservation>> StartWhen(Metadata m, OrderCreated e) { return CommandRequest.Create(Guid.NewId(), new MakeReservation()); } public async Task<ICommandRequest<MakePayment>> When(Metadata m, SeatsReserved e) { return CommandRequest.Create(Guid.NewId(), new MakePayment()); } public async Task When(Metadata m, PaymentAccepted e) { var order = await plumberd.Get<Order>(this.Id); order.Confirm(); await plumberd.SaveChanges(order); } // Optional private async Task Given(Metadata m, OrderCreated v){ // this will be used to rehydrate state of process-manager // So that when(SeatsReserved) you can adjust the response. } // Optional 2 private async Task Given(Metadata m, CommandEnqueued<MakeReservation> e){ // same here. } } EXPERIMENTAL Uniqueness support Uniqueness support in EventSourcing is not out-of-the-box, especially in regards to EventStoreDB. You can use some \"hacks\" but at the end of the day, you want uniqueness to be enforced by some kind of database. EventStoreDB is not designed for that purpose. However, you can leverage typical reservation patterns. At the moment the library supports only the first option: At domain-layer, a domain-service usually would enforce uniqueness. This commonly requires a round-trip to a database. So just before actual event(s) are saved in a stream, a check against uniqueness constraints should be evaluated - thus reservation is made. When the event is appended to the stream, a confirmation is done automatically (on db). At a app-layer, command-handler would typically reserve a name. And when aggregate, which is being executed by the handler, saves its events successfully, then the reservation is confirmed. If the handler fails, then the reservation is deleted. Seems simple? Under the hood, it is not that simple, because what if the process is terminated while the command-handler is executing? We need to make sure, that we can recover successfully from this situation. Let's see the API proposal: // Let's define unique-category name record FooCategory; public class FooCreated // and apply it to one fo the columns. [Unique<FooCategory>] public string? Name { get; set; } // other stuff } For complex types, we need more flexibility. // Let's define unique-category name, this will be mapped to columns in db // If you'd opt for domain-layer enforcment, you need to change commands to events. record BooCategory(string Name, string OtherName) : IUniqueFrom<BooCategory, BooCreated>, IUniqueFrom<BooCategory, BooRefined> { public static BooCategory From(BooCreated x) => new(x.InitialName, x.OtherName); public static BooCategory From(BooRefined x) => new(x.NewName, x.OtherName); } [Unique<BooCategory>] public record BooCreated(string InitialName, string OtherName); [Unique<BooCategory>] public record BooRefined(string NewName, string OtherName);"
  }
}